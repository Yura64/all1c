#Область РазборФайлаВыгрузкиXML

// Функция получает дерево значений из файла xml формы
//
Функция XML_РазобратьФайлВыгрузки(ПолноеИмяФайла, ДеревоДанных = "") Экспорт
	
	XML_СоздатьДеревоФайлаВыгрузки(ДеревоДанных);
	
	ЧтениеXML = XML_ПрочитатьФайлВыгрузки(ПолноеИмяФайла);
	Если ЧтениеXML = Неопределено Тогда
		Возврат ДеревоДанных;
	КонецЕсли;
	
	XML_ПолучитьДеревоИзФайлаВыгрузки(ДеревоДанных, ЧтениеXML);
	
	Возврат ДеревоДанных;
	
КонецФункции

// Функция создает пустое дерево значений структуры "Имя, ИмяНРег, Значение".
// Параметры:
//   Дерево - ДеревоЗначений, дерево значений, которое будет приведено к необходимой структуре и очищено.
// Возвращаемое значение:
//   ДеревоЗначений.
Функция XML_СоздатьДеревоФайлаВыгрузки(Дерево = "")
	
	Если ТипЗнч(Дерево) <> Тип("ДеревоЗначений") Тогда
		Дерево = Новый ДеревоЗначений;
	КонецЕсли;
	
	Описание = Новый ОписаниеТипов("Строка");
	Колонки = Дерево.Колонки;
	
	Если Колонки.Найти("Имя") = Неопределено Тогда
		Колонки.Добавить("Имя", Описание);
	КонецЕсли;
	
	Если Колонки.Найти("ИмяНРег") = Неопределено Тогда
		Колонки.Добавить("ИмяНРег", Описание);
	КонецЕсли;
	
	Если Колонки.Найти("Значение") = Неопределено Тогда
		Колонки.Добавить("Значение", Описание);
	КонецЕсли;
	
	Дерево.Строки.Очистить();
	
	Возврат Дерево;
	
КонецФункции

Функция XML_ПрочитатьФайлВыгрузки(ПутьФайла)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ПутьФайла);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ЧтениеXML;
	
КонецФункции

Функция XML_ПолучитьДеревоИзФайлаВыгрузки(ДеревоДанных, ЧтениеXML)
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ТипУзла = ЧтениеXML.ТипУзла;
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			СтрокаДерева = XML_ДобавитьСтрокуДерева(ДеревоДанных, ЧтениеXML.Имя);
			
			XML_ДобавитьАтрибутыВДерево(СтрокаДерева, ЧтениеXML);
			XML_ПолучитьДеревоИзФайлаВыгрузки(СтрокаДерева, ЧтениеXML);
		ИначеЕсли ТипУзла = ТипУзлаXML.Текст Тогда
			ДеревоДанных.Значение = ЧтениеXML.Значение;
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция XML_ДобавитьСтрокуДерева(ДеревоДанных, Имя, Значение = "", Системная = Ложь)
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	
	СтрокаДерева.Имя = Имя;
	СтрокаДерева.ИмяНРег = НРег(Имя);
	СтрокаДерева.Значение = Значение;
	
	Возврат СтрокаДерева;
	
КонецФункции

Функция XML_ДобавитьАтрибутыВДерево(ДеревоДанных, ЧтениеXML)
	
	Если ЧтениеXML.КоличествоАтрибутов() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаАтрибутов = XML_ДобавитьСтрокуДерева(ДеревоДанных, "Атрибуты", "", Истина);
	
	Для Счетчик = 0 По ЧтениеXML.КоличествоАтрибутов() - 1 Цикл
		XML_ДобавитьСтрокуДерева(СтрокаАтрибутов, ЧтениеXML.ИмяАтрибута(Счетчик), ЧтениеXML.ПолучитьАтрибут(Счетчик));
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтруктурыКонфигурации

Функция ПолучитьТаблицуТиповОбъектовДляДереваКонфигурации(ТаблицаТиповОбъектов)
	
	ТаблицаТиповОбъектовДляДереваКонфигурации = Новый ТаблицаЗначений;
	ТаблицаТиповОбъектовДляДереваКонфигурации.Колонки.Добавить("Родитель");
	ТаблицаТиповОбъектовДляДереваКонфигурации.Колонки.Добавить("ТипОбъектаРус");
	ТаблицаТиповОбъектовДляДереваКонфигурации.Колонки.Добавить("ТипОбъектаАнгл");
	ТаблицаТиповОбъектовДляДереваКонфигурации.Колонки.Добавить("ТипОбъектаРусМнФормы");
	ТаблицаТиповОбъектовДляДереваКонфигурации.Колонки.Добавить("ТипОбъектаАнглМнФормы");
	ТаблицаТиповОбъектовДляДереваКонфигурации.Колонки.Добавить("ТипОбъекта");
	ТаблицаТиповОбъектовДляДереваКонфигурации.Колонки.Добавить("ТаблицаПодчиненныхТипов");
	
	ТаблицаПодчиненныхТиповШаблон = Новый ТаблицаЗначений;
	ТаблицаПодчиненныхТиповШаблон.Колонки.Добавить("ТипПодчиненногоОбъекта");
	ТаблицаПодчиненныхТиповШаблон.Колонки.Добавить("ТипПодчиненногоОбъектаАнгл");
	ТаблицаПодчиненныхТиповШаблон.Колонки.Добавить("ТипПодчиненногоОбъектаАнглМнФормы");
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМодуль;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПараметрСеанса;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Роль;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийРеквизит;
	
	// Планы обмена.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПланОбмена;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Критерии отбора.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.КритерийОтбора;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Подписки на события.
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПодпискаНаСобытия;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.РегламентноеЗадание;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ФункциональнаяОпция;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПараметрФункциональнойОпции;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ОпределяемыйТип;
	
	// Хранилища настроек.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ХранилищеНастроек;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Общие формы.
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяКоманда;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ГруппаКоманд;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Интерфейс;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМакет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Картинка;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПакетXDTO;
	
	// Web-сервисы.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Операция;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.WebСервис;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// HTTP-Сервисы.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ШаблонURL;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.HTTPСервис;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// WS-Ссылки.
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.WSСсылка;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ЭлементСтиля;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Стиль;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Язык;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Константа;
	
	// Справочники.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Справочник;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Документы.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Документ;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Журналы документов.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Графа;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ЖурналДокументов;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Перечисления.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Значение;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Перечисление;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Отчеты.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Отчет;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Обработки.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Обработка;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Планы видов характеристик.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Планы счетов.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПланСчетов;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Планы видов расчета.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовРасчета;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Регистры сведений.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Измерение;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Ресурс;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрСведений;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Регистры накопления.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Измерение;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Ресурс;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрНакопления;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Регистры бухгалтерии.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Измерение;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Ресурс;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрБухгалтерии;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Регистры расчета.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Измерение;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Ресурс;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрРасчета;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Бизнес-процессы.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.БизнесПроцесс;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	// Задачи.
	ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТиповШаблон.Скопировать();
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Команда;
	ТаблицаПодчиненныхТипов.Добавить().ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет;
	
	НовыйТипОбъектов = ТаблицаТиповОбъектовДляДереваКонфигурации.Добавить();
	НовыйТипОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.Задача;
	НовыйТипОбъектов.ТаблицаПодчиненныхТипов = ТаблицаПодчиненныхТипов;
	
	Для Каждого СтрокаТипаОбъектаДляДереваКонфигурации Из ТаблицаТиповОбъектовДляДереваКонфигурации Цикл
		
		ТипОбъекта = СтрокаТипаОбъектаДляДереваКонфигурации.ТипОбъекта;
		
		СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Найти(ТипОбъекта, "ТипОбъекта");
		Если СтрокаТипаОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТипаОбъектаДляДереваКонфигурации.Родитель = СтрокаТипаОбъекта.Группа;
		СтрокаТипаОбъектаДляДереваКонфигурации.ТипОбъектаРус = СтрокаТипаОбъекта.Имя;
		СтрокаТипаОбъектаДляДереваКонфигурации.ТипОбъектаРусМнФормы = СтрокаТипаОбъекта.ИмяМнФормы;
		СтрокаТипаОбъектаДляДереваКонфигурации.ТипОбъектаАнгл = СтрокаТипаОбъекта.ИмяАнгл;
		СтрокаТипаОбъектаДляДереваКонфигурации.ТипОбъектаАнглМнФормы = СтрокаТипаОбъекта.ИмяАнглМнФормы;
		
		ТаблицаПодчиненныхТипов = СтрокаТипаОбъектаДляДереваКонфигурации.ТаблицаПодчиненныхТипов;
		Если ТаблицаПодчиненныхТипов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПодчиненногоТипа Из ТаблицаПодчиненныхТипов Цикл
			
			ТипОбъекта = СтрокаПодчиненногоТипа.ТипПодчиненногоОбъекта;
			
			СтрокаПодчиненногоТипаОбъекта = ТаблицаТиповОбъектов.Найти(ТипОбъекта, "ТипОбъекта");
			Если СтрокаПодчиненногоТипаОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПодчиненногоТипа.ТипПодчиненногоОбъектаАнгл = СтрокаПодчиненногоТипаОбъекта.ИмяАнгл;
			СтрокаПодчиненногоТипа.ТипПодчиненногоОбъектаАнглМнФормы = СтрокаПодчиненногоТипаОбъекта.ИмяАнглМнФормы;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаТиповОбъектовДляДереваКонфигурации;
	
КонецФункции

Процедура ЗаполнитьПодсистемыОбъекта(СтруктураПараметровДереваКонфигурации)
	
	ТаблицаОбъектовПодсистем = СтруктураПараметровДереваКонфигурации.ТаблицаОбъектовПодсистем;
	
	ТипОбъектаАнгл = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл;
	
	СтрокаДереваСтруктуры = СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Объект", ТипОбъектаАнгл + "." + СтрокаДереваСтруктуры.Наименование);
	
	ТаблицаПодсистемОбъекта = ТаблицаОбъектовПодсистем.Скопировать(СтруктураОтбора);
	МассивПодсистемОбъекта = ТаблицаПодсистемОбъекта.ВыгрузитьКолонку("Подсистема");
	СтрокаПодсистемОбъекта = СтрСоединить(МассивПодсистемОбъекта, ";");
	
	СтрокаДереваСтруктуры.ПодсистемыПуть = СтрокаПодсистемОбъекта;
	
КонецПроцедуры

Функция ПолучитьТипФормы(СтруктураПараметровДереваКонфигурации)
	
	ТипОбъекта = СтруктураПараметровДереваКонфигурации.ТипОбъекта;
	
	НаименованиеОбъекта = СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъект.Значение;
	ФайлФормы = СтруктураПараметровДереваКонфигурации.КаталогОбъектов + НаименованиеОбъекта + ".xml";
	Если НЕ ФайлСуществует(ФайлФормы) Тогда
		Возврат ТипОбъекта;
	КонецЕсли;
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлФормы);
	
	ТипОбъектаАнгл = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл;
	
	СтрокаПоискаТипФормы = СтрШаблон("MetaDataObject.%1.Properties.FormType", ТипОбъектаАнгл);
	СтрокаДанныхТипФормы = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоискаТипФормы);
	Если СтрокаДанныхТипФормы = Неопределено Тогда
		Возврат ТипОбъекта;
	КонецЕсли;
	
	ТипФормы = СтрокаДанныхТипФормы.Значение;
	Если (ТипОбъектаАнгл = "CommonForm") И (ТипФормы = "Managed") Тогда
		ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма;
	ИначеЕсли (ТипОбъектаАнгл = "Form") И (ТипФормы = "Managed") Тогда
		ТипОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ИначеЕсли (ТипОбъектаАнгл = "CommonForm") И (ТипФормы = "Ordinary") Тогда
		ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяФорма;
	ИначеЕсли (ТипОбъектаАнгл = "Form") И (ТипФормы = "Ordinary") Тогда
		ТипОбъекта = Перечисления.ТипыОбъектов.Форма;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьДанныеСтруктурыКонфигурации(КаталогВыгрузки, ТолькоПолучениеВерсии = Ложь) Экспорт
	
	СтруктураДанныхКонфигурации = Новый Структура;
	СтруктураДанныхКонфигурации.Вставить("Наименование");
	СтруктураДанныхКонфигурации.Вставить("Версия");
	СтруктураДанныхКонфигурации.Вставить("ДеревоСтруктуры");
	
	КаталогВыгрузки = ОтредактироватьПутьККаталогу(КаталогВыгрузки);
	
	ДеревоСтруктурыКонфигурации = Новый ДеревоЗначений;
	ДеревоСтруктурыКонфигурации.Колонки.Добавить("Наименование");
	ДеревоСтруктурыКонфигурации.Колонки.Добавить("ТипОбъекта");
	ДеревоСтруктурыКонфигурации.Колонки.Добавить("ПодсистемыПуть");
	ДеревоСтруктурыКонфигурации.Колонки.Добавить("НомерПоПорядку", Новый ОписаниеТипов("Число"));
	
	ПутьКФайлуКонфигурации = КаталогВыгрузки + "Configuration.xml";
	Если НЕ ФайлСуществует(ПутьКФайлуКонфигурации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	ТаблицаТиповОбъектовДляДереваКонфигурации = ПолучитьТаблицуТиповОбъектовДляДереваКонфигурации(ТаблицаТиповОбъектов);
	
	ТаблицаОбъектовПодсистем = Новый ТаблицаЗначений;
	ТаблицаОбъектовПодсистем.Колонки.Добавить("Подсистема");
	ТаблицаОбъектовПодсистем.Колонки.Добавить("Объект");
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ПутьКФайлуКонфигурации);
	
	СтруктураДанныхКонфигурации.Наименование = ПолучитьНаименованиеКонфигурации(ДеревоДанных);
	СтруктураДанныхКонфигурации.Версия = ПолучитьВерсиюКонфигурации(ДеревоДанных);
	
	Если ТолькоПолучениеВерсии Тогда
		Возврат СтруктураДанныхКонфигурации;
	КонецЕсли;
	
	СтрокаКорняКонфигурации = ДеревоСтруктурыКонфигурации.Строки.Добавить();
	СтрокаКорняКонфигурации.ТипОбъекта = Перечисления.ТипыОбъектов.Корень;
	СтрокаКорняКонфигурации.Наименование = СтруктураДанныхКонфигурации.Наименование;

	СтрокаКонфигурации = СтрокаКорняКонфигурации.Строки.Добавить();
	СтрокаКонфигурации.ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация;
	СтрокаКонфигурации.Наименование = СтруктураДанныхКонфигурации.Наименование;
	
	СтрокаПоискаОбъекты = "MetaDataObject.Configuration.ChildObjects";
	СтрокаДанныхОбъекты = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоискаОбъекты);
	
	МассивСтандартныхРеквизитовДляПроверкиСуществования = Новый Массив;
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Родитель");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Владелец");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("ЭтоГруппа");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Код");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Наименование");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Parent");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Owner");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Code");
	МассивСтандартныхРеквизитовДляПроверкиСуществования.Добавить("Description");
	
	СтруктураПараметровДереваКонфигурации = Новый Структура;
	СтруктураПараметровДереваКонфигурации.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	СтруктураПараметровДереваКонфигурации.Вставить("КаталогОбъектов", КаталогВыгрузки);
	СтруктураПараметровДереваКонфигурации.Вставить("ТаблицаОбъектовПодсистем", ТаблицаОбъектовПодсистем);
	СтруктураПараметровДереваКонфигурации.Вставить("СтрокаДереваСтруктуры", СтрокаКорняКонфигурации);
	СтруктураПараметровДереваКонфигурации.Вставить("СтрокаДанныхОбъекты", СтрокаДанныхОбъекты);
	СтруктураПараметровДереваКонфигурации.Вставить("НаименованиеОбъекта", "");
	СтруктураПараметровДереваКонфигурации.Вставить("НаименованиеПодчиненногоОбъекта", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ДобавлятьВеткуМетаданных", Истина);
	СтруктураПараметровДереваКонфигурации.Вставить("ТаблицаТиповОбъектов", ТаблицаТиповОбъектов);
	СтруктураПараметровДереваКонфигурации.Вставить("ТаблицаТиповОбъектовДляДереваКонфигурации", ТаблицаТиповОбъектовДляДереваКонфигурации);
	СтруктураПараметровДереваКонфигурации.Вставить("Родитель", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТипОбъектаРус", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТипОбъектаАнгл", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТипОбъектаРусМнФормы", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТипОбъектаАнглМнФормы", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТипОбъекта", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТаблицаПодчиненныхТипов", Новый ТаблицаЗначений);
	СтруктураПараметровДереваКонфигурации.Вставить("ТипПодчиненногоОбъекта", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТипПодчиненногоОбъектаАнгл", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ТипПодчиненногоОбъектаАнглМнФормы", "");
	СтруктураПараметровДереваКонфигурации.Вставить("ДеревоДанных", Новый ДеревоЗначений);
	СтруктураПараметровДереваКонфигурации.Вставить("МассивСтандартныхРеквизитов", МассивСтандартныхРеквизитовДляПроверкиСуществования);
	
	ЗаполнитьСоставОбщихОбъектовКонфигурации(СтруктураПараметровДереваКонфигурации);
	
	// Все объекты заполняем общей процедурой в цикле.
	СтруктураОтбораДереваКонфигурации = Новый Структура;
	СтруктураОтбораДереваКонфигурации.Вставить("Родитель", "");
	МассивТиповОбъектовДереваКонфигурации = ТаблицаТиповОбъектовДляДереваКонфигурации.НайтиСтроки(СтруктураОтбораДереваКонфигурации);
	Для Каждого СтрокаТипаОбъекта Из МассивТиповОбъектовДереваКонфигурации Цикл
		
		СтруктураПараметровДереваКонфигурации.КаталогОбъектов = КаталогВыгрузки;
		СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаКорняКонфигурации;
		СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъекты = СтрокаДанныхОбъекты;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметровДереваКонфигурации, СтрокаТипаОбъекта);
		ЗаполнитьСоставОбъектовПоТипу(СтруктураПараметровДереваКонфигурации);
		
	КонецЦикла;
	
	СтруктураДанныхКонфигурации.ДеревоСтруктуры = ДеревоСтруктурыКонфигурации;
	
	Возврат СтруктураДанныхКонфигурации;
	
КонецФункции

Функция ПолучитьНаименованиеКонфигурации(ДеревоДанных)
	
	НаименованиеКонфигурации = "Конфигурация";
	
	СтрокаПоискаНаименование = "MetaDataObject.Configuration.Properties.Name";
	СтрокаДанныхНаименование = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоискаНаименование);
	Если СтрокаДанныхНаименование <> Неопределено Тогда
		НаименованиеКонфигурации = СтрокаДанныхНаименование.Значение;
	КонецЕсли;
	
	Возврат НаименованиеКонфигурации;
	
КонецФункции

Функция ПолучитьВерсиюКонфигурации(ДеревоДанных)
	
	ВерсияКонфигурации = "0.0.0.0";
	
	СтрокаПоискаВерсия = "MetaDataObject.Configuration.Properties.Version";
	СтрокаДанныхВерсия = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоискаВерсия);
	Если СтрокаДанныхВерсия <> Неопределено Тогда
		ВерсияКонфигурации = СтрокаДанныхВерсия.Значение;
	КонецЕсли;
	
	Возврат ВерсияКонфигурации;
	
КонецФункции

Процедура ЗаполнитьСоставОбщихОбъектовКонфигурации(СтруктураПараметровДереваКонфигурации)
	
	СтрокаДереваСтруктуры = СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры;
	СтрокаДанныхОбъекты = СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъекты;
	
	СтрокаОбщие = СтрокаДереваСтруктуры.Строки.Добавить();
	СтрокаОбщие.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных;
	СтрокаОбщие.Наименование = "Общие";
	
	// Подсистемы заполняем отдельной процедурой.
	СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаОбщие;
	СтруктураПараметровДереваКонфигурации.ТипОбъекта = Перечисления.ТипыОбъектов.Подсистема;
	СтруктураПараметровДереваКонфигурации.ТипОбъектаРус = "Подсистема";
	СтруктураПараметровДереваКонфигурации.ТипОбъектаРусМнФормы = "Подсистемы";
	СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл = "Subsystem";
	СтруктураПараметровДереваКонфигурации.ТипОбъектаАнглМнФормы = "Subsystems";
	
	ЗаполнитьСоставПодсистем(СтруктураПараметровДереваКонфигурации);
	СтруктураПараметровДереваКонфигурации.ТаблицаОбъектовПодсистем.Индексы.Добавить("Объект");
	
	КаталогОбъектов = СтруктураПараметровДереваКонфигурации.КаталогВыгрузки;
	
	ТаблицаТиповОбъектовДляДереваКонфигурации = СтруктураПараметровДереваКонфигурации.ТаблицаТиповОбъектовДляДереваКонфигурации;
	
	// Остальные объекты заполняем общей процедурой в цикле.
	СтруктураОтбораВеткаОбщие = Новый Структура;
	СтруктураОтбораВеткаОбщие.Вставить("Родитель", "Общие");
	МассивТиповОбъектовВеткаОбщие = ТаблицаТиповОбъектовДляДереваКонфигурации.НайтиСтроки(СтруктураОтбораВеткаОбщие);
	Для Каждого СтрокаТипаОбъекта Из МассивТиповОбъектовВеткаОбщие Цикл
		
		СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаОбщие;
		СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъекты = СтрокаДанныхОбъекты;
		СтруктураПараметровДереваКонфигурации.КаталогОбъектов = КаталогОбъектов;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметровДереваКонфигурации, СтрокаТипаОбъекта);
		
		ЗаполнитьСоставОбъектовПоТипу(СтруктураПараметровДереваКонфигурации);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставОбъектовПодсистемы(СтрокаДереваПодсистема, ДеревоДанныхПодсистемы, ТаблицаОбъектовПодсистем)
	
	СтрокаПоискаСостав = "MetaDataObject.Subsystem.Properties.Content";
	СтрокаДанныхСостав = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанныхПодсистемы, СтрокаПоискаСостав);
	Если СтрокаДанныхСостав = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхСостав.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваРодитель = СтрокаДереваПодсистема;
	ПутьПодсистемы = СтрокаДереваРодитель.Наименование;
	Пока Истина Цикл
		
		СтрокаДереваРодитель = СтрокаДереваРодитель.Родитель;
		Если СтрокаДереваРодитель = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаДереваРодитель.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных Тогда
			Прервать;
		КонецЕсли;
		
		ПутьПодсистемы = СтрокаДереваРодитель.Наименование + "." + ПутьПодсистемы;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанныхОбъекта Из СтрокаДанныхСостав.Строки Цикл
		
		СтрокаТаблицы = ТаблицаОбъектовПодсистем.Добавить();
		СтрокаТаблицы.Подсистема = ПутьПодсистемы;
		СтрокаТаблицы.Объект = СтрокаДанныхОбъекта.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставПодсистем(СтруктураПараметровДереваКонфигурации)
	
	СтрокаДереваСтруктуры = СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры;
	ДобавлятьВеткуМетаданных = СтруктураПараметровДереваКонфигурации.ДобавлятьВеткуМетаданных;
	Если ДобавлятьВеткуМетаданных Тогда
		СтрокаОбъекта = СтрокаДереваСтруктуры.Строки.Добавить();
		СтрокаОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных;
		СтрокаОбъекта.Наименование = СтруктураПараметровДереваКонфигурации.ТипОбъектаРусМнФормы;
	КонецЕсли;
	
	СтрокаДанныхОбъекты = СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъекты;
	Если СтрокаДанныхОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = СтруктураПараметровДереваКонфигурации.ТипОбъекта;
	ТипОбъектаАнгл = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Имя", ТипОбъектаАнгл);
	
	МассивСтрокОбъекты = СтрокаДанныхОбъекты.Строки.НайтиСтроки(СтруктураОтбора, Ложь);
	Если МассивСтрокОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаАнглМнФормы = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнглМнФормы;
	ТипОбъектаРусМнФормы = СтруктураПараметровДереваКонфигурации.ТипОбъектаРусМнФормы;
	
	ТаблицаОбъектовПодсистем = СтруктураПараметровДереваКонфигурации.ТаблицаОбъектовПодсистем;
	КаталогОбъектов = СтруктураПараметровДереваКонфигурации.КаталогОбъектов + ТипОбъектаАнглМнФормы + "\";
	
	Для Каждого СтрокаДанныхОбъект Из МассивСтрокОбъекты Цикл
		
		НаименованиеОбъекта = СтрокаДанныхОбъект.Значение;
		
		#Если Клиент Тогда
		ТекстСостояния = СтрШаблон(НСтр("ru='Выполняется сбор сведений о структуре конфигурации: %1.%2'"),
			ТипОбъектаРусМнФормы, НаименованиеОбъекта);
		Состояние(ТекстСостояния);
		#КонецЕсли
		
		Если ДобавлятьВеткуМетаданных Тогда
			СтрокаДереваОбъект = СтрокаОбъекта.Строки.Добавить();
		Иначе
			СтрокаДереваОбъект = СтрокаДереваСтруктуры.Строки.Добавить();
		КонецЕсли;
		
		СтрокаДереваОбъект.ТипОбъекта = ТипОбъекта;
		СтрокаДереваОбъект.Наименование = НаименованиеОбъекта;
		
		ФайлОбъекта = КаталогОбъектов + НаименованиеОбъекта + ".xml";
		
		ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлОбъекта);
		ЗаполнитьСоставОбъектовПодсистемы(СтрокаДереваОбъект, ДеревоДанных, ТаблицаОбъектовПодсистем);
		
		СтрокаПоискаОбъекты = СтрШаблон("MetaDataObject.%1.ChildObjects", ТипОбъектаАнгл);
		СтрокаДанныхОбъекты = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоискаОбъекты);
		Если СтрокаДанныхОбъекты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанныхОбъекты.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КаталогОбъекта = КаталогОбъектов + НаименованиеОбъекта + "\";
		
		СтруктураПараметровДереваКонфигурации.КаталогОбъектов = КаталогОбъекта;
		СтруктураПараметровДереваКонфигурации.ДобавлятьВеткуМетаданных = Ложь;
		СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаДереваОбъект;
		СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъекты = СтрокаДанныхОбъекты;
		
		ЗаполнитьСоставПодсистем(СтруктураПараметровДереваКонфигурации);
		
		СтруктураПараметровДереваКонфигурации.КаталогОбъектов = КаталогОбъектов;
		СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаДереваОбъект;
		СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъекты = СтрокаДанныхОбъекты;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставОбъектовПоТипу(СтруктураПараметровДереваКонфигурации)
	
	СтрокаДереваСтруктуры = СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры;
	СтрокаВеткиОбъектов = СтрокаДереваСтруктуры.Строки.Добавить();
	СтрокаВеткиОбъектов.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных;
	СтрокаВеткиОбъектов.Наименование = СтруктураПараметровДереваКонфигурации.ТипОбъектаРусМнФормы;
	
	СтрокаДанныхОбъекты = СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъекты;
	Если СтрокаДанныхОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаАнгл = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Имя", ТипОбъектаАнгл);
	
	МассивСтрокОбъекты = СтрокаДанныхОбъекты.Строки.НайтиСтроки(СтруктураОтбора, Ложь);
	Если МассивСтрокОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаАнглМнФормы = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнглМнФормы;
	КаталогОбъектов = СтруктураПараметровДереваКонфигурации.КаталогОбъектов + ТипОбъектаАнглМнФормы + "\";
	СтруктураПараметровДереваКонфигурации.КаталогОбъектов = КаталогОбъектов;
	
	ЭтоФорма = Ложь;
	Если СтруктураПараметровДереваКонфигурации.ТипОбъектаРус = "ОбщаяФорма" Тогда
		ЭтоФорма = Истина;
	КонецЕсли;
	
	ТипОбъекта = СтруктураПараметровДереваКонфигурации.ТипОбъекта;
	ТипОбъектаРусМнФормы = СтруктураПараметровДереваКонфигурации.ТипОбъектаРусМнФормы;
	
	Для Каждого СтрокаДанныхОбъект Из МассивСтрокОбъекты Цикл
		
		СтруктураПараметровДереваКонфигурации.Вставить("СтрокаДанныхОбъект", СтрокаДанныхОбъект);
		
		// Если это форма, тогда переопределим тип формы: управляемая или обычная.
		Если ЭтоФорма Тогда
			ТипОбъекта = ПолучитьТипФормы(СтруктураПараметровДереваКонфигурации);
		КонецЕсли;
		
		НаименованиеОбъекта = СтрокаДанныхОбъект.Значение;
		
		#Если Клиент Тогда
		ТекстСостояния = СтрШаблон(НСтр("ru='Выполняется сбор сведений о структуре конфигурации: %1.%2'"),
			ТипОбъектаРусМнФормы, НаименованиеОбъекта);
		Состояние(ТекстСостояния);
		#КонецЕсли
		
		СтрокаДереваОбъект = СтрокаВеткиОбъектов.Строки.Добавить();
		СтрокаДереваОбъект.ТипОбъекта = ТипОбъекта;
		СтрокаДереваОбъект.Наименование = НаименованиеОбъекта;
		
		СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаДереваОбъект;
		
		ЗаполнитьПодсистемыОбъекта(СтруктураПараметровДереваКонфигурации);
		
		ТаблицаПодчиненныхТипов = СтруктураПараметровДереваКонфигурации.ТаблицаПодчиненныхТипов;
		Если ТаблицаПодчиненныхТипов = Неопределено Тогда
			СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаВеткиОбъектов;
			Продолжить;
		КонецЕсли;
		
		ФайлОбъекта = СтруктураПараметровДереваКонфигурации.КаталогОбъектов + НаименованиеОбъекта + ".xml";
		Если НЕ ФайлСуществует(ФайлОбъекта) Тогда
			СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаВеткиОбъектов;
			Продолжить;
		КонецЕсли;
		
		ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлОбъекта);
		СтруктураПараметровДереваКонфигурации.ДеревоДанных = ДеревоДанных;
		СтруктураПараметровДереваКонфигурации.НаименованиеОбъекта = НаименованиеОбъекта;
		
		Для Каждого СтрокаПодчиненногоТипа Из ТаблицаПодчиненныхТипов Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметровДереваКонфигурации, СтрокаПодчиненногоТипа);
			
			Если СтрокаПодчиненногоТипа.ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент Тогда
				ЗаполнитьСоставПредопределенныхЭлементовОбъекта(СтруктураПараметровДереваКонфигурации);
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСоставПодчиненныхОбъектов(СтруктураПараметровДереваКонфигурации);
			
		КонецЦикла;
		
		СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры = СтрокаВеткиОбъектов;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаименованиеСтандартногоРеквизита(ТаблицаТиповОбъектов, НаименованиеСтандартногоРеквизитаАнгл)
	
	НаименованиеСтандартногоРеквизитаРус = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов,
		НаименованиеСтандартногоРеквизитаАнгл,, "Имя");
	
	Возврат НаименованиеСтандартногоРеквизитаРус;
	
КонецФункции

Функция СтандартныйРеквизитСуществует(СтруктураПараметровДереваКонфигурации)
	
	Результат = Истина;
	
	НаименованиеСтандартногоРеквизита = СтруктураПараметровДереваКонфигурации.НаименованиеПодчиненногоОбъекта;
	
	МассивСтандартныхРеквизитов = СтруктураПараметровДереваКонфигурации.МассивСтандартныхРеквизитов;
	Если МассивСтандартныхРеквизитов.Найти(НаименованиеСтандартногоРеквизита) = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДеревоДанных = СтруктураПараметровДереваКонфигурации.ДеревоДанных;
	ТипОбъекта = СтруктураПараметровДереваКонфигурации.ТипОбъекта;
	ТипОбъектаАнгл = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл;
	
	// Проверяем наличие стандартного реквизита.
	Если (НаименованиеСтандартногоРеквизита = "Владелец") ИЛИ (НаименованиеСтандартногоРеквизита = "Owner") Тогда
		
		// Если это владелец, то проверяем наличие свойства "Владельцы".
		СтрокаПоиска = СтрШаблон("MetaDataObject.%1.Properties.Owners", ТипОбъектаАнгл);
		
		СтрокаДереваДанныхВладельцы = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоиска);
		Если СтрокаДереваДанныхВладельцы = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Результат = (СтрокаДереваДанныхВладельцы.Строки.Количество() > 0);
		
	ИначеЕсли (НаименованиеСтандартногоРеквизита = "Наименование") ИЛИ (НаименованиеСтандартногоРеквизита = "Description") Тогда
		
		// Если это код, то проверяем длину кода.
		СтрокаПоиска = СтрШаблон("MetaDataObject.%1.Properties.DescriptionLength", ТипОбъектаАнгл);
		
		СтрокаДереваДанныхДлинаНаименования = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоиска);
		Если СтрокаДереваДанныхДлинаНаименования = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СтрокаДереваДанныхДлинаНаименованияЗначение = СтрокаДереваДанныхДлинаНаименования.Значение;
		Если НЕ ЭтоЧисло(СтрокаДереваДанныхДлинаНаименованияЗначение) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Результат = Число(СтрокаДереваДанныхДлинаНаименованияЗначение) > 0;
		
	ИначеЕсли (НаименованиеСтандартногоРеквизита = "Код") ИЛИ (НаименованиеСтандартногоРеквизита = "Code") Тогда
		
		// Если это код, то проверяем длину кода.
		СтрокаПоиска = СтрШаблон("MetaDataObject.%1.Properties.CodeLength", ТипОбъектаАнгл);
		
		СтрокаДереваДанныхДлинаКода = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоиска);
		Если СтрокаДереваДанныхДлинаКода = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СтрокаДереваДанныхДлинаКодаЗначение = СтрокаДереваДанныхДлинаКода.Значение;
		Если НЕ ЭтоЧисло(СтрокаДереваДанныхДлинаКодаЗначение) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Результат = Число(СтрокаДереваДанныхДлинаКодаЗначение) > 0;
		
	ИначеЕсли (НаименованиеСтандартногоРеквизита = "Родитель") ИЛИ (НаименованиеСтандартногоРеквизита = "Parent") Тогда
		
		// Если это родитель, то проверяем свойство "Иерархия".
		СтрокаПоиска = СтрШаблон("MetaDataObject.%1.Properties.Hierarchical", ТипОбъектаАнгл);
		
		СтрокаДереваДанныхИерархия = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоиска);
		Если СтрокаДереваДанныхИерархия = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СтрокаДереваДанныхИерархияЗначение = СтрокаДереваДанныхИерархия.Значение;
		Результат = ЭтоБулево(СтрокаДереваДанныхИерархияЗначение);
		
	ИначеЕсли (НаименованиеСтандартногоРеквизита = "ЭтоГруппа") ИЛИ (НаименованиеСтандартногоРеквизита = "IsFolder") Тогда
		
		// Если это группа, то проверяем свойство "Иерархия".
		СтрокаПоиска = СтрШаблон("MetaDataObject.%1.Properties.Hierarchical", ТипОбъектаАнгл);
		
		СтрокаДереваДанныхИерархия = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоиска);
		Если СтрокаДереваДанныхИерархия = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СтрокаДереваДанныхИерархияЗначение = СтрокаДереваДанныхИерархия.Значение;
		СтрокаДереваДанныхИерархияЗначение = ЭтоБулево(СтрокаДереваДанныхИерархияЗначение);
		
		// Если есть иерархия, то проверяем ее значение.
		Если НЕ СтрокаДереваДанныхИерархияЗначение Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Для планов видов характеристик достаточно, чтобы была иерархия, остальные свойства не проверяем.
		Если ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
			Возврат Результат;
		КонецЕсли;
		
		СтрокаПоиска = СтрШаблон("MetaDataObject.%1.Properties.HierarchyType", ТипОбъектаАнгл);
		
		СтрокаДереваДанныхТипИерархии = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоиска);
		Если СтрокаДереваДанныхТипИерархии = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Результат = (СтрокаДереваДанныхТипИерархии.Значение = "HierarchyFoldersAndItems");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСоставПодчиненныхОбъектов(СтруктураПараметровДереваКонфигурации)
	
	СтрокаДанныхОбъект = СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъект;
	ДеревоДанных = СтруктураПараметровДереваКонфигурации.ДеревоДанных;
	
	ТипОбъекта = СтруктураПараметровДереваКонфигурации.ТипОбъекта;
	ТипОбъектаАнгл = СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл;
	ТипПодчиненногоОбъекта = СтруктураПараметровДереваКонфигурации.ТипПодчиненногоОбъекта;
	ТипПодчиненногоОбъектаАнгл = СтруктураПараметровДереваКонфигурации.ТипПодчиненногоОбъектаАнгл;
	ТипПодчиненногоОбъектаАнглМнФормы = СтруктураПараметровДереваКонфигурации.ТипПодчиненногоОбъектаАнглМнФормы;
	
	ЭтоСтандартныйРеквизит = (ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит);
	ЭтоСтандартнаяТабличнаяЧасть = (ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть);
	
	Если ЭтоСтандартныйРеквизит ИЛИ ЭтоСтандартнаяТабличнаяЧасть Тогда
		ТипПодчиненногоОбъектаАнгл = "xr:" + ТипПодчиненногоОбъектаАнгл;
		СтрокаПоискаПодчиненныеОбъекты = СтрШаблон("MetaDataObject.%1.Properties.%2", ТипОбъектаАнгл, ТипПодчиненногоОбъектаАнглМнФормы);
	Иначе
		СтрокаПоискаПодчиненныеОбъекты = СтрШаблон("MetaDataObject.%1.ChildObjects", ТипОбъектаАнгл);
	КонецЕсли;
	
	СтрокаДанныхПодчиненныеОбъекты = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, СтрокаПоискаПодчиненныеОбъекты);
	Если СтрокаДанныхПодчиненныеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПодчиненныеОбъекты = Новый Структура;
	СтруктураДанныхПодчиненныеОбъекты.Вставить("Имя", ТипПодчиненногоОбъектаАнгл);
	
	МассивДанныхПодчиненныеОбъекты = СтрокаДанныхПодчиненныеОбъекты.Строки.НайтиСтроки(СтруктураДанныхПодчиненныеОбъекты);
	Если МассивДанныхПодчиненныеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваСтруктуры = СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры;
	КаталогОбъектов = СтруктураПараметровДереваКонфигурации.КаталогОбъектов;
	НаименованиеОбъекта = СтруктураПараметровДереваКонфигурации.НаименованиеОбъекта;
	
	ТаблицаТиповОбъектов = СтруктураПараметровДереваКонфигурации.ТаблицаТиповОбъектов;
	
	ЭтоФорма = (ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма);
	ЭтоМакет = (ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Макет);
	ЭтоТабличнаяЧасть = (ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть);
	ЭтоОперацияWebСервиса = (ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Операция);
	ЭтоШаблонURL = (ТипПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ШаблонURL);
	
	Для Каждого СтрокаДанныхПодчиненногоОбъекта Из МассивДанныхПодчиненныеОбъекты Цикл
		
		Если ЭтоФорма Тогда
			
			СтруктураПараметровДереваКонфигурации.ТипОбъекта = ТипПодчиненногоОбъекта;
			СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъект = СтрокаДанныхПодчиненногоОбъекта;
			СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл = ТипПодчиненногоОбъектаАнгл;
			СтруктураПараметровДереваКонфигурации.КаталогОбъектов = СтрШаблон("%1%2\%3\", КаталогОбъектов, НаименованиеОбъекта,
				ТипПодчиненногоОбъектаАнглМнФормы);
			
			ТипПодчиненногоОбъекта = ПолучитьТипФормы(СтруктураПараметровДереваКонфигурации);
			
			СтруктураПараметровДереваКонфигурации.ТипОбъекта = ТипОбъекта;
			СтруктураПараметровДереваКонфигурации.ТипОбъектаАнгл = ТипОбъектаАнгл;
			СтруктураПараметровДереваКонфигурации.СтрокаДанныхОбъект = СтрокаДанныхОбъект;
			СтруктураПараметровДереваКонфигурации.КаталогОбъектов = КаталогОбъектов;
			
		КонецЕсли;
		
		Если ЭтоФорма ИЛИ ЭтоМакет Тогда
			СтрокаДанныхПодчиненныйОбъект = СтрокаДанныхПодчиненногоОбъекта;
		ИначеЕсли ЭтоСтандартныйРеквизит ИЛИ ЭтоСтандартнаяТабличнаяЧасть Тогда
			СтрокаДанныхПодчиненныйОбъект = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхПодчиненногоОбъекта, "Атрибуты.name");
		Иначе
			СтрокаДанныхПодчиненныйОбъект = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхПодчиненногоОбъекта, "Properties.Name");
		КонецЕсли;
		
		Если СтрокаДанныхПодчиненныйОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеПодчиненногоОбъекта = СтрокаДанныхПодчиненныйОбъект.Значение;
		
		Если ЭтоСтандартныйРеквизит ИЛИ ЭтоСтандартнаяТабличнаяЧасть Тогда
			
			НаименованиеПодчиненногоОбъекта = ПолучитьНаименованиеСтандартногоРеквизита(ТаблицаТиповОбъектов, НаименованиеПодчиненногоОбъекта);
			
			СтруктураПараметровДереваКонфигурации.НаименованиеПодчиненногоОбъекта = НаименованиеПодчиненногоОбъекта;
			
			// Для стандартных реквизитов необходима дополнительная проверка существования.
			// Т.к. в XML выгружаются либо все стандартные реквизиты, либо ни одного.
			Если НЕ СтандартныйРеквизитСуществует(СтруктураПараметровДереваКонфигурации) Тогда
				// Если стандартный реквизит не существует, то пропускаем.
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДереваПодчиненногоОбъекта = СтрокаДереваСтруктуры.Строки.Добавить();
		СтрокаДереваПодчиненногоОбъекта.ТипОбъекта = ТипПодчиненногоОбъекта;
		СтрокаДереваПодчиненногоОбъекта.Наименование = НаименованиеПодчиненногоОбъекта;
		
		// Проверяем реквизиты табличной части, операции web-сервиса и шаблоны URL.
		Если ЭтоТабличнаяЧасть ИЛИ ЭтоОперацияWebСервиса ИЛИ ЭтоШаблонURL Тогда
			
			СтрокаДанныхРеквизитыТабличнойЧасти = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхПодчиненногоОбъекта, "ChildObjects");
			Если СтрокаДанныхРеквизитыТабличнойЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипПодчиненногоОбъектаПодчиненногоОбъекта = Перечисления.ТипыОбъектов.ПустаяСсылка();
			ИмяПодчиненногоОбъектаПодчиненногоОбъектаАнгл = "";
			Если ЭтоТабличнаяЧасть Тогда
				ТипПодчиненногоОбъектаПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Реквизит;
				ИмяПодчиненногоОбъектаПодчиненногоОбъектаАнгл = "Attribute";
			ИначеЕсли ЭтоОперацияWebСервиса Тогда
				ТипПодчиненногоОбъектаПодчиненногоОбъекта = Перечисления.ТипыОбъектов.Параметр;
				ИмяПодчиненногоОбъектаПодчиненногоОбъектаАнгл = "Parameter";
			ИначеЕсли ЭтоШаблонURL Тогда
				ТипПодчиненногоОбъектаПодчиненногоОбъекта = Перечисления.ТипыОбъектов.МетодШаблонаURL;
				ИмяПодчиненногоОбъектаПодчиненногоОбъектаАнгл = "Method";
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСоставПодчиненныхОбъектовПодчиненныхОбъектов(СтрокаДанныхРеквизитыТабличнойЧасти,
				СтрокаДереваПодчиненногоОбъекта,
				ТаблицаТиповОбъектов,
				ТипПодчиненногоОбъектаПодчиненногоОбъекта,
				ИмяПодчиненногоОбъектаПодчиненногоОбъектаАнгл);
			
			// Для табличной части необходимо также заполнить стандартные реквизиты, например, НомерСтроки.
			Если ЭтоТабличнаяЧасть Тогда
				
				СтрокаДанныхСтандартныеРеквизитыТабличнойЧасти = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхПодчиненногоОбъекта,
					"Properties.StandardAttributes");
				Если СтрокаДанныхСтандартныеРеквизитыТабличнойЧасти = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьСоставПодчиненныхОбъектовПодчиненныхОбъектов(СтрокаДанныхСтандартныеРеквизитыТабличнойЧасти,
					СтрокаДереваПодчиненногоОбъекта,
					ТаблицаТиповОбъектов,
					Перечисления.ТипыОбъектов.СтандартныйРеквизит,
					"xr:StandardAttribute");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставПодчиненныхОбъектовПодчиненныхОбъектов(СтрокаДанных, СтрокаДерева, ТаблицаТиповОбъектов,
	ТипОбъекта, ИмяОбъектаАнгл)
	
	СтруктураДанныхПодчиненныхОбъектов = Новый Структура;
	СтруктураДанныхПодчиненныхОбъектов.Вставить("Имя", ИмяОбъектаАнгл);
	
	МассивДанныхПодчиненныхОбъектов = СтрокаДанных.Строки.НайтиСтроки(СтруктураДанныхПодчиненныхОбъектов);
	Если МассивДанныхПодчиненныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтандартныйРеквизит = (ТипОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит);
	СтрокаПоиска = ?(ЭтоСтандартныйРеквизит, "Атрибуты.name", "Properties.Name");
	
	Для Каждого СтрокаДанныхПодчиненногоОбъекта Из МассивДанныхПодчиненныхОбъектов Цикл
		
		СтрокаДанныхИмениПодчиненногоОбъекта = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхПодчиненногоОбъекта, СтрокаПоиска);
		Если СтрокаДанныхИмениПодчиненногоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеПодчиненногоОбъекта = СтрокаДанныхИмениПодчиненногоОбъекта.Значение;
		
		Если ЭтоСтандартныйРеквизит Тогда
			НаименованиеПодчиненногоОбъекта = ПолучитьНаименованиеСтандартногоРеквизита(ТаблицаТиповОбъектов, НаименованиеПодчиненногоОбъекта);
		КонецЕсли;
		
		СтрокаДереваПодчиненногоОбъекта = СтрокаДерева.Строки.Добавить();
		СтрокаДереваПодчиненногоОбъекта.ТипОбъекта = ТипОбъекта;
		СтрокаДереваПодчиненногоОбъекта.Наименование = НаименованиеПодчиненногоОбъекта;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставПредопределенныхЭлементовОбъекта(СтруктураПараметровДереваКонфигурации)
	
	НаименованиеОбъекта = СтруктураПараметровДереваКонфигурации.НаименованиеОбъекта;
	КаталогОбъектов = СтруктураПараметровДереваКонфигурации.КаталогОбъектов;
	
	ФайлПредопределенных = СтрШаблон("%1%2\Ext\Predefined.xml", КаталогОбъектов, НаименованиеОбъекта);
	Если НЕ ФайлСуществует(ФайлПредопределенных) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДанныхПредопределенные = XML_РазобратьФайлВыгрузки(ФайлПредопределенных);
	
	СтрокаДереваДанныхПредопределенныхЭлементов = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанныхПредопределенные, "PredefinedData");
	Если СтрокаДереваДанныхПредопределенныхЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПредопределенныеЭлементы(СтрокаДереваДанныхПредопределенныхЭлементов,
		СтруктураПараметровДереваКонфигурации.СтрокаДереваСтруктуры);
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеЭлементы(СтрокаДереваДанных, СтрокаДереваСтруктуры)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Имя", "Item");
	
	МассивДанныхПредопределенныхЭлементов = СтрокаДереваДанных.Строки.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаДереваДанныхПредопределенногоЭлемента Из МассивДанныхПредопределенныхЭлементов Цикл
		
		СтрокаНаименования = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваДанныхПредопределенногоЭлемента, "Name");
		Если СтрокаНаименования = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеПредопределенногоЭлемента = СтрокаНаименования.Значение;
		
		СтрокаДереваСтруктурыПредопределенногоЭлемента = СтрокаДереваСтруктуры.Строки.Добавить();
		СтрокаДереваСтруктурыПредопределенногоЭлемента.Наименование = НаименованиеПредопределенногоЭлемента;
		СтрокаДереваСтруктурыПредопределенногоЭлемента.ТипОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент;
		
		СтрокаДереваДанныхПредопределенныхЭлементов = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваДанныхПредопределенногоЭлемента, "ChildItems");
		Если СтрокаДереваДанныхПредопределенныхЭлементов <> Неопределено Тогда
			ЗаполнитьПредопределенныеЭлементы(СтрокаДереваДанныхПредопределенныхЭлементов, СтрокаДереваСтруктуры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьСведенийФормыXML

Процедура ЗаписатьСведенияОФормах(ОбъектСсылка, ДеревоДанных, СведенияОКонфигурации, ИмяФормы) Экспорт
	
	ТаблицаТиповОбъектов = СведенияОКонфигурации.ТаблицаТиповОбъектов;
	
	НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСодержания.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписейСодержания.Прочитать();
	
	ТаблицаНабораЗаписей = НаборЗаписейСодержания.Выгрузить();
	
	ЗаписатьРеквизитыФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей);
	ЗаписатьСвойстваЭлементовФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей, СведенияОКонфигурации, ИмяФормы);
	ЗаписатьПараметрыФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей);
	ЗаписатьКомандыФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей);
	ЗаписатьУсловноеОформление(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей);
	ЗаписатьКомандныйИнтерфейсФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей, ТаблицаТиповОбъектов);
	
	НаборЗаписейСодержания.Загрузить(ТаблицаНабораЗаписей);
	НаборЗаписейСодержания.Записать(Истина);
	НаборЗаписейСодержания.Очистить();
	
КонецПроцедуры

Функция ПолучитьЗаписьРегистраЗначенияСоставныхСвойствОбъектов(ТаблицаНабораЗаписей, ОбъектСсылка, Имя)
	
	СтрокаТаблицы = ТаблицаНабораЗаписей.Найти(Имя, "Имя");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ТаблицаНабораЗаписей.Добавить();
		СтрокаТаблицы.Объект = ОбъектСсылка;
		СтрокаТаблицы.Имя = Имя;
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

#Область ЗаписьРеквизитовФормыXML

// Записывает реквизиты формы в регистр сведений.
//
Процедура ЗаписатьРеквизитыФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей)
	
	СтрокаДанныхАтрибуты = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "Form.Attributes");
	Если СтрокаДанныхАтрибуты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхАтрибуты.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСодержания = ПолучитьЗаписьРегистраЗначенияСоставныхСвойствОбъектов(ТаблицаНабораЗаписей, ОбъектСсылка,
		Перечисления.ИдентификаторыСодержанияОбъектов.РеквизитыФормы);
	
	Значение = ЗаписьСодержания.Значение;
	
	ДеревоРеквизитов = Значение.Получить();
	Если ДеревоРеквизитов = Неопределено Тогда
		ДеревоРеквизитов = Новый ДеревоЗначений;
		ДеревоРеквизитов.Колонки.Добавить("Свойство");
		ДеревоРеквизитов.Колонки.Добавить("Значение");
	КонецЕсли;
	
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Имя", "");
	СтруктураРеквизита.Вставить("Тип", "");
	СтруктураРеквизита.Вставить("Заголовок", "");
	СтруктураРеквизита.Вставить("ОсновнойРеквизит", "");
	СтруктураРеквизита.Вставить("ПроизвольныйЗапрос", "");
	СтруктураРеквизита.Вставить("ТекстЗапроса", "");
	СтруктураРеквизита.Вставить("ДинамическоеСчитываниеДанных", "");
	СтруктураРеквизита.Вставить("ОсновнаяТаблица", "");
	
	ЗаполнитьСвойстваРеквизитовФормы(СтрокаДанныхАтрибуты, СтруктураРеквизита, ДеревоРеквизитов);
	
	ЗаписьСодержания.Значение = ВернутьХранилищеЗначения(ДеревоРеквизитов);
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваРеквизитовФормы(СтрокаДанныхАтрибуты, СтруктураРеквизита, ДеревоРеквизитов)
	
	Для Каждого Атрибут Из СтрокаДанныхАтрибуты.Строки Цикл
		
		Для Каждого ЭлементСтруктурыРеквизита Из СтруктураРеквизита Цикл
			СтруктураРеквизита.Вставить(ЭлементСтруктурыРеквизита.Ключ, "");
		КонецЦикла;
		
		СтруктураРеквизита.Имя = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "Имя");
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизита.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоДинамическийСписок = Ложь;
		
		СтруктураРеквизита.Тип = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "Тип");
		СтруктураРеквизита.Заголовок = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "Заголовок");
		СтруктураРеквизита.ОсновнойРеквизит = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "ОсновнойРеквизит");
		
		Если СтруктураРеквизита.Тип = "ДинамическийСписок" Тогда
			ЭтоДинамическийСписок = Истина;
			СтруктураРеквизита.ПроизвольныйЗапрос = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "ПроизвольныйЗапрос");
			СтруктураРеквизита.ТекстЗапроса = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "ТекстЗапроса");
			СтруктураРеквизита.ДинамическоеСчитываниеДанных = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "ДинамическоеСчитываниеДанных");
			СтруктураРеквизита.ОсновнаяТаблица = ПолучитьЗначениеСвойстваАтрибута(Атрибут, "ОсновнаяТаблица");
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоРеквизитов.Строки.Найти(СтруктураРеквизита.Имя,, Ложь);
		Если СтрокаРеквизита = Неопределено Тогда
			СтрокаРеквизита = ДеревоРеквизитов.Строки.Добавить();
			ИмяРеквизита = СтруктураРеквизита.Имя;
			Если (ТипЗнч(ДеревоРеквизитов) = Тип("СтрокаДереваЗначений")) И ЗначениеЗаполнено(ДеревоРеквизитов.Родитель) Тогда
				ИмяРеквизита = ДеревоРеквизитов.Родитель.Свойство + "." + ИмяРеквизита;
			КонецЕсли;
			СтрокаРеквизита.Свойство = ИмяРеквизита;
			СтрокаРеквизита.Значение = СтруктураРеквизита.Тип;
		КонецЕсли;
		
		ЗаполнитьСвойстваЭлемента(СтрокаРеквизита, СтруктураРеквизита);
		
		Если ЭтоДинамическийСписок Тогда
			ЗаполнитьУсловноеОформлениеДинамическогоСписка(СтрокаРеквизита, Атрибут);
			ЗаполнитьСписокПолейДинамическогоСпискаСПризнакомИспользоватьВсегда(СтрокаРеквизита, Атрибут);
		КонецЕсли;
		
		ЗаполнитьРолевыеНастройки(СтрокаРеквизита, Атрибут, "Просмотр");
		ЗаполнитьРолевыеНастройки(СтрокаРеквизита, Атрибут, "Редактирование");
		
		МассивПодчиненныхРеквизитов = НайтиСтрокиДереваДанных("columns", Атрибут);
		Для Каждого ПодчиненныйРеквизит Из МассивПодчиненныхРеквизитов Цикл
			ПодчиненнаяСтрока = СтрокаРеквизита.Строки.Добавить();
			ПодчиненнаяСтрока.Свойство = "ПодчиненныеРеквизиты";
			ЗаполнитьСвойстваРеквизитовФормы(ПодчиненныйРеквизит, СтруктураРеквизита, ПодчиненнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеСвойстваАтрибута(СтрокаАтрибута, СвойствоАтрибута = "", ФильтрПоискаПоУмолчанию = "")
	
	ТипСвойства = "Строка";
	
	ФильтрПоиска = "";
	Если НЕ ПустаяСтрока(ФильтрПоискаПоУмолчанию) Тогда
		ФильтрПоиска = ФильтрПоискаПоУмолчанию;
	ИначеЕсли СвойствоАтрибута = "Имя" Тогда
		ФильтрПоиска = "Атрибуты.name";
	ИначеЕсли СвойствоАтрибута = "Тип" Тогда
		ФильтрПоиска = "Type.v8:Type";
		ТипСвойства = "Тип";
	ИначеЕсли СвойствоАтрибута = "Заголовок" Тогда
		ФильтрПоиска = "Title.v8:item.v8:content";
	ИначеЕсли СвойствоАтрибута = "Подсказка" Тогда
		ФильтрПоиска = "ToolTip.v8:item.v8:content";
	ИначеЕсли СвойствоАтрибута = "ОсновнойРеквизит" Тогда
		ФильтрПоиска = "MainAttribute";
		ТипСвойства = "Булево";
	ИначеЕсли СвойствоАтрибута = "ПроизвольныйЗапрос" Тогда
		ФильтрПоиска = "Settings.ManualQuery";
		ТипСвойства = "Булево";
	ИначеЕсли СвойствоАтрибута = "ТекстЗапроса" Тогда
		ФильтрПоиска = "Settings.QueryText";
	ИначеЕсли СвойствоАтрибута = "ДинамическоеСчитываниеДанных" Тогда
		ФильтрПоиска = "Settings.DynamicDataRead";
		ТипСвойства = "Булево";
	ИначеЕсли СвойствоАтрибута = "ОсновнаяТаблица" Тогда
		ФильтрПоиска = "Settings.MainTable";
	ИначеЕсли СвойствоАтрибута = "КлючевойПараметр" Тогда
		ФильтрПоиска = "KeyParameter";
		ТипСвойства = "Булево";
	ИначеЕсли СвойствоАтрибута = "Действие" Тогда
		ФильтрПоиска = "Action";
	ИначеЕсли СвойствоАтрибута = "ИзменяетСохраняемыеДанные" Тогда
		ФильтрПоиска = "ModifiesSavedData";
		ТипСвойства = "Булево";
	ИначеЕсли СвойствоАтрибута = "Автозаполнение" Тогда
		ФильтрПоиска = "Autofill";
		ТипСвойства = "Булево";
	ИначеЕсли СвойствоАтрибута = "ГруппаКоманд" Тогда
		ФильтрПоиска = "CommandGroup";
	ИначеЕсли СвойствоАтрибута = "Расположение" Тогда
		ФильтрПоиска = "Placement";
	ИначеЕсли СвойствоАтрибута = "ШаблонНачальнойСтраницы" Тогда
		ФильтрПоиска = "WorkingAreaTemplate";
	ИначеЕсли СвойствоАтрибута = "Форма" Тогда
		ФильтрПоиска = "Form";
	ИначеЕсли СвойствоАтрибута = "Высота" Тогда
		ФильтрПоиска = "Height";
	ИначеЕсли СвойствоАтрибута = "РазрешитьИзменятьФорму" Тогда
		ФильтрПоиска = "Customizable";
		ТипСвойства = "Булево";
	Иначе
		ФильтрПоиска = "";
	КонецЕсли;
	
	Значение = "";
	Если ПустаяСтрока(ФильтрПоиска) Тогда
		Возврат Значение;
	КонецЕсли;
	
	СтрокаСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаАтрибута, ФильтрПоиска);
	Если СтрокаСвойства <> Неопределено Тогда
		Значение = СтрокаСвойства.Значение;
	КонецЕсли;
	
	Если ПустаяСтрока(Значение) ИЛИ (ТипСвойства = "Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ТипСвойства = "Булево" Тогда
		Значение = Булево(Значение);
	ИначеЕсли ТипСвойства = "Тип" Тогда
		Значение = ОпределитьТипАтрибута(Значение);
	Иначе
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура ЗаполнитьСвойстваЭлемента(СтрокаЭлемента, СтруктураЭлемента)
	
	Для Каждого Элемент Из СтруктураЭлемента Цикл
		
		СтрокаСвойства = СтрокаЭлемента.Строки.Найти(Элемент.Ключ, "Свойство");
		Если СтрокаСвойства = Неопределено Тогда
			СтрокаСвойства = СтрокаЭлемента.Строки.Добавить();
			СтрокаСвойства.Свойство = Элемент.Ключ;
		КонецЕсли;
		
		СтрокаСвойства.Значение = Элемент.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьТипАтрибута(ТипНаАнглийскомЯзыке)
	
	Если ПустаяСтрока(ТипНаАнглийскомЯзыке) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаТипа = ТипНаАнглийскомЯзыке;
	ИдТипа = "";
	МассивТипа = СтрРазделить(СтрокаТипа, ":", Ложь);
	Если МассивТипа.Количество() = 2 Тогда
		СтрокаТипа = МассивТипа[1];
	Иначе
		Попытка
			ИдТипа = Новый УникальныйИдентификатор(СтрокаТипа);
		Исключение
			Возврат ТипНаАнглийскомЯзыке;
		КонецПопытки;
	КонецЕсли;
	
	Если ИдТипа <> "" Тогда
		Если СтрокаТипа = "7dd764b6-b22f-4712-8edc-c0d634340e60" Тогда
			ТипАтрибута = "УсловноеОформление";
		ИначеЕсли СтрокаТипа = "2f82c87b-0ca7-456d-b853-51bed6f08f90" Тогда
			ТипАтрибута = "НастройкаОформления";
		ИначеЕсли СтрокаТипа = "287c6d39-f32c-4cc3-b973-8a57caadc645" Тогда
			ТипАтрибута = "ОбластьОформления";
		Иначе
			ТипАтрибута = ТипНаАнглийскомЯзыке;
		КонецЕсли;
		Возврат ТипАтрибута;
	КонецЕсли;
	
	МассивТипа = СтрРазделить(СтрокаТипа, ".", Ложь);
	Если МассивТипа.Количество() = 2 Тогда
		СтрокаТипа = МассивТипа[0];
		СтрокаИмениОбъекта = "."+МассивТипа[1];
	ИначеЕсли МассивТипа.Количество() = 1 Тогда
		СтрокаИмениОбъекта = "";
	Иначе
		Возврат ТипНаАнглийскомЯзыке;
	КонецЕсли;
	
	ТипАтрибута = СтрокаТипа;
	Если СтрокаТипа = "decimal" Тогда
		ТипАтрибута = "Число";
	ИначеЕсли СтрокаТипа = "string" Тогда
		ТипАтрибута = "Строка";
	ИначеЕсли СтрокаТипа = "dateTime" Тогда
		ТипАтрибута = "Дата";
	ИначеЕсли СтрокаТипа = "boolean" Тогда
		ТипАтрибута = "Булево";
	ИначеЕсли СтрокаТипа = "base64Binary" Тогда
		ТипАтрибута = "ДвоичныеДанные";
	ИначеЕсли СтрокаТипа = "ValueStorage" Тогда
		ТипАтрибута = "ХранилищеЗначения";
	ИначеЕсли СтрокаТипа = "ComparisonType" Тогда
		ТипАтрибута = "ВидСравнения";
	ИначеЕсли СтрокаТипа = "ChartReferenceLine" Тогда
		ТипАтрибута = "ИнформационнаяЛинияДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartReferenceBand" Тогда
		ТипАтрибута = "ИнформационныйИнтервалДиаграммы";
	ИначеЕсли СтрокаТипа = "StockChartUsedPointValue" Тогда
		ТипАтрибута = "ИспользуемоеЗначениеТочкиБиржевойДиаграммы";
	ИначеЕсли СтрокаТипа = "DataAnalysisColumns" Тогда
		ТипАтрибута = "КолонкиАнализаДанных";
	ИначеЕсли СтрокаТипа = "PredictionModelColumns" Тогда
		ТипАтрибута = "КолонкиМоделиПрогноза";
	ИначеЕсли СтрокаТипа = "PredictionModelInputColumnsSetting" Тогда
		ТипАтрибута = "НастройкаВходныхКолонокМоделиПрогноза";
	ИначеЕсли СтрокаТипа = "DataAnalysisParameters" Тогда
		ТипАтрибута = "ПараметрыАнализаДанных";
	ИначеЕсли СтрокаТипа = "SortDirection" Тогда
		ТипАтрибута = "НаправлениеСортировки";
	ИначеЕсли СтрокаТипа = "ChartColorPalette" Тогда
		ТипАтрибута = "ПалитраЦветовДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartLabelsOrientation" Тогда
		ТипАтрибута = "ОриентацияПодписейДиаграммы";
	ИначеЕсли СтрокаТипа = "Filter" Тогда
		ТипАтрибута = "Отбор";
	ИначеЕсли СтрокаТипа = "ShowInChart" Тогда
		ТипАтрибута = "ОтображениеВДиаграмме";
	ИначеЕсли СтрокаТипа = "ShowInChartLegend" Тогда
		ТипАтрибута = "ОтображениеВЛегендеДиаграммы";
	ИначеЕсли СтрокаТипа = "ShowChartScaleTitle" Тогда
		ТипАтрибута = "ОтображениеЗаголовкаШкалыДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartGridLinesShowMode" Тогда
		ТипАтрибута = "ОтображениеЛинийСеткиДиаграммы";
	ИначеЕсли СтрокаТипа = "Planner" Тогда
		ТипАтрибута = "Планировщик";
	ИначеЕсли СтрокаТипа = "ChartReferenceBandBorderPosition" Тогда
		ТипАтрибута = "ПоложениеГраницыИнформационногоИнтервалаДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartReferenceLinePosition" Тогда
		ТипАтрибута = "ПоложениеИнформационнойЛинииДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartScaleMarkLocation" Тогда
		ТипАтрибута = "ПоложениеОтметокШкалыДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartLabelLocation" Тогда
		ТипАтрибута = "ПоложениеПодписейКДиаграмме";
	ИначеЕсли СтрокаТипа = "ChartScaleLabelLocation" Тогда
		ТипАтрибута = "ПоложениеПодписейШкалыДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartScaleLocation" Тогда
		ТипАтрибута = "ПоложениеШкалыДиаграммы";
	ИначеЕсли СтрокаТипа = "Order" Тогда
		ТипАтрибута = "Порядок";
	ИначеЕсли СтрокаТипа = "ReportBuilder" Тогда
		ТипАтрибута = "ПостроительОтчета";
	ИначеЕсли СтрокаТипа = "DataAnalysisReportBuilder" Тогда
		ТипАтрибута = "ПостроительОтчетаАнализаДанных";
	ИначеЕсли СтрокаТипа = "ChartScaleTitlePlacement" Тогда
		ТипАтрибута = "РасположениеЗаголовкаШкалыДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartLegendPlacement" Тогда
		ТипАтрибута = "РасположениеЛегендыДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartTitleAreaPlacement" Тогда
		ТипАтрибута = "РасположениеОбластиЗаголовкаДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartPlotAreaPlacement" Тогда
		ТипАтрибута = "РасположениеОбластиПостроенияДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartScaleTitleTextSource" Тогда
		ТипАтрибута = "СпособЗаполненияТекстаЗаголовкаШкалыДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartBoundaryDetectionMethod" Тогда
		ТипАтрибута = "СпособОпределенияОграничивающегоЗначенияДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartTrendlineApproximationType" Тогда
		ТипАтрибута = "ТипАппроксимацииЛинииТрендаДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartType" Тогда
		ТипАтрибута = "ТипДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartTrendlineFactor" Тогда
		ТипАтрибута = "ФакторЛинииТрендаДиаграммы";
	ИначеЕсли СтрокаТипа = "PredictionModelResultColumns" Тогда
		ТипАтрибута = "КолонкиРезультатаМоделиПрогноза";
	ИначеЕсли СтрокаТипа = "CustomFields" Тогда
		ТипАтрибута = "ПоляНастройки";
	ИначеЕсли СтрокаТипа = "ChartColorPaletteDescription" Тогда
		ТипАтрибута = "ОписаниеПалитрыЦветовДиаграммы";
	ИначеЕсли СтрокаТипа = "ReportBuilderDimensionType" Тогда
		ТипАтрибута = "ТипИзмеренияПостроителяОтчета";
	ИначеЕсли СтрокаТипа = "ChartMarkerType" Тогда
		ТипАтрибута = "ТипМаркераДиаграммы";
	ИначеЕсли СтрокаТипа = "PivotChartType" Тогда
		ТипАтрибута = "ТипСводнойДиаграммы";
	ИначеЕсли СтрокаТипа = "UUID" Тогда
		ТипАтрибута = "УникальныйИдентификатор";
	ИначеЕсли СтрокаТипа = "Null" Тогда
		ТипАтрибута = "Null";
	ИначеЕсли СтрокаТипа = "AnyRef" Тогда
		ТипАтрибута = "ЛюбаяСсылка";
	ИначеЕсли СтрокаТипа = "TypeDescription" Тогда
		ТипАтрибута = "ОписаниеТипов";
	ИначеЕсли СтрокаТипа = "FixedArray" Тогда
		ТипАтрибута = "ФиксированныйМассив";
	ИначеЕсли СтрокаТипа = "FixedMap" Тогда
		ТипАтрибута = "ФиксированноеСоответствие";
	ИначеЕсли СтрокаТипа = "FixedStructure" Тогда
		ТипАтрибута = "ФиксированнаяСтруктура";
	ИначеЕсли СтрокаТипа = "AssociationRulesDataSourceType" Тогда
		ТипАтрибута = "ТипИсточникаДанныхПоискаАссоциаций";
	ИначеЕсли СтрокаТипа = "AnalysisDataType" Тогда
		ТипАтрибута = "ВидДанныхАнализа";
	ИначеЕсли СтрокаТипа = "DataAnalysisDistanceMetricType" Тогда
		ТипАтрибута = "ТипМерыРасстоянияАнализаДанных";
	ИначеЕсли СтрокаТипа = "DataAnalysisColumnTypeAssociationRules" Тогда
		ТипАтрибута = "ТипКолонкиАнализаДанныхПоискАссоциаций";
	ИначеЕсли СтрокаТипа = "DataAnalysisResultTableFillType" Тогда
		ТипАтрибута = "ТипЗаполненияТаблицыРезультатаАнализаДанных";
	ИначеЕсли СтрокаТипа = "DataAnalysisNumericValueUseType" Тогда
		ТипАтрибута = "ТипИспользованияЧисловыхЗначенийАнализаДанных";
	ИначеЕсли СтрокаТипа = "DecisionTreeSimplificationType" Тогда
		ТипАтрибута = "ТипУпрощенияДереваРешений";
	ИначеЕсли СтрокаТипа = "DataAnalysisColumnTypeDecisionTree" Тогда
		ТипАтрибута = "ТипКолонкиАнализаДанныхДеревоРешений";
	ИначеЕсли СтрокаТипа = "DataAnalysisSequentialPatternsOrderType" Тогда
		ТипАтрибута = "ТипУпорядочиванияШаблоновПоследовательностейАнализаДанных";
	ИначеЕсли СтрокаТипа = "DataAnalysisTimeIntervalUnitType" Тогда
		ТипАтрибута = "ТипЕдиницыИнтервалаВремениАнализаДанных";
	ИначеЕсли СтрокаТипа = "DataAnalysisColumnTypeSequentialPatterns" Тогда
		ТипАтрибута = "ТипКолонкиАнализаДанныхПоискПоследовательностей";
	ИначеЕсли СтрокаТипа = "DataAnalysisStandardizationType" Тогда
		ТипАтрибута = "ТипСтандартизацииАнализаДанных";
	ИначеЕсли СтрокаТипа = "PredictionModelColumnType" Тогда
		ТипАтрибута = "ТипКолонкиМоделиПрогноза";
	ИначеЕсли СтрокаТипа = "ClusterizationMethod" Тогда
		ТипАтрибута = "МетодКластеризации";
	ИначеЕсли СтрокаТипа = "DataAnalysisAssociationRulesOrderType" Тогда
		ТипАтрибута = "ТипУпорядочиванияПравилАссоциацииАнализаДанных";
	ИначеЕсли СтрокаТипа = "DataAnalysisColumnTypeSummaryStatistics" Тогда
		ТипАтрибута = "ТипКолонкиАнализаДанныхОбщаяСтатистика";
	ИначеЕсли СтрокаТипа = "AssociationRulesPruneType" Тогда
		ТипАтрибута = "ТипОтсеченияПравилАссоциации";
	ИначеЕсли СтрокаТипа = "DataAnalysisColumnTypeClusterization" Тогда
		ТипАтрибута = "ТипКолонкиАнализаДанныхКластеризация";
	ИначеЕсли СтрокаТипа = "VerticalAlign" Тогда
		ТипАтрибута = "ВертикальноеПоложение";
	ИначеЕсли СтрокаТипа = "HorizontalAlign" Тогда
		ТипАтрибута = "ГоризонтальноеПоложение";
	ИначеЕсли СтрокаТипа = "SizeChangeMode" Тогда
		ТипАтрибута = "РежимИзмененияРазмера";
	ИначеЕсли СтрокаТипа = "FormattedString" Тогда
		ТипАтрибута = "ФорматированнаяСтрока";
	ИначеЕсли СтрокаТипа = "StandardBeginningDate" Тогда
		ТипАтрибута = "СтандартнаяДатаНачала";
	ИначеЕсли СтрокаТипа = "SpreadsheetDocument" Тогда
		ТипАтрибута = "ТабличныйДокумент";
	ИначеЕсли СтрокаТипа = "TextDocument" Тогда
		ТипАтрибута = "ТекстовыйДокумент";
	ИначеЕсли СтрокаТипа = "GeographicalSchema" Тогда
		ТипАтрибута = "ГеографическаяСхема";
	ИначеЕсли СтрокаТипа = "FlowchartContextType" Тогда
		ТипАтрибута = "ГрафическаяСхема";
	ИначеЕсли СтрокаТипа = "Dendrogram" Тогда
		ТипАтрибута = "Дендрограмма";
	ИначеЕсли СтрокаТипа = "Chart" Тогда
		ТипАтрибута = "Диаграмма";
	ИначеЕсли СтрокаТипа = "GanttChart" Тогда
		ТипАтрибута = "ДиаграммаГанта";
	ИначеЕсли СтрокаТипа = "Picture" Тогда
		ТипАтрибута = "Картинка";
	ИначеЕсли СтрокаТипа = "SettingsComposer" Тогда
		ТипАтрибута = "КомпоновщикНастроекКомпоновкиДанных";
	ИначеЕсли СтрокаТипа = "Line" Тогда
		ТипАтрибута = "Линия";
	ИначеЕсли СтрокаТипа = "ChartLabelArea" Тогда
		ТипАтрибута = "ОбластьПодписиДиаграммы";
	ИначеЕсли СтрокаТипа = "ChartAxis" Тогда
		ТипАтрибута = "ОсьДиаграммы";
	ИначеЕсли СтрокаТипа = "Border" Тогда
		ТипАтрибута = "Рамка";
	ИначеЕсли СтрокаТипа = "FormattedDocument" Тогда
		ТипАтрибута = "ФорматированныйДокумент";
	ИначеЕсли СтрокаТипа = "Color" Тогда
		ТипАтрибута = "Цвет";
	ИначеЕсли СтрокаТипа = "Color" Тогда
		ТипАтрибута = "Цвет";
	ИначеЕсли СтрокаТипа = "ChartScale" Тогда
		ТипАтрибута = "ШкалаДиаграммы";
	ИначеЕсли СтрокаТипа = "Font" Тогда
		ТипАтрибута = "Шрифт";
	ИначеЕсли СтрокаТипа = "StandardPeriod" Тогда
		ТипАтрибута = "СтандартныйПериод";
	ИначеЕсли СтрокаТипа = "AccountType" Тогда
		ТипАтрибута = "ВидСчета";
	ИначеЕсли СтрокаТипа = "AccumulationRecordType" Тогда
		ТипАтрибута = "ВидДвиженияНакопления";
	ИначеЕсли СтрокаТипа = "AccountingRecordType" Тогда
		ТипАтрибута = "ВидДвиженияБухгалтерии";
	ИначеЕсли СтрокаТипа = "DynamicList" Тогда
		ТипАтрибута = "ДинамическийСписок";
	ИначеЕсли СтрокаТипа = "ValueTable" Тогда
		ТипАтрибута = "ТаблицаЗначений";
	ИначеЕсли СтрокаТипа = "ValueTree" Тогда
		ТипАтрибута = "ДеревоЗначений";
	ИначеЕсли СтрокаТипа = "ValueListType" Тогда
		ТипАтрибута = "СписокЗначений";
	ИначеЕсли СтрокаТипа = "ConstantsSet" Тогда
		ТипАтрибута = "КонстантыНабор";
	ИначеЕсли СтрокаТипа = "CatalogRef" Тогда
		ТипАтрибута = "СправочникСсылка";
	ИначеЕсли СтрокаТипа = "DocumentRef" Тогда
		ТипАтрибута = "ДокументСсылка";
	ИначеЕсли СтрокаТипа = "EnumRef" Тогда
		ТипАтрибута = "ПеречислениеСсылка";
	ИначеЕсли СтрокаТипа = "ChartOfCharacteristicTypesRef" Тогда
		ТипАтрибута = "ПланВидовХарактеристикСсылка";
	ИначеЕсли СтрокаТипа = "ChartOfAccountsRef" Тогда
		ТипАтрибута = "ПланСчетовСсылка";
	ИначеЕсли СтрокаТипа = "ExchangePlanRef" Тогда
		ТипАтрибута = "ПланОбменаСсылка";
	ИначеЕсли СтрокаТипа = "ChartOfCalculationTypesRef" Тогда
		ТипАтрибута = "ПланВидовРасчетаСсылка";
	ИначеЕсли СтрокаТипа = "BusinessProcessRef" Тогда
		ТипАтрибута = "БизнесПроцессСсылка";
	ИначеЕсли СтрокаТипа = "BusinessProcessRoutePointRef" Тогда
		ТипАтрибута = "ТочкаМаршрутаБизнесПроцессаСсылка";
	ИначеЕсли СтрокаТипа = "TaskRef" Тогда
		ТипАтрибута = "ЗадачаСсылка";
	ИначеЕсли СтрокаТипа = "SettingsStorageManager" Тогда
		ТипАтрибута = "ХранилищеНастроекМенеджер";
	ИначеЕсли СтрокаТипа = "CatalogObject" Тогда
		ТипАтрибута = "СправочникОбъект";
	ИначеЕсли СтрокаТипа = "DocumentObject" Тогда
		ТипАтрибута = "ДокументОбъект";
	ИначеЕсли СтрокаТипа = "ChartOfCharacteristicTypesObject" Тогда
		ТипАтрибута = "ПланВидовХарактеристикОбъект";
	ИначеЕсли СтрокаТипа = "ChartOfAccountsObject" Тогда
		ТипАтрибута = "ПланСчетовОбъект";
	ИначеЕсли СтрокаТипа = "ExchangePlanObject" Тогда
		ТипАтрибута = "ПланОбменаОбъект";
	ИначеЕсли СтрокаТипа = "ChartOfCalculationTypesObject" Тогда
		ТипАтрибута = "ПланВидовРасчетаОбъект";
	ИначеЕсли СтрокаТипа = "BusinessProcessObject" Тогда
		ТипАтрибута = "БизнесПроцессОбъект";
	ИначеЕсли СтрокаТипа = "TaskObject" Тогда
		ТипАтрибута = "ЗадачаОбъект";
	ИначеЕсли СтрокаТипа = "ReportObject" Тогда
		ТипАтрибута = "ОтчетОбъект";
	ИначеЕсли СтрокаТипа = "InformationRegisterRecordSet" Тогда
		ТипАтрибута = "РегистрСведенийНаборЗаписей";
	ИначеЕсли СтрокаТипа = "InformationRegisterRecordManager" Тогда
		ТипАтрибута = "РегистрСведенийМенеджерЗаписи";
	ИначеЕсли СтрокаТипа = "AccumulationRegisterRecordSet" Тогда
		ТипАтрибута = "РегистрНакопленияНаборЗаписей";
	ИначеЕсли СтрокаТипа = "AccountingRegisterRecordSet" Тогда
		ТипАтрибута = "РегистрБухгалтерииНаборЗаписей";
	ИначеЕсли СтрокаТипа = "CalculationRegisterRecordSet" Тогда
		ТипАтрибута = "РегистрРасчетаНаборЗаписей";
	ИначеЕсли СтрокаТипа = "DataProcessorObject" Тогда
		ТипАтрибута = "ОбработкаОбъект";
	ИначеЕсли СтрокаТипа = "Characteristic" Тогда
		ТипАтрибута = "Характеристика";
	ИначеЕсли СтрокаТипа = "DefinedType" Тогда
		ТипАтрибута = "ОпределяемыйТип";
	ИначеЕсли СтрокаТипа = "BusinessProcessManager" Тогда
		ТипАтрибута = "БизнесПроцессМенеджер";
	ИначеЕсли СтрокаТипа = "DocumentManager" Тогда
		ТипАтрибута = "ДокументМенеджер";
	ИначеЕсли СтрокаТипа = "DocumentJournalManager" Тогда
		ТипАтрибута = "ЖурналДокументовМенеджер";
	ИначеЕсли СтрокаТипа = "TaskManager" Тогда
		ТипАтрибута = "ЗадачаМенеджер";
	ИначеЕсли СтрокаТипа = "ConstantValueManager" Тогда
		ТипАтрибута = "КонстантаМенеджерЗначения";
	ИначеЕсли СтрокаТипа = "FilterCriterionManager" Тогда
		ТипАтрибута = "КритерийОтбораМенеджер";
	ИначеЕсли СтрокаТипа = "DataProcessorManager" Тогда
		ТипАтрибута = "ОбработкаМенеджер";
	ИначеЕсли СтрокаТипа = "ReportManager" Тогда
		ТипАтрибута = "ОтчетМенеджер";
	ИначеЕсли СтрокаТипа = "EnumManager" Тогда
		ТипАтрибута = "ПеречислениеМенеджер";
	ИначеЕсли СтрокаТипа = "ChartOfCalculationTypesManager" Тогда
		ТипАтрибута = "ПланВидовРасчетаМенеджер";
	ИначеЕсли СтрокаТипа = "ChartOfCharacteristicTypesManager" Тогда
		ТипАтрибута = "ПланВидовХарактеристикМенеджер";
	ИначеЕсли СтрокаТипа = "ExchangePlanManager" Тогда
		ТипАтрибута = "ПланОбменаМенеджер";
	ИначеЕсли СтрокаТипа = "ChartOfAccountsManager" Тогда
		ТипАтрибута = "ПланСчетовМенеджер";
	ИначеЕсли СтрокаТипа = "AccountingRegisterManager" Тогда
		ТипАтрибута = "РегистрБухгалтерииМенеджер";
	ИначеЕсли СтрокаТипа = "AccumulationRegisterManager" Тогда
		ТипАтрибута = "РегистрНакопленияМенеджер";
	ИначеЕсли СтрокаТипа = "CalculationRegisterManager" Тогда
		ТипАтрибута = "РегистрРасчетаМенеджер";
	ИначеЕсли СтрокаТипа = "InformationRegisterManager" Тогда
		ТипАтрибута = "РегистрСведенийМенеджер";
	ИначеЕсли СтрокаТипа = "CatalogManager" Тогда
		ТипАтрибута = "СправочникМенеджер";
	ИначеЕсли СтрокаТипа = "CatalogList" Тогда
		ТипАтрибута = "СправочникСписок";
	Иначе
		Возврат ТипНаАнглийскомЯзыке;
	КонецЕсли;
	
	Возврат ТипАтрибута + СтрокаИмениОбъекта;
	
КонецФункции

Функция ПолучитьСтрокуДереваПоПравилуПоиска(Знач СтрокаДерева, Знач СтрокаПравилПоиска, Знач КолонкаПоиска = "ИмяНРег",
	РазделительСлов = ".") Экспорт
	
	Если КолонкаПоиска = "ИмяНРег" Тогда
		СтрокаПравилПоиска = НРег(СтрокаПравилПоиска);
	КонецЕсли;
	
	МассивПравилПоиска = СтрРазделить(СтрокаПравилПоиска, РазделительСлов);
	Для Каждого ПравилоПоиска Из МассивПравилПоиска Цикл
		СтрокаДерева = СтрокаДерева.Строки.Найти(ПравилоПоиска, КолонкаПоиска);
		
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаДерева;
	
КонецФункции

// Заполняет ролевые настройки:
//  - для реквизита формы - "Просмотр" или "Редактирование",
//  - для элемента формы - "ПользовательскаяВидимость",
//  - для команды формы - "Использование",
//  - для командного интерфейса - "Видимость",
//  - для командного интерфейса основного раздела - "Видимость",
//  - для рабочей области начальной страницы - "Видимость".
//
Процедура ЗаполнитьРолевыеНастройки(СтрокаДерева, СтрокаДанных, ТипНастройки = "", ТипНастройкиАнгл = "")
	
	ЭтоЭлементФормы = Неопределено;
	Если ПустаяСтрока(ТипНастройкиАнгл) Тогда
		Если ТипНастройки = "Просмотр" Тогда
			ТипНастройкиАнгл = "View";
		ИначеЕсли ТипНастройки = "Редактирование" Тогда
			ТипНастройкиАнгл = "Edit";
		ИначеЕсли ТипНастройки = "Использование" Тогда
			ТипНастройкиАнгл = "Use";
		ИначеЕсли ТипНастройки = "ПользовательскаяВидимость" Тогда
			ТипНастройкиАнгл = "UserVisible";
			ЭтоЭлементФормы = Ложь;
		ИначеЕсли ТипНастройки = "Видимость" Тогда
			ТипНастройкиАнгл = "Visibility";
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Если ТипНастройки = "ПользовательскаяВидимость" Тогда
			ЭтоЭлементФормы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДанныхНастройка = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанных, ТипНастройкиАнгл);
	Если СтрокаДанныхНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваНастройки = ДобавитьСтрокуВДеревоЗначений(СтрокаДерева, ТипНастройки,, ЭтоЭлементФормы);
	
	Для Каждого СтрокаДанныхСтрокаНастройки Из СтрокаДанныхНастройка.Строки Цикл
		
		НастройкаИмя = СтрокаДанныхСтрокаНастройки.Имя;
		НастройкаЗначение = Булево(СтрокаДанныхСтрокаНастройки.Значение);
		
		Если НастройкаИмя = "xr:Common" Тогда
			ДобавитьСтрокуВДеревоЗначений(СтрокаДереваНастройки, "Общая", НастройкаЗначение, ЭтоЭлементФормы);
		ИначеЕсли НастройкаИмя = "xr:Value" Тогда
			СтрокаРоли = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхСтрокаНастройки, "Атрибуты.name");
			Если СтрокаРоли = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРоли = СтрЗаменить(СтрокаРоли.Значение, "Role.", "Роли.");
			ДобавитьСтрокуВДеревоЗначений(СтрокаДереваНастройки, ИмяРоли, НастройкаЗначение, ЭтоЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокПолейДинамическогоСпискаСПризнакомИспользоватьВсегда(СтрокаДерева, СтрокаДанных)
	
	СтрокаДереваИспользоватьВсегда = ДобавитьСтрокуВДеревоЗначений(СтрокаДерева, "ИспользоватьВсегда");
	
	СтрокаДанныхИспользоватьВсегда = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанных, "UseAlways");
	Если СтрокаДанныхИспользоватьВсегда = Неопределено Тогда
		// Список полей с признаком "Использовать всегда" не заполнен, выходим.
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанныхПолеИспользоватьВсегда Из СтрокаДанныхИспользоватьВсегда.Строки Цикл
		
		ПолеДанныхИмя = СтрокаДанныхПолеИспользоватьВсегда.Имя;
		Если ПолеДанныхИмя = "Field" Тогда
			ПолеДанныхИмя = "Поле";
		КонецЕсли;
		
		ПолеДанныхЗначение = СтрокаДанныхПолеИспользоватьВсегда.Значение;
		
		СтрокаДереваНовоеПолеИспользоватьВсегда = СтрокаДереваИспользоватьВсегда.Строки.Добавить();
		СтрокаДереваНовоеПолеИспользоватьВсегда.Свойство = ПолеДанныхИмя;
		СтрокаДереваНовоеПолеИспользоватьВсегда.Значение = ПолеДанныхЗначение;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьСвойствЭлементовФорм

Функция ПолучитьИмяКомандыИзСоставаКомандФормы(ИмяКомандыАнгл)
	
	ИмяКомандыРус = "";
	Если ИмяКомандыАнгл = "No" Тогда
		ИмяКомандыРус = "Нет";
	ИначеЕсли ИмяКомандыАнгл = "CustomizeForm" Тогда
		ИмяКомандыРус = НСтр("ru='Изменить форму'");
	ИначеЕсли ИмяКомандыАнгл = "ListSettings" Тогда
		ИмяКомандыРус = НСтр("ru='Настроить список'");
	ИначеЕсли ИмяКомандыАнгл = "SaveValues" Тогда
		ИмяКомандыРус = НСтр("ru='Сохранить параметры'");
	ИначеЕсли ИмяКомандыАнгл = "SetDeletionMark" Тогда
		ИмяКомандыРус = НСтр("ru='Пометить на удаление / Снять пометку'");
	ИначеЕсли ИмяКомандыАнгл = "Copy" Тогда
		ИмяКомандыРус = НСтр("ru='Скопировать'");
	ИначеЕсли ИмяКомандыАнгл = "Close" Тогда
		ИмяКомандыРус = НСтр("ru='Закрыть'");
	ИначеЕсли ИмяКомандыАнгл = "Help" Тогда
		ИмяКомандыРус = НСтр("ru='Справка'");
	ИначеЕсли ИмяКомандыАнгл = "Delete" Тогда
		ИмяКомандыРус = НСтр("ru='Удалить'");
	ИначеЕсли ИмяКомандыАнгл = "Abort" Тогда
		ИмяКомандыРус = НСтр("ru='Прервать'");
	ИначеЕсли ИмяКомандыАнгл = "Create" Тогда
		ИмяКомандыРус = НСтр("ru='Создать'");
	ИначеЕсли ИмяКомандыАнгл = "Retry" Тогда
		ИмяКомандыРус = НСтр("ru='Повторить'");
	ИначеЕсли ИмяКомандыАнгл = "Yes" Тогда
		ИмяКомандыРус = НСтр("ru='Да'");
	ИначеЕсли ИмяКомандыАнгл = "Cancel" Тогда
		ИмяКомандыРус = НСтр("ru='Отмена'");
	ИначеЕсли ИмяКомандыАнгл = "Change" Тогда
		ИмяКомандыРус = НСтр("ru='Изменить'");
	ИначеЕсли ИмяКомандыАнгл = "RestoreValues" Тогда
		ИмяКомандыРус = НСтр("ru='Восстановить параметры'");
	ИначеЕсли ИмяКомандыАнгл = "LoadDynamicListSettings" Тогда
		ИмяКомандыРус = НСтр("ru='Выбрать настройки'");
	ИначеЕсли ИмяКомандыАнгл = "CancelSearch" Тогда
		ИмяКомандыРус = НСтр("ru='Отменить поиск'");
	ИначеЕсли ИмяКомандыАнгл = "OutputList" Тогда
		ИмяКомандыРус = НСтр("ru='Вывести список'");
	ИначеЕсли ИмяКомандыАнгл = "ShowMultipleSelection" Тогда
		ИмяКомандыРус = НСтр("ru='Выбрать несколько'");
	ИначеЕсли ИмяКомандыАнгл = "FindByCurrentValue" Тогда
		ИмяКомандыРус = НСтр("ru='Найти по текущему значению'");
	ИначеЕсли ИмяКомандыАнгл = "Find" Тогда
		ИмяКомандыРус = НСтр("ru='Расширенный поиск'");
	ИначеЕсли ИмяКомандыАнгл = "SaveDynamicListSettings" Тогда
		ИмяКомандыРус = НСтр("ru='Сохранить настройки'");
	ИначеЕсли ИмяКомандыАнгл = "DynamicListStandardSettings" Тогда
		ИмяКомандыРус = НСтр("ru='Установить стандартные настройки'");
	ИначеЕсли ИмяКомандыАнгл = "Ignore" Тогда
		ИмяКомандыРус = НСтр("ru='Пропустить'");
	ИначеЕсли ИмяКомандыАнгл = "OK" Тогда
		ИмяКомандыРус = НСтр("ru='OK'");
	ИначеЕсли ИмяКомандыАнгл = "Refresh" Тогда
		ИмяКомандыРус = НСтр("ru='Обновить'");
	ИначеЕсли ИмяКомандыАнгл = "Reread" Тогда
		ИмяКомандыРус = НСтр("ru='Перечитать'");
	ИначеЕсли ИмяКомандыАнгл = "WriteAndClose" Тогда
		ИмяКомандыРус = НСтр("ru='Записать и закрыть'");
	ИначеЕсли ИмяКомандыАнгл = "ShowInList" Тогда
		ИмяКомандыРус = НСтр("ru='Показать в списке'");
	ИначеЕсли ИмяКомандыАнгл = "Write" Тогда
		ИмяКомандыРус = НСтр("ru='Записать'");
	ИначеЕсли ИмяКомандыАнгл = "Choose" Тогда
		ИмяКомандыРус = НСтр("ru='Выбрать'");
	ИначеЕсли ИмяКомандыАнгл = "OpenByRecorder" Тогда
		ИмяКомандыРус = НСтр("ru='Открыть по регистратору'");
	ИначеЕсли ИмяКомандыАнгл = "OpenList" Тогда
		ИмяКомандыРус = НСтр("ru='Открыть список'");
	Иначе
		ИмяКомандыРус = ИмяКомандыАнгл;
	КонецЕсли;
	
	Возврат ИмяКомандыРус;
	
КонецФункции

Функция ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, Свойство, Значение = "", ЭтоЭлементФормы = Неопределено)
	
	СтрокаДереваЗначений = ДеревоЗначений.Строки.Найти(Свойство, "Свойство");
	Если СтрокаДереваЗначений = Неопределено Тогда
		СтрокаДереваЗначений = ДеревоЗначений.Строки.Добавить();
		СтрокаДереваЗначений.Свойство = Свойство;
		Если ЭтоЭлементФормы <> Неопределено Тогда
			СтрокаДереваЗначений.ЭтоЭлементФормы = ЭтоЭлементФормы;
		КонецЕсли;
	КонецЕсли;
	
	// Записываем переданное значение, только если оно заполнено, а имеющееся значение в дереве - пустое.
	Если ПустаяСтрока(СтрокаДереваЗначений.Значение) И (НЕ ПустаяСтрока(Значение)) Тогда
		СтрокаДереваЗначений.Значение = Значение;
	КонецЕсли;
	
	Возврат СтрокаДереваЗначений;
	
КонецФункции

Процедура ЗаписатьСвойствоФормыРазрешитьИзменятьФорму(ДеревоФормы, ДеревоДанных)
	
	ЗначениеРазрешитьИзменятьФорму = ПолучитьЗначениеСвойстваАтрибута(ДеревоДанных, "РазрешитьИзменятьФорму");
	Если ТипЗнч(ЗначениеРазрешитьИзменятьФорму) = Тип("Строка") Тогда
		ЗначениеРазрешитьИзменятьФорму = Истина;
	КонецЕсли;
	
	ДобавитьСтрокуВДеревоЗначений(ДеревоФормы, "РазрешитьИзменятьФорму", ЗначениеРазрешитьИзменятьФорму);
	
КонецПроцедуры

Процедура ЗаписатьСвойствоФормыСоставКоманд(ДеревоФормы, ДеревоДанных)
	
	СтрокаДереваФормыСоставКоманд = ДобавитьСтрокуВДеревоЗначений(ДеревоФормы, "СоставКоманд");
	
	СтрокаДереваДанныхСоставКоманд = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "CommandSet");
	Если СтрокаДереваДанныхСоставКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКоманды Из СтрокаДереваДанныхСоставКоманд.Строки Цикл
		
		ИмяКоманды = ПолучитьИмяКомандыИзСоставаКомандФормы(СтрокаКоманды.Значение);
		ЗначениеКоманды = (СтрокаКоманды.Имя <> "ExcludedCommand");
		
		ДобавитьСтрокуВДеревоЗначений(СтрокаДереваФормыСоставКоманд, ИмяКоманды, ЗначениеКоманды);
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает недостающие свойства элементов формы в регистр сведений.
//
Процедура ЗаписатьСвойстваЭлементовФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей, СведенияОКонфигурации, ИмяФормы)
	
	СтрокаДанныхФорма = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "Form");
	Если СтрокаДанныхФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСоответствиеСистемныхПеречисленийСобытиямиЭлементовФормы(СведенияОКонфигурации);
	
	ЗаписьСодержания = ПолучитьЗаписьРегистраЗначенияСоставныхСвойствОбъектов(ТаблицаНабораЗаписей, ОбъектСсылка,
		Перечисления.ИдентификаторыСодержанияОбъектов.Форма);
	
	ДеревоФормы = Новый ДеревоЗначений;
	ДеревоФормы.Колонки.Добавить("Свойство");
	ДеревоФормы.Колонки.Добавить("Значение");
	ДеревоФормы.Колонки.Добавить("ЭтоЭлементФормы", Новый ОписаниеТипов("Булево"));
	
	ЗаписатьСведенияЭлементовФормы(СтрокаДанныхФорма, ДеревоФормы, ИмяФормы,
		СведенияОКонфигурации);
	
	ЗаписатьСвойствоФормыРазрешитьИзменятьФорму(ДеревоФормы, СтрокаДанныхФорма);
	ЗаписатьСвойствоФормыСоставКоманд(ДеревоФормы, СтрокаДанныхФорма);
	
	ДеревоФормы.Строки.Сортировать("Свойство", Истина);
	
	ЗаписьСодержания.Значение = ВернутьХранилищеЗначения(ДеревоФормы);
	
КонецПроцедуры

Процедура ЗаписатьСведенияЭлементовФормы(СтрокаСоСвойствамиФормы, ДеревоЗначенийФормы, ИмяФормы, СведенияОКонфигурации)
	
	ТаблицаСвойствФорм = СведенияОКонфигурации.ТаблицаСвойствФорм;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипЭлементаУправленияРусский", "УправляемаяФорма");
	
	КоманднаяПанельФормы = Неопределено;
	
	МассивНайденныхСтрок = ТаблицаСвойствФорм.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицыСвойств Из МассивНайденныхСтрок Цикл
		
		Если ПустаяСтрока(СтрокаТаблицыСвойств.СвойствоРусский) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДеревоЗначенийФормы.Строки.Добавить();
		НоваяСтрока.Свойство = СтрокаТаблицыСвойств.СвойствоРусский;
		
		Если СтрСравнить(СтрокаТаблицыСвойств.СвойствоРусский, "ИмяФормы") = 0 Тогда
			НоваяСтрока.Значение = ИмяФормы;
			Продолжить;
		КонецЕсли;
		
		ЗначениеСвойства = ПолучитьСвойствоЭлементаФормы(СтрокаСоСвойствамиФормы, СтрокаТаблицыСвойств, НоваяСтрока,
			СведенияОКонфигурации);
		НоваяСтрока.Значение = ЗначениеСвойства;
		
		Если СтрСравнить(СтрокаТаблицыСвойств.СвойствоРусский, "КоманднаяПанель") = 0 Тогда
			КоманднаяПанельФормы = СтрокаСоСвойствамиФормы.Строки.Найти(НРег(СтрокаТаблицыСвойств.СвойствоАнглийский),
				"ИмяНРег");
			НоваяСтрока.Значение = СтрокаТаблицыСвойств.ЗначениеПоУмолчанию;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем свойства командной панели формы
	Если КоманднаяПанельФормы <> Неопределено Тогда
		СтрокаДерева = ДеревоЗначенийФормы.Строки.Найти("КоманднаяПанель");
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.ЭтоЭлементФормы = Истина;
			ЗаполнитьСвойстваЭлементаУправляемойФормы(КоманднаяПанельФормы, СтрокаДерева, ТаблицаСвойствФорм,
				СведенияОКонфигурации, "УправляемаяФорма", "Командная панель"); // АПК:1297 - не локализуется
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем свойства элементов формы
	СтрокаДерева = ДеревоЗначенийФормы.Строки.Найти("ПодчиненныеЭлементы");
	Если СтрокаДерева <> Неопределено Тогда
		ЗаполнитьПодчиненныеЭлементыУправляемойФормы(СтрокаДерева, СтрокаСоСвойствамиФормы, ТаблицаСвойствФорм,
			СведенияОКонфигурации, "УправляемаяФорма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваЭлементаУправляемойФормы(ЭлементФормы, СтрокаДерева, ТаблицаСвойствФорм,
	СведенияОКонфигурации, Родитель, ВидЭлементаФормы = "")
	
	ТипЭлементаФормы = ПолучитьТипЭлементаУправленияФормы(ТаблицаСвойствФорм, ЭлементФормы);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипЭлементаУправленияРусский", ТипЭлементаФормы);
	СтруктураОтбора.Вставить("ВидЭлементаУправленияРусский", "");
	
	МассивСвойствЭлементаФормы = ТаблицаСвойствФорм.НайтиСтроки(СтруктураОтбора);
	
	МассивСвойствРасширенияЭФ = Новый Массив;
	// Свойства элемента управляемой формы
	Для Каждого СтрокаТаблицыСвойств Из МассивСвойствЭлементаФормы Цикл
		
		СвойствоЭФ = СтрокаТаблицыСвойств.СвойствоРусский;
		
		СтрокаСвойстваЭФ = СтрокаДерева.Строки.Добавить();
		СтрокаСвойстваЭФ.Свойство = СвойствоЭФ;
		
		Если СвойствоЭФ = "Вид" Тогда
			Если НЕ ПустаяСтрока(ВидЭлементаФормы) Тогда
				СтрокаСвойстваЭФ.Значение = ВидЭлементаФормы;
			Иначе
				СтрокаСвойстваЭФ.Значение = ПолучитьВидЭлементаФормы(ТаблицаСвойствФорм, ЭлементФормы);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаСвойстваЭФ.Значение) Тогда
				СтруктураОтбора = Новый Структура;
				Если СтрСравнить(ЭлементФормы.ИмяНРег, "autocommandbar") = 0 Тогда
					СтруктураОтбора.Вставить("ВидЭлементаУправленияАнглийский", "autocommandbar");
				ИначеЕсли СтрСравнить(ЭлементФормы.ИмяНРег, "commandbar") = 0 Тогда
					СтруктураОтбора.Вставить("ВидЭлементаУправленияАнглийский", "commandbar");
				Иначе
					СтруктураОтбора.Вставить("ВидЭлементаСтрокой", СтрокаСвойстваЭФ.Значение);
				КонецЕсли;
				МассивСвойствРасширенияЭФ = ТаблицаСвойствФорм.НайтиСтроки(СтруктураОтбора);
			КонецЕсли;
		ИначеЕсли СвойствоЭФ = "Родитель" Тогда
			СтрокаСвойстваЭФ.Значение = Родитель;
		Иначе
			ЗначениеСвойстваЭФ = ПолучитьСвойствоЭлементаФормы(ЭлементФормы, СтрокаТаблицыСвойств, СтрокаСвойстваЭФ,
				СведенияОКонфигурации);
			СтрокаСвойстваЭФ.Значение = ЗначениеСвойстваЭФ;
		КонецЕсли;
		
	КонецЦикла;
	
	// Свойства расширения элемента управляемой формы
	Для Каждого СтрокаТаблицыСвойств Из МассивСвойствРасширенияЭФ Цикл
		
		СвойствоЭФ = СтрокаТаблицыСвойств.СвойствоРусский;
		
		Если НЕ ЗначениеЗаполнено(СвойствоЭФ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойстваЭФ = СтрокаДерева.Строки.Добавить();
		СтрокаСвойстваЭФ.Свойство = СвойствоЭФ;
		
		ЗначениеСвойстваЭФ = ПолучитьСвойствоЭлементаФормы(ЭлементФормы, СтрокаТаблицыСвойств, СтрокаСвойстваЭФ,
			СведенияОКонфигурации);
		
		СтрокаСвойстваЭФ.Значение = ЗначениеСвойстваЭФ;
	КонецЦикла;
	
	ЗаполнитьРолевыеНастройки(СтрокаДерева, ЭлементФормы, "ПользовательскаяВидимость");
	
	Если (ТипЭлементаФормы = "ТаблицаФормы") ИЛИ (ТипЭлементаФормы = "ГруппаФормы") Тогда
		
		ВеткаЭФ_ПодчиненныеЭлементы = СтрокаДерева.Строки.Найти("ПодчиненныеЭлементы", "Свойство");
		СтрокаПодчиненныхЭлементов = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементФормы, "childitems");
		Если СтрокаПодчиненныхЭлементов <> Неопределено Тогда
			ПодчиненныеЭлементы = СтрокаПодчиненныхЭлементов.Строки;
			Для Каждого ПодчиненныйЭФ Из ПодчиненныеЭлементы Цикл
				// Добавляем запись об элементе управляемой формы и заполняем свойства элемента формы
				ДобавитьЭлементУправляемойФормы(ПодчиненныйЭФ, ВеткаЭФ_ПодчиненныеЭлементы, ТаблицаСвойствФорм,
					СведенияОКонфигурации, ТипЭлементаФормы);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЭлементаФормы = "ТаблицаФормы" Тогда
		ВеткаЭФ_КоманднаяПанель = СтрокаДерева.Строки.Найти("КоманднаяПанель", "Свойство");
		ВеткаЭФ_КоманднаяПанель.ЭтоЭлементФормы = Истина;
		СтрокаКомандноеПанели = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементФормы, "autocommandbar");
		Если СтрокаКомандноеПанели <> Неопределено Тогда
			ЗаполнитьСвойстваЭлементаУправляемойФормы(СтрокаКомандноеПанели, ВеткаЭФ_КоманднаяПанель, ТаблицаСвойствФорм,
				СведенияОКонфигурации, ТипЭлементаФормы, "Командная панель"); // АПК:1297 - не локализуется
		КонецЕсли;
		
		ВеткаЭФ_КонтекстноеМеню = СтрокаДерева.Строки.Найти("КонтекстноеМеню", "Свойство");
		ВеткаЭФ_КонтекстноеМеню.ЭтоЭлементФормы = Истина;
		СтрокаКонтекстногоМеню = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементФормы, "contextmenu");
		Если СтрокаКонтекстногоМеню <> Неопределено Тогда
			ЗаполнитьСвойстваЭлементаУправляемойФормы(СтрокаКонтекстногоМеню, ВеткаЭФ_КонтекстноеМеню, ТаблицаСвойствФорм,
				СведенияОКонфигурации, ТипЭлементаФормы, "Контекстное меню"); // АПК:1297 - не локализуется
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипЭлементаФормы = "ПолеФормы") ИЛИ (ТипЭлементаФормы = "ДекорацияФормы") Тогда
		ВеткаЭФ_КонтекстноеМеню = СтрокаДерева.Строки.Найти("КонтекстноеМеню", "Свойство");
		ВеткаЭФ_КонтекстноеМеню.ЭтоЭлементФормы = Истина;
		СтрокаКонтекстногоМеню = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементФормы, "contextmenu");
		Если СтрокаКонтекстногоМеню <> Неопределено Тогда
			ЗаполнитьСвойстваЭлементаУправляемойФормы(СтрокаКонтекстногоМеню, ВеткаЭФ_КонтекстноеМеню, ТаблицаСвойствФорм,
				СведенияОКонфигурации, ТипЭлементаФормы, "Контекстное меню"); // АПК:1297 - не локализуется
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодчиненныеЭлементыУправляемойФормы(СтрокаДерева, ДеревоДанных, ТаблицаСвойствФорм,
	СведенияОКонфигурации, Родитель)
	
	СтрокаПодчиненныхЭлементов = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "childitems");
	Если СтрокаПодчиненныхЭлементов <> Неопределено Тогда
		ПодчиненныеЭлементы = СтрокаПодчиненныхЭлементов.Строки;
		Для Каждого ЭлементФормы Из ПодчиненныеЭлементы Цикл
			// Добавляем запись об элементе управляемой формы и заполняем свойства элемента формы
			ВеткаЭлементыФормы = ДобавитьЭлементУправляемойФормы(ЭлементФормы, СтрокаДерева, ТаблицаСвойствФорм,
				СведенияОКонфигурации, Родитель);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьЭлементУправляемойФормы(ЭлементФормы, ВеткаРодителя, ТаблицаСвойствФорм,
	СведенияОКонфигурации, Родитель)
	
	Значение = ПолучитьТипЭлементаУправленияФормы(ТаблицаСвойствФорм, ЭлементФормы);
	
	СтрокаДерева = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементФормы, "атрибуты.name");
	Если СтрокаДерева = Неопределено Тогда
		Свойство = "";
	Иначе
		Свойство = СтрокаДерева.Значение;
	КонецЕсли;
	
	ВеткаЭлементаФормы = ВеткаРодителя.Строки.Добавить();
	ВеткаЭлементаФормы.Свойство = Свойство;
	ВеткаЭлементаФормы.Значение = Значение;
	ВеткаЭлементаФормы.ЭтоЭлементФормы = Истина;
	
	ЗаполнитьСвойстваЭлементаУправляемойФормы(ЭлементФормы, ВеткаЭлементаФормы, ТаблицаСвойствФорм,
		СведенияОКонфигурации, Родитель);
	
	Возврат ВеткаЭлементаФормы;
	
КонецФункции

Функция ПолучитьСвойствоЭлементаФормы(ЭлементФормы, СтрокаТаблицыСвойств, СтрокаЭФ, СведенияОКонфигурации)
	
	Если ПустаяСтрока(СтрокаТаблицыСвойств.СвойствоАнглийский) Тогда
		Возврат СтрокаТаблицыСвойств.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если СтрокаТаблицыСвойств.СвойствоРусский = "ПодчиненныеЭлементы"
		ИЛИ СтрокаТаблицыСвойств.СвойствоРусский = "КоманднаяПанель"
		ИЛИ СтрокаТаблицыСвойств.СвойствоРусский = "КонтекстноеМеню" Тогда
		Возврат СтрокаТаблицыСвойств.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	СтрокаДерева = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементФормы, НРег(СтрокаТаблицыСвойств.СвойствоАнглийский));
	Если СтрокаДерева = Неопределено Тогда
		Возврат СтрокаТаблицыСвойств.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если СтрСравнить(СтрокаТаблицыСвойств.СвойствоРусский, "СписокВыбора") = 0 Тогда
		ФормируемаяСтрока = "";
		МассивЭлементовСписка = Новый Массив;
		Для Каждого ЭлементДерева Из СтрокаДерева.Строки Цикл
			ЭлементСпискаВыборка = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементДерева, "xr:value");
			Если ЭлементСпискаВыборка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСоЗначениемЭлемента = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСпискаВыборка, "value");
			Если СтрокаСоЗначениемЭлемента = Неопределено Тогда
				ЗначениеЭлемента = "";
			Иначе
				ЗначениеЭлемента = СтрокаСоЗначениемЭлемента.Значение;
			КонецЕсли;
			
			СтрокаСПредставлением = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСпискаВыборка, "presentation");
			Если СтрокаСПредставлением = Неопределено Тогда
				ПредставлениеЭлемента = "";
			Иначе
				ПредставлениеЭлемента = ПолучитьЗначениеСинонимаПоОсновномуЯзыку(СтрокаСПредставлением, СведенияОКонфигурации);
			КонецЕсли;
			
			ТекущееЗначение = СтрШаблон("%1(%2)", ПредставлениеЭлемента, ЗначениеЭлемента);
			МассивЭлементовСписка.Добавить(ТекущееЗначение);
			
		КонецЦикла;
		
		ФормируемаяСтрока = СтрСоединить(МассивЭлементовСписка, ";");
		Возврат ФормируемаяСтрока;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыСвойств.ПолучатьРусскоеЗначение) Тогда
		Возврат ПолучитьЗначениеСинонимаПоОсновномуЯзыку(СтрокаДерева, СведенияОКонфигурации);
	КонецЕсли;
	
	ОбрабатываемаяСтрока = СтрокаДерева.Значение;
	СоответствиеСистемныхПеречислений = СведенияОКонфигурации.СоответствиеСистемныхПеречислений;
	
	Если СтрСравнить(СтрокаТаблицыСвойств.СвойствоРусский, "События") = 0 Тогда
		ЗаполнитьСобытияЭлемента(СтрокаЭФ, СтрокаДерева.Строки, СоответствиеСистемныхПеречислений);
		Возврат "События";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыСвойств.ТипСистемногоПеречисления) Тогда
		
		Если СтрокаТаблицыСвойств.ТипСистемногоПеречисления = "Цвет" Тогда
			
			СтруктураЦвета = ПолучитьЗначениеСвойстваЦвет(ОбрабатываемаяСтрока, СоответствиеСистемныхПеречислений);
			
			Для Каждого СвойствоЦвета Из СтруктураЦвета Цикл
				НоваяСтрока = СтрокаЭФ.Строки.Добавить();
				НоваяСтрока.Свойство = СвойствоЦвета.Ключ;
				НоваяСтрока.Значение = СвойствоЦвета.Значение;
				НоваяСтрока.ЭтоЭлементФормы = Ложь;
			КонецЦикла;
			
			Возврат "Цвет";
			
		ИначеЕсли СтрокаТаблицыСвойств.ТипСистемногоПеречисления = "Шрифт" Тогда
			
			СтруктураЗначенийШрифта = Новый Структура;
			СтруктураЗначенийШрифта.Вставить("СтильШрифта", "");
			СтруктураЗначенийШрифта.Вставить("ТипШрифта", "");
			СтруктураЗначенийШрифта.Вставить("Шрифт", "ИзСтиля");
			СтруктураЗначенийШрифта.Вставить("Размер", "ИзСтиля");
			СтруктураЗначенийШрифта.Вставить("Масштаб", 100);
			СтруктураЗначенийШрифта.Вставить("Жирный", "ИзСтиля");
			СтруктураЗначенийШрифта.Вставить("Наклонный", "ИзСтиля");
			СтруктураЗначенийШрифта.Вставить("Подчеркнутый", "ИзСтиля");
			СтруктураЗначенийШрифта.Вставить("Зачеркнутый", "ИзСтиля");
			ПолучитьЗначениеСвойстваШрифт(СтруктураЗначенийШрифта, СтрокаДерева, СоответствиеСистемныхПеречислений, Истина);
			
			Для Каждого СвойствоШрифта Из СтруктураЗначенийШрифта Цикл
				НоваяСтрока = СтрокаЭФ.Строки.Добавить();
				НоваяСтрока.Свойство = СвойствоШрифта.Ключ;
				НоваяСтрока.Значение = СвойствоШрифта.Значение;
				НоваяСтрока.ЭтоЭлементФормы = Ложь;
			КонецЦикла;
			
			Возврат "Шрифт";
			
		КонецЕсли;
		
		ИскомоеЗначение = СтрокаТаблицыСвойств.ТипСистемногоПеречисления + ОбрабатываемаяСтрока;
		НайденноеЗначение = СоответствиеСистемныхПеречислений[ИскомоеЗначение];
		
		Если НайденноеЗначение = Неопределено Тогда
			Попытка
				НайденноеЗначение = Строка(Вычислить(ИскомоеЗначение));
			Исключение
				НайденноеЗначение = ОбрабатываемаяСтрока;
			КонецПопытки;
			СоответствиеСистемныхПеречислений.Вставить(ИскомоеЗначение, НайденноеЗначение);
		КонецЕсли;
		
		Возврат НайденноеЗначение;
		
	Иначе
		
		Если СтрСравнить(ОбрабатываемаяСтрока, "Auto") = 0 Тогда
			Возврат "Авто";
		КонецЕсли;
		
		Попытка
			Значение = Дата(ОбрабатываемаяСтрока);
			Возврат Значение;
		Исключение;
		КонецПопытки;
		
		Попытка
			Значение = Булево(ОбрабатываемаяСтрока);
			Возврат Значение;
		Исключение;
		КонецПопытки;
		
		Попытка
			Значение = Число(ОбрабатываемаяСтрока);
			Возврат Значение;
		Исключение;
		КонецПопытки;
		
		Возврат ОбрабатываемаяСтрока;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидЭлементаФормы(ТаблицаСвойствФорм, ЭлементФормы)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидЭлементаУправленияАнглийский", ЭлементФормы.ИмяНРег);
	
	МассивСтрок = ТаблицаСвойствФорм.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из МассивСтрок Цикл
		Если НЕ ПустаяСтрока(Строка.ВидЭлементаСтрокой) Тогда
			Возврат Строка.ВидЭлементаСтрокой;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТипЭлементаУправленияФормы(ТаблицаСвойствФорм, ЭлементФормы)
	
	Если СтрСравнить(ЭлементФормы.Имя, "Button") = 0 Тогда
		Значение = "КнопкаФормы";
	ИначеЕсли СтрСравнить(ЭлементФормы.Имя, "Table") = 0 Тогда
		Значение = "ТаблицаФормы";
	Иначе
		СтрокаТаблицыСвойств = ТаблицаСвойствФорм.Найти(ЭлементФормы.ИмяНРег, "ВидЭлементаУправленияАнглийский");
		Если СтрокаТаблицыСвойств = Неопределено Тогда
			Значение = "";
		Иначе
			Значение = СтрокаТаблицыСвойств.ТипЭлементаУправленияРусский;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьЗначениеСинонимаПоОсновномуЯзыку(СтрокаДереваДанных, ПараметрыПроверки)
	
	Если СтрокаДереваДанных = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ФорматированнаяСтрока = Ложь;
	СтрокаПризнакаФорматированнойСтроки = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваДанных, "Атрибуты.formatted");
	Если СтрокаПризнакаФорматированнойСтроки <> Неопределено Тогда
		ФорматированнаяСтрока = ПривестиСтрокуКТипу(СтрокаПризнакаФорматированнойСтроки.Значение);
	КонецЕсли;
	
	ОсновнойЯзык = ПолучитьОсновнойЯзыкКонфигурации(ПараметрыПроверки, ПараметрыПроверки.КаталогВыгрузкиФайлов);
	
	МассивСтрок = НайтиСтрокиДереваДанных("v8:item.v8:lang", СтрокаДереваДанных);
	НайденнаяСтрока = Неопределено;
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		Если СтрСравнить(СтрокаМассива.Значение, ОсновнойЯзык) = 0 Тогда
			НайденнаяСтрока = СтрокаМассива.Родитель;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаСоЗначением = ПолучитьСтрокуДереваПоПравилуПоиска(НайденнаяСтрока, "v8:content");
	Если СтрокаСоЗначением = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Значение = СтрокаСоЗначением.Значение;
	
	Если ФорматированнаяСтрока Тогда
		HTML = Новый COMОбъект("HTMLFile");
		HTML.Open("text/html");
		HTML.Write(Значение);
		Попытка
			Значение = HTML.Body.innerText;
		Исключение;
		КонецПопытки;
		HTML.Close();
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура ЗаполнитьСобытияЭлемента(СтрокаЭФ, КоллекцияСтрок, СоответствиеСистемныхПеречислений)
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		СтрокаТипаШрифта = ПолучитьСтрокуДереваПоПравилуПоиска(Строка, "Атрибуты.name");
		Если СтрокаТипаШрифта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбработчикаАнгл = СтрокаТипаШрифта.Значение;
		ИмяОбработчика = СоответствиеСистемныхПеречислений[ИмяОбработчикаАнгл];
		Если ИмяОбработчика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаЭФ.Строки.Добавить();
		НоваяСтрока.Свойство = ИмяОбработчика;
		НоваяСтрока.Значение = Строка.Значение;
		НоваяСтрока.ЭтоЭлементФормы = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеСистемныхПеречисленийСобытиямиЭлементовФормы(СведенияОКонфигурации)
	
	Соответствие = СведенияОКонфигурации.СоответствиеСистемныхПеречислений;
	
#Область СобытияУправляемойФормы
	
	Соответствие.Вставить("ExternalEvent", "ВнешнееСобытие");
	Соответствие.Вставить("ActivationProcessing", "ОбработкаАктивизации");
	Соответствие.Вставить("ChoiceProcessing", "ОбработкаВыбора");
	Соответствие.Вставить("NewWriteProcessing", "ОбработкаЗаписиНового");
	Соответствие.Вставить("URLProcessing", "ОбработкаНавигационнойСсылки");
	Соответствие.Вставить("NotificationProcessing", "ОбработкаОповещения");
	Соответствие.Вставить("NavigationProcessing", "ОбработкаПерехода");
	Соответствие.Вставить("FillCheckProcessingAtServer", "ОбработкаПроверкиЗаполненияНаСервере");
	Соответствие.Вставить("BeforeLoadDataFromSettingsAtServer", "ПередЗагрузкойДанныхИзНастроекНаСервере");
	Соответствие.Вставить("BeforeClose", "ПередЗакрытием");
	Соответствие.Вставить("OnLoadDataFromSettingsAtServer", "ПриЗагрузкеДанныхИзНастроекНаСервере");
	Соответствие.Вставить("OnClose", "ПриЗакрытии");
	Соответствие.Вставить("OnChangeDisplaySettings", "ПриИзмененииПараметровЭкрана");
	Соответствие.Вставить("OnOpen", "ПриОткрытии");
	Соответствие.Вставить("OnReopen", "ПриПовторномОткрытии");
	Соответствие.Вставить("OnCreateAtServer", "ПриСозданииНаСервере");
	Соответствие.Вставить("OnSaveDataInSettingsAtServer", "ПриСохраненииДанныхВНастройкахНаСервере");
#КонецОбласти
	
#Область СобытияОбъектов
	
	Соответствие.Вставить("ValueChoice", "ВыборЗначения");
	Соответствие.Вставить("BeforeWrite", "ПередЗаписью");
	Соответствие.Вставить("BeforeWriteAtServer", "ПередЗаписьюНаСервере");
	Соответствие.Вставить("AfterWrite", "ПослеЗаписи");
	Соответствие.Вставить("AfterWriteAtServer", "ПослеЗаписиНаСервере");
	Соответствие.Вставить("OnWriteAtServer", "ПриЗаписиНаСервере");
	Соответствие.Вставить("OnReadAtServer", "ПриЧтенииНаСервере");
	
#КонецОбласти
	
#Область СобытияОтчета
	
	Соответствие.Вставить("BeforeLoadVariantAtServer", "ПередЗагрузкойВариантаНаСервере");
	Соответствие.Вставить("BeforeLoadUserSettingsAtServer", "ПередЗагрузкойПользовательскихНастроекНаСервере");
	Соответствие.Вставить("OnLoadVariantAtServer", "ПриЗагрузкеВариантаНаСервере");
	Соответствие.Вставить("OnLoadUserSettingsAtServer", "ПриЗагрузкеПользовательскихНастроекНаСервере");
	Соответствие.Вставить("OnUpdateUserSettingSetAtServer", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	Соответствие.Вставить("OnSaveVariantAtServer", "ПриСохраненииВариантаНаСервере");
	Соответствие.Вставить("OnSaveUserSettingsAtServer", "ПриСохраненииПользовательскихНастроекНаСервере");
	
#КонецОбласти
	
#Область СобытияБизнесПроцесса
	
	Соответствие.Вставить("BeforeStart", "ПередСтартом");
	
#КонецОбласти
	
#Область СобытияЗадачи
	
	Соответствие.Вставить("BeforeExecute", "ПередВыполнением");
	
#КонецОбласти
	
#Область СобытияПоляФормы
	
	Соответствие.Вставить("OnChange", "ПриИзменении");
	Соответствие.Вставить("AutoComplete", "АвтоПодбор");
	Соответствие.Вставить("EditTextChange", "ИзменениеТекстаРедактирования");
	Соответствие.Вставить("StartChoice", "НачалоВыбора");
	Соответствие.Вставить("TextEditEnd", "ОкончаниеВводаТекста");
	Соответствие.Вставить("Opening", "Открытие");
	Соответствие.Вставить("Clearing", "Очистка");
	Соответствие.Вставить("Tuning", "Регулирование");
	Соответствие.Вставить("Creating", "Создание");
	Соответствие.Вставить("Click", "Нажатие");
	Соответствие.Вставить("DragStart", "НачалоПеретаскивания");
	Соответствие.Вставить("DragEnd", "ОкончаниеПеретаскивания");
	Соответствие.Вставить("Drag", "Перетаскивание");
	Соответствие.Вставить("DragCheck", "ПроверкаПеретаскивания");
	Соответствие.Вставить("Selection", "Выбор");
	Соответствие.Вставить("OnActivateDate", "ПриАктивизацииДаты");
	Соответствие.Вставить("OnPeriodOutput", "ПриВыводеПериода");
	Соответствие.Вставить("DetailProcessing", "ОбработкаРасшифровки");
	Соответствие.Вставить("OnActivate", "ПриАктивизации");
	Соответствие.Вставить("OnIntervalEditEnd", "ПриОкончанииРедактированияИнтервала");
	Соответствие.Вставить("AdditionalDetailProcessing", "ОбработкаДополнительнойРасшифровки");
	Соответствие.Вставить("OnChangeAreaContentEvent", "ПриИзмененииСодержимогоОбласти");
	Соответствие.Вставить("DocumentComplete", "ДокументСформирован");
	Соответствие.Вставить("OnClick", "ПриНажатии");
	Соответствие.Вставить("BeforeStartQuickEdit", "ПередНачаломБыстрогоРедактирования");
	Соответствие.Вставить("BeforeStartEdit", "ПередНачаломРедактирования");
	Соответствие.Вставить("BeforeCreate", "ПередСозданием");
	Соответствие.Вставить("BeforeDelete", "ПередУдалением");
	Соответствие.Вставить("OnEditEnd", "ПриОкончанииРедактирования");
	Соответствие.Вставить("OnCurrentRepresentationPeriodChange", "ПриСменеТекущегоПериодаОтображения");
	
#КонецОбласти
	
#Область СобытияТаблицыФормы
	
	Соответствие.Вставить("RefreshRequestProcessing", "ОбработкаЗапросаОбновления");
	Соответствие.Вставить("BeforeAddRow", "ПередНачаломДобавления");
	Соответствие.Вставить("BeforeRowChange", "ПередНачаломИзменения");
	Соответствие.Вставить("BeforeEditEnd", "ПередОкончаниемРедактирования");
	Соответствие.Вставить("BeforeExpand", "ПередРазворачиванием");
	Соответствие.Вставить("BeforeCollapse", "ПередСворачиванием");
	Соответствие.Вставить("BeforeDeleteRow", "ПередУдалением");
	Соответствие.Вставить("AfterDeleteRow", "ПослеУдаления");
	Соответствие.Вставить("OnActivateField", "ПриАктивизацииПоля");
	Соответствие.Вставить("OnActivateRow", "ПриАктивизацииСтроки");
	Соответствие.Вставить("OnActivateCell", "ПриАктивизацииЯчейки");
	Соответствие.Вставить("OnStartEdit", "ПриНачалеРедактирования");
	Соответствие.Вставить("OnCurrentParentChange", "ПриСменеТекущегоРодителя");
	Соответствие.Вставить("OnGetDataAtServer", "ПриПолученииДанныхНаСервере");
	
#КонецОбласти
	
#Область СобытияГруппыФормы
	
	Соответствие.Вставить("OnCurrentPageChange", "ПриСменеСтраницы");
	
#КонецОбласти
	
	СведенияОКонфигурации.СоответствиеСистемныхПеречислений = Соответствие;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьПараметровФормы

// Записывает параметры формы в регистр сведений.
//
Процедура ЗаписатьПараметрыФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей)
	
	СтрокаДанныхПараметры = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "Form.Parameters");
	Если СтрокаДанныхПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхПараметры.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСодержания = ПолучитьЗаписьРегистраЗначенияСоставныхСвойствОбъектов(ТаблицаНабораЗаписей, ОбъектСсылка,
		Перечисления.ИдентификаторыСодержанияОбъектов.ПараметрыФормы);
	
	Значение = ЗаписьСодержания.Значение;
	
	ДеревоПараметров = Значение.Получить();
	Если ДеревоПараметров = Неопределено Тогда
		ДеревоПараметров = Новый ДеревоЗначений;
		ДеревоПараметров.Колонки.Добавить("Свойство");
		ДеревоПараметров.Колонки.Добавить("Значение");
	КонецЕсли;
	
	СтруктураПараметра = Новый Структура;
	СтруктураПараметра.Вставить("Имя", "");
	СтруктураПараметра.Вставить("Тип", "");
	СтруктураПараметра.Вставить("КлючевойПараметр", "");
	
	Для Каждого Параметр Из СтрокаДанныхПараметры.Строки Цикл
		
		СтруктураПараметра.Имя = ПолучитьЗначениеСвойстваАтрибута(Параметр, "Имя");
		Если НЕ ЗначениеЗаполнено(СтруктураПараметра.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметра.Тип = ПолучитьЗначениеСвойстваАтрибута(Параметр, "Тип");
		КлючевойПараметр = ПолучитьЗначениеСвойстваАтрибута(Параметр, "КлючевойПараметр");
		СтруктураПараметра.КлючевойПараметр = ?(КлючевойПараметр = "", Ложь, КлючевойПараметр);
		
		СтрокаПараметра = ДеревоПараметров.Строки.Найти(СтруктураПараметра.Имя,, Ложь);
		Если СтрокаПараметра = Неопределено Тогда
			СтрокаПараметра = ДеревоПараметров.Строки.Добавить();
			СтрокаПараметра.Свойство = СтруктураПараметра.Имя;
			СтрокаПараметра.Значение = СтруктураПараметра.Тип;
		КонецЕсли;
		
		ЗаполнитьСвойстваЭлемента(СтрокаПараметра, СтруктураПараметра);
		
	КонецЦикла;
	
	ЗаписьСодержания.Значение = ВернутьХранилищеЗначения(ДеревоПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьКомандФормы

// Записывает команды формы в регистр сведений.
//
Процедура ЗаписатьКомандыФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей)
	
	СтрокаДанныхКоманды = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "Form.Commands");
	Если СтрокаДанныхКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхКоманды.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСодержания = ПолучитьЗаписьРегистраЗначенияСоставныхСвойствОбъектов(ТаблицаНабораЗаписей, ОбъектСсылка,
		Перечисления.ИдентификаторыСодержанияОбъектов.КомандыФормы);
	
	Значение = ЗаписьСодержания.Значение;
	
	ДеревоКоманд = Значение.Получить();
	Если ДеревоКоманд = Неопределено Тогда
		ДеревоКоманд = Новый ДеревоЗначений;
		ДеревоКоманд.Колонки.Добавить("Свойство");
		ДеревоКоманд.Колонки.Добавить("Значение");
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("Имя", "");
	СтруктураКоманды.Вставить("Заголовок", "");
	СтруктураКоманды.Вставить("Действие", "");
	СтруктураКоманды.Вставить("ИзменяетСохраняемыеДанные", "");
	СтруктураКоманды.Вставить("Подсказка", "");
	
	Для Каждого Команда Из СтрокаДанныхКоманды.Строки Цикл
		
		СтруктураКоманды.Имя = ПолучитьЗначениеСвойстваАтрибута(Команда, "Имя");
		Если НЕ ЗначениеЗаполнено(СтруктураКоманды.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКоманды.Заголовок = ПолучитьЗначениеСвойстваАтрибута(Команда, "Заголовок");
		СтруктураКоманды.Действие = ПолучитьЗначениеСвойстваАтрибута(Команда, "Действие");
		СтруктураКоманды.Подсказка = ПолучитьЗначениеСвойстваАтрибута(Команда, "Подсказка");
		ИзменяетСохраняемыеДанные = ПолучитьЗначениеСвойстваАтрибута(Команда, "ИзменяетСохраняемыеДанные");
		СтруктураКоманды.ИзменяетСохраняемыеДанные = ?(ИзменяетСохраняемыеДанные = "", Ложь, ИзменяетСохраняемыеДанные);
		
		СтрокаКоманды = ДеревоКоманд.Строки.Найти(СтруктураКоманды.Имя,, Ложь);
		Если СтрокаКоманды = Неопределено Тогда
			СтрокаКоманды = ДеревоКоманд.Строки.Добавить();
			СтрокаКоманды.Свойство = СтруктураКоманды.Имя;
			СтрокаКоманды.Значение = "Команда";
		КонецЕсли;
		
		ЗаполнитьСвойстваЭлемента(СтрокаКоманды, СтруктураКоманды);
		
		ЗаполнитьРолевыеНастройки(СтрокаКоманды, Команда, "Использование");
		
	КонецЦикла;
	
	ЗаписьСодержания.Значение = ВернутьХранилищеЗначения(ДеревоКоманд);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьУсловногоОформления

// Записывает условное оформление формы в регистр сведений.
//
Процедура ЗаписатьУсловноеОформление(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей)
	
	СтрокаДанныхУсловноеОформление = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "Form.Attributes.ConditionalAppearance");
	Если СтрокаДанныхУсловноеОформление = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхУсловноеОформление.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСодержания = ПолучитьЗаписьРегистраЗначенияСоставныхСвойствОбъектов(ТаблицаНабораЗаписей, ОбъектСсылка,
		Перечисления.ИдентификаторыСодержанияОбъектов.УсловноеОформление);
	
	Значение = ЗаписьСодержания.Значение;
	
	ДеревоУсловногоОформления = Значение.Получить();
	Если ДеревоУсловногоОформления = Неопределено Тогда
		ДеревоУсловногоОформления = Новый ДеревоЗначений;
		ДеревоУсловногоОформления.Колонки.Добавить("Свойство");
		ДеревоУсловногоОформления.Колонки.Добавить("Значение");
	КонецЕсли;
	
	ЗаполнитьУсловноеОформление(ДеревоУсловногоОформления, СтрокаДанныхУсловноеОформление);
	
	ЗаписьСодержания.Значение = ВернутьХранилищеЗначения(ДеревоУсловногоОформления);
	
КонецПроцедуры

Процедура ЗаполнитьПоляУсловногоОформления(СтрокаДерева, СтрокаДанных)
	
	СтрокаДанныхПоля = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанных, "dcsset:selection");
	Если СтрокаДанныхПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхПоля.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ДоступныеПоляОформляемыхПолей", "ДоступныеПоляКомпоновкиДанных");
	СтруктураПоля.Вставить("Элементы", "КоллекцияОформляемыхПолейКомпоновкиДанных");
	
	СтрокаДереваПоля = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, "Поля", "Свойство");
	ЗаполнитьСвойстваЭлемента(СтрокаДереваПоля, СтруктураПоля);
	СтрокаДереваЭлементы = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваПоля, "Элементы", "Свойство");
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Использование", Истина);
	СтруктураЭлемента.Вставить("Поле", "");
	
	Для Каждого СтрокаДанныхЭлемент Из СтрокаДанныхПоля.Строки Цикл
		
		СтрокаДереваЭлемент = СтрокаДереваЭлементы.Строки.Добавить();
		СтрокаДереваЭлемент.Свойство = "Элемент";
		СтрокаДереваЭлемент.Значение = "ОформляемоеПолеКомпоновкиДанных";
		
		Использование = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:use");
		СтруктураЭлемента.Использование = ?(Использование = "", Истина, Булево(Использование));
		СтруктураЭлемента.Поле = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:field");
		
		ЗаполнитьСвойстваЭлемента(СтрокаДереваЭлемент, СтруктураЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУсловноеОформлениеДинамическогоСписка(СтрокаДерева, СтрокаДанных)
	
	СтрокаДанныхУсловноеОформление = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанных, "Settings.ListSettings.dcsset:conditionalAppearance");
	Если СтрокаДанныхУсловноеОформление = Неопределено Тогда
		// Условное оформление не заполнено, выходим.
		Возврат;
	КонецЕсли;
	
	СтрокаДанныхЭлементУсловногоОформления = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхУсловноеОформление, "dcsset:item");
	Если СтрокаДанныхЭлементУсловногоОформления = Неопределено Тогда
		// Не найдено ни одного элемента условного оформления, т.о. считаем, что оно не настроено, выходим.
		Возврат;
	КонецЕсли;
	
	СтруктураУсловногоОформления = Новый Структура;
	СтруктураУсловногоОформления.Вставить("УсловноеОформление", "УсловноеОформлениеКомпоновкиДанных");
	
	ЗаполнитьСвойстваЭлемента(СтрокаДерева, СтруктураУсловногоОформления);
	СтрокаДереваУсловноеОформление = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, "УсловноеОформление", "Свойство");
	
	ЗаполнитьУсловноеОформление(СтрокаДереваУсловноеОформление, СтрокаДанныхУсловноеОформление);
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыОтбораУсловногоОформления(СтрокаДереваЭлементы, СтрокаДанныхОтбор)
	
	СтруктураТипЭлемент = Новый Структура;
	СтруктураТипЭлемент.Вставить("Использование", Истина);
	СтруктураТипЭлемент.Вставить("ЛевоеЗначение", "");
	СтруктураТипЭлемент.Вставить("ВидСравнения", "");
	СтруктураТипЭлемент.Вставить("ПравоеЗначение", "");
	
	СтруктураТипГруппа = Новый Структура;
	СтруктураТипГруппа.Вставить("Использование", Истина);
	СтруктураТипГруппа.Вставить("ТипГруппы", "");
	СтруктураТипГруппа.Вставить("Элементы", "КоллекцияЭлементовОтбораКомпоновкиДанных");
	
	Для Каждого СтрокаДанныхЭлемент Из СтрокаДанныхОтбор.Строки Цикл
		
		СтрокаДанныхАтрибутыТип = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанныхЭлемент, "Атрибуты.xsi:type");
		Если СтрокаДанныхАтрибутыТип = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = СтрокаДанныхАтрибутыТип.Значение;
		ЭтоГруппа = Ложь;
		
		// Новый элемент отбора - это группа элементов
		Если ТипЭлемента = "dcsset:FilterItemGroup" Тогда
			
			ЭтоГруппа = Истина;
			
			СтрокаДереваЭлемент = СтрокаДереваЭлементы.Строки.Добавить();
			СтрокаДереваЭлемент.Свойство = "Группа";
			СтрокаДереваЭлемент.Значение = "ГруппаЭлементовОтбораКомпоновкиДанных";
			
			СтруктураЭлемента = СтруктураТипГруппа;
			
			Использование = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:use");
			СтруктураЭлемента.Использование = ?(Использование = "", Истина, Булево(Использование));
			СтруктураЭлемента.ТипГруппы = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:groupType");
			
		// Новый элемент отбора - это элемент.
		ИначеЕсли ТипЭлемента = "dcsset:FilterItemComparison" Тогда
			
			СтрокаДереваЭлемент = СтрокаДереваЭлементы.Строки.Добавить();
			СтрокаДереваЭлемент.Свойство = "Элемент";
			СтрокаДереваЭлемент.Значение = "ЭлементОтбораКомпоновкиДанных";
			
			СтруктураЭлемента = СтруктураТипЭлемент;
			
			Использование = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:use");
			СтруктураЭлемента.Использование = ?(Использование = "", Истина, Булево(Использование));
			СтруктураЭлемента.ЛевоеЗначение = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:left");
			СтруктураЭлемента.ВидСравнения = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:comparisonType");
			СтруктураЭлемента.ПравоеЗначение = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcsset:right");
			
		Иначе
			// Не удалось определить тип нового элемента отбора, продолжаем.
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьСвойстваЭлемента(СтрокаДереваЭлемент, СтруктураЭлемента);
		
		Если ЭтоГруппа Тогда
			СтрокаДереваЭлементЭлементы = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваЭлемент, "Элементы", "Свойство");
			// Для группы элементов нужен рекурсивный вызов.
			ЗаполнитьЭлементыОтбораУсловногоОформления(СтрокаДереваЭлементЭлементы, СтрокаДанныхЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтборУсловногоОформления(СтрокаДерева, СтрокаДанных)
	
	СтрокаДанныхОтбор = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанных, "dcsset:filter");
	Если СтрокаДанныхОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхОтбор.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ДоступныеПоляОтбора", "ДоступныеПоляКомпоновкиДанных");
	СтруктураОтбор.Вставить("ИдентификаторПользовательскойНастройки", "");
	СтруктураОтбор.Вставить("ПредставлениеПользовательскойНастройки", "");
	СтруктураОтбор.Вставить("РежимОтображения", "РежимОтображенияЭлементаНастройкиКомпоновкиДанных");
	СтруктураОтбор.Вставить("Элементы", "КоллекцияЭлементовОтбораКомпоновкиДанных");
	
	СтрокаДереваОтбор = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, "Отбор", "Свойство");
	ЗаполнитьСвойстваЭлемента(СтрокаДереваОтбор, СтруктураОтбор);
	СтрокаДереваЭлементы = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваОтбор, "Элементы", "Свойство");
	
	ЗаполнитьЭлементыОтбораУсловногоОформления(СтрокаДереваЭлементы, СтрокаДанныхОтбор);
	
КонецПроцедуры

Процедура ЗаполнитьОформлениеУсловногоОформления(СтрокаДерева, СтрокаДанных)
	
	СтрокаДанныхОформление = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДанных, "dcsset:appearance");
	Если СтрокаДанныхОформление = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхОформление.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОформление = Новый Структура;
	СтруктураОформление.Вставить("ДоступныеПараметры", "ДоступныеПараметрыКомпоновкиДанных");
	СтруктураОформление.Вставить("ДоступныеПоляПараметров", "ДоступныеПоляКомпоновкиДанных");
	СтруктураОформление.Вставить("Элементы", "КоллекцияЗначенийПараметровКомпоновкиДанных");
	
	СтрокаДереваОформление = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, "Оформление", "Свойство");
	ЗаполнитьСвойстваЭлемента(СтрокаДереваОформление, СтруктураОформление);
	СтрокаДереваЭлементы = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваОформление, "Элементы", "Свойство");
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Значение", "");
	СтруктураЭлемента.Вставить("Использование", Истина);
	СтруктураЭлемента.Вставить("Параметр", "");
	
	Для Каждого СтрокаДанныхЭлемент Из СтрокаДанныхОформление.Строки Цикл
		
		СтрокаДереваЭлемент = СтрокаДереваЭлементы.Строки.Добавить();
		СтрокаДереваЭлемент.Свойство = "Элемент";
		СтрокаДереваЭлемент.Значение = "ЗначениеПараметраНастроекКомпоновкиДанных";
		// Есть еще тип ЗначениеПараметраКомпоновкиДанных, но у них одинаковые необходимые свойства (СтруктураЭлемента).
		
		Использование = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcscor:use");
		Значение = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcscor:value");
		Если ПустаяСтрока(Значение) Тогда
			Значение = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcscor:value.v8:item.v8:content");
		КонецЕсли;
		
		СтруктураЭлемента.Использование = ?(Использование = "", Истина, Булево(Использование));
		СтруктураЭлемента.Параметр = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлемент,, "dcscor:parameter");
		СтруктураЭлемента.Значение = Значение;
		
		ЗаполнитьСвойстваЭлемента(СтрокаДереваЭлемент, СтруктураЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУсловноеОформление(ДеревоУсловногоОформления, СтрокаДанныхУсловноеОформление)
	
	СтруктураУсловногоОформления = Новый Структура;
	СтруктураУсловногоОформления.Вставить("Элементы", "КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных");
	ЗаполнитьСвойстваЭлемента(ДеревоУсловногоОформления, СтруктураУсловногоОформления);
	СтрокаДереваЭлементы = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоУсловногоОформления, "Элементы", "Свойство");
	
	СтруктураЭлементовУсловногоОформления = Новый Структура;
	СтруктураЭлементовУсловногоОформления.Вставить("Поля", "ОформляемыеПоляКомпоновкиДанных");
	СтруктураЭлементовУсловногоОформления.Вставить("Отбор", "ОтборКомпоновкиДанных");
	СтруктураЭлементовУсловногоОформления.Вставить("Оформление", "ОформлениеКомпоновкиДанных");
	СтруктураЭлементовУсловногоОформления.Вставить("Представление", "");
	СтруктураЭлементовУсловногоОформления.Вставить("Использование", Истина);
	
	Для Каждого СтрокаДанныхЭлементУсловногоОформления Из СтрокаДанныхУсловноеОформление.Строки Цикл
		
		Если СтрокаДанныхЭлементУсловногоОформления.Имя <> "dcsset:item" Тогда
			// Это не элемент условного оформления, не заполняем.
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваЭлементУсловногоОформления = СтрокаДереваЭлементы.Строки.Добавить();
		СтрокаДереваЭлементУсловногоОформления.Свойство = "ЭлементУсловногоОформления";
		СтрокаДереваЭлементУсловногоОформления.Значение = "ЭлементУсловногоОформленияКомпоновкиДанных";
		
		Использование = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлементУсловногоОформления, "Использование");
		СтруктураЭлементовУсловногоОформления.Использование = ?(Использование = "", Истина, Использование);
		
		Представление = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлементУсловногоОформления, "", "dcsset:presentation");
		Если ПустаяСтрока(Представление) Тогда
			ФильтрПоиска = "dcsset:presentation.v8:item.v8:content";
			Представление = ПолучитьЗначениеСвойстваАтрибута(СтрокаДанныхЭлементУсловногоОформления, "", ФильтрПоиска);
		КонецЕсли;
		СтруктураЭлементовУсловногоОформления.Представление = Представление;
		
		ЗаполнитьСвойстваЭлемента(СтрокаДереваЭлементУсловногоОформления, СтруктураЭлементовУсловногоОформления);
		
		ЗаполнитьПоляУсловногоОформления(СтрокаДереваЭлементУсловногоОформления, СтрокаДанныхЭлементУсловногоОформления);
		ЗаполнитьОтборУсловногоОформления(СтрокаДереваЭлементУсловногоОформления, СтрокаДанныхЭлементУсловногоОформления);
		ЗаполнитьОформлениеУсловногоОформления(СтрокаДереваЭлементУсловногоОформления, СтрокаДанныхЭлементУсловногоОформления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьКомандногоИнтерфейсаФормы

Процедура ЗаписатьКомандныйИнтерфейсФормы(ОбъектСсылка, ДеревоДанных, ТаблицаНабораЗаписей, ТаблицаТиповОбъектов)
	
	СтрокаДанныхКомандныйИнтерфейс = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "Form.CommandInterface");
	Если СтрокаДанныхКомандныйИнтерфейс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанныхКомандныйИнтерфейс.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСодержания = ПолучитьЗаписьРегистраЗначенияСоставныхСвойствОбъектов(ТаблицаНабораЗаписей, ОбъектСсылка,
		Перечисления.ИдентификаторыСодержанияОбъектов.КомандныйИнтерфейсФормы);
	
	ДеревоКомандногоИнтерфейса = Новый ДеревоЗначений;
	ДеревоКомандногоИнтерфейса.Колонки.Добавить("Свойство");
	ДеревоКомандногоИнтерфейса.Колонки.Добавить("Значение");
	
	ЗаписатьДанныеПанелиНавигации(СтрокаДанныхКомандныйИнтерфейс, ДеревоКомандногоИнтерфейса, ТаблицаТиповОбъектов);
	ЗаписатьДанныеКоманднойПанелиФормы(СтрокаДанныхКомандныйИнтерфейс, ДеревоКомандногоИнтерфейса, ТаблицаТиповОбъектов);
	
	ДеревоКомандногоИнтерфейса.Строки.Сортировать("Свойство", Истина);
	
	ЗаписьСодержания.Значение = ВернутьХранилищеЗначения(ДеревоКомандногоИнтерфейса);
	
КонецПроцедуры

Процедура ЗаписатьДанныеПанелиНавигации(ДеревоДанных, ДеревоКомандногоИнтерфейса, ТаблицаТиповОбъектов)
	
	ГруппаПанелиНавигации = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "NavigationPanel");
	
	Если ГруппаПанелиНавигации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПанельНавигации = ДеревоКомандногоИнтерфейса.Строки.Добавить();
	ПанельНавигации.Свойство = "ПанельНавигации";
	ПанельНавигации.Значение = "ГруппаФормы";
	
	ИмяПанелиНавигации = ПанельНавигации.Строки.Добавить();
	ИмяПанелиНавигации.Свойство = "Имя";
	ИмяПанелиНавигации.Значение = "ПанельНавигации";
	
	ЗаголовокПанелиНавигации = ПанельНавигации.Строки.Добавить();
	ЗаголовокПанелиНавигации.Свойство = "Заголовок";
	ЗаголовокПанелиНавигации.Значение = "Панель навигации"; // АПК:1297 - не локализуется
	
	ПодчиненныеЭлементы = ПанельНавигации.Строки.Добавить();
	ПодчиненныеЭлементы.Свойство = "ПодчиненныеЭлементы";
	ПодчиненныеЭлементы.Значение = "ЭлементыФормы";
	
	ЗаполнитьСвойстваКнопокКомандногоИнтерфейса(ГруппаПанелиНавигации, ПодчиненныеЭлементы, ТаблицаТиповОбъектов);
	
КонецПроцедуры

Процедура ЗаписатьДанныеКоманднойПанелиФормы(ДеревоДанных, ДеревоКомандногоИнтерфейса, ТаблицаТиповОбъектов)
	
	ГруппаКоманднойПанели = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "CommandBar");
	
	Если ГруппаКоманднойПанели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоманднаяПанель = ДеревоКомандногоИнтерфейса.Строки.Добавить();
	КоманднаяПанель.Свойство = "КоманднаяПанель";
	КоманднаяПанель.Значение = "ГруппаФормы";
	
	ИмяКоманднойПанели = КоманднаяПанель.Строки.Добавить();
	ИмяКоманднойПанели.Свойство = "Имя";
	ИмяКоманднойПанели.Значение = "КоманднаяПанель";
	
	ЗаголовокКоманднойПанели = КоманднаяПанель.Строки.Добавить();
	ЗаголовокКоманднойПанели.Свойство = "Заголовок";
	ЗаголовокКоманднойПанели.Значение = "Командная панель"; // АПК:1297 - не локализуется
	
	ПодчиненныеЭлементы = КоманднаяПанель.Строки.Добавить();
	ПодчиненныеЭлементы.Свойство = "ПодчиненныеЭлементы";
	ПодчиненныеЭлементы.Значение = "ЭлементыФормы";
	
	ЗаполнитьСвойстваКнопокКомандногоИнтерфейса(ГруппаКоманднойПанели, ПодчиненныеЭлементы, ТаблицаТиповОбъектов);
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваКнопокКомандногоИнтерфейса(ДеревоДанных, ДеревоЗначений, ТаблицаТиповОбъектов)
	
	ПодчиненныеЭлементы = ДеревоДанных.Строки;
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		СтрокаСИменемГруппы = ПолучитьСтрокуДереваПоПравилуПоиска(ПодчиненныйЭлемент, "commandgroup");
		Если СтрокаСИменемГруппы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппыАнглийское = СтрокаСИменемГруппы.Значение;
		Если СтрСравнить(ИмяГруппыАнглийское, "FormCommandBarImportant") = 0 Тогда
			ИмяГруппы = "Важное";
		ИначеЕсли СтрСравнить(ИмяГруппыАнглийское, "FormCommandBarCreateBasedOn") = 0 Тогда
			ИмяГруппы = "СоздатьНаОсновании";
		ИначеЕсли СтрСравнить(ИмяГруппыАнглийское, "FormNavigationPanelImportant") = 0 Тогда
			ИмяГруппы = "Важное";
		ИначеЕсли СтрСравнить(ИмяГруппыАнглийское, "FormNavigationPanelSeeAlso") = 0 Тогда
			ИмяГруппы = "СмотриТакже";
		ИначеЕсли СтрСравнить(ИмяГруппыАнглийское, "FormNavigationPanelGoTo") = 0 Тогда
			ИмяГруппы = "Перейти";
		Иначе
			МассивПутиИмени = СтрРазделить(ИмяГруппыАнглийское, ".");
			ИмяСвойства = МассивПутиИмени[МассивПутиИмени.ВГраница()];
			ИмяГруппы = ИмяСвойства;
		КонецЕсли;
		
		ВеткаДляДобавления = ДеревоЗначений.Строки.Найти(ИмяГруппы, "Свойство");
		Если ВеткаДляДобавления = Неопределено Тогда
			ПодчиненныеЭлементыГруппы = СформироватьОписаниеГруппыКомандногоИнтерфейса(ДеревоЗначений, ИмяГруппы);
		Иначе
			ПодчиненныеЭлементыГруппы = ВеткаДляДобавления.Строки.Найти("ПодчиненныеЭлементы", "Свойство");
			Если ПодчиненныеЭлементыГруппы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСИменемКнопки = ПолучитьСтрокуДереваПоПравилуПоиска(ПодчиненныйЭлемент, "command");
		Если СтрокаСИменемКнопки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяКнопки = ПолучитьИмяКнопкиНаРусскомЯзыке(СтрокаСИменемКнопки.Значение, ТаблицаТиповОбъектов);
		
		КнопкаФормы = ПодчиненныеЭлементыГруппы.Строки.Добавить();
		КнопкаФормы.Свойство = ИмяКнопки;
		КнопкаФормы.Значение = "КнопкаФормы";
		
		ИмяКнопкиФормы = КнопкаФормы.Строки.Добавить();
		ИмяКнопкиФормы.Свойство = "Имя";
		ИмяКнопкиФормы.Значение = ИмяКнопки;
		
		СтрокаСТипомКнопки = ПолучитьСтрокуДереваПоПравилуПоиска(ПодчиненныйЭлемент, "type");
		Если СтрокаСТипомКнопки = Неопределено Тогда
			ТипКнопки = "Авто";
		Иначе
			ТипЗначения = СтрокаСТипомКнопки.Значение;
			Если ТипЗначения = "Auto" Тогда
				ТипКнопки = "Авто";
			ИначеЕсли ТипЗначения = "Added" Тогда
				ТипКнопки = "Добавлена";
			Иначе
				ТипКнопки = ТипЗначения;
			КонецЕсли;
		КонецЕсли;
		
		ТипКнопкиФормы = КнопкаФормы.Строки.Добавить();
		ТипКнопкиФормы.Свойство = "Тип";
		ТипКнопкиФормы.Значение = ТипКнопки;
		
		СтрокаАвтоположения = ПолучитьСтрокуДереваПоПравилуПоиска(ПодчиненныйЭлемент, "index");
		Автоположение = (СтрокаАвтоположения = Неопределено);
		
		АвтоположениеКнопки = КнопкаФормы.Строки.Добавить();
		АвтоположениеКнопки.Свойство = "Автоположение";
		АвтоположениеКнопки.Значение = Автоположение;
		
		СтрокаАвтовидимости = ПолучитьСтрокуДереваПоПравилуПоиска(ПодчиненныйЭлемент, "DefaultVisible");
		Если СтрокаАвтовидимости = Неопределено Тогда
			Автовидимость = Истина;
		Иначе
			Автовидимость = ПривестиСтрокуКТипу(СтрокаАвтовидимости.Значение,, "Булево");
		КонецЕсли;
		
		АвтовидимостьКнопки = КнопкаФормы.Строки.Добавить();
		АвтовидимостьКнопки.Свойство = "Автовидимость";
		АвтовидимостьКнопки.Значение = Автовидимость;
		
		ЗаполнитьРолевыеНастройки(КнопкаФормы, ПодчиненныйЭлемент, "Видимость", "Visible");
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьОписаниеГруппыКомандногоИнтерфейса(ДеревоЗначений, ИмяГруппы)
	
	СтрокаГруппы = ДеревоЗначений.Строки.Добавить();
	СтрокаГруппы.Свойство = ИмяГруппы;
	СтрокаГруппы.Значение = "ГруппаФормы";
	
	СтрокаИмяГруппы = СтрокаГруппы.Строки.Добавить();
	СтрокаИмяГруппы.Свойство = "Имя";
	СтрокаИмяГруппы.Значение = ИмяГруппы;
	
	ПодчиненныеЭлементы = СтрокаГруппы.Строки.Добавить();
	ПодчиненныеЭлементы.Свойство = "ПодчиненныеЭлементы";
	ПодчиненныеЭлементы.Значение = "ЭлементыФормы";
	
	Возврат ПодчиненныеЭлементы;
	
КонецФункции

Функция ПолучитьИмяКнопкиНаРусскомЯзыке(ПутьКомандыАнгл, ТаблицаТиповОбъектов)
	
	ПутьКоманды = ПолучитьПутьОбъектаПоИмениИзФайлаВыгрузки(ТаблицаТиповОбъектов, ПутьКомандыАнгл, "Имя");
	
	МассивПутиКоманды = Неопределено;
	// Если это стандартная команда, то переопределим имя команды на русском языке.
	Если СтрНайти(ПутьКомандыАнгл, ".StandardCommand.") > 0 Тогда
		
		МассивПутиКоманды = СтрРазделить(ПутьКоманды, ".");
		ИмяКомандыАнгл = МассивПутиКоманды[МассивПутиКоманды.ВГраница()];
		СинонимИмениКоманды = ПолучитьИмяКомандыИзСоставаКомандФормы(ИмяКомандыАнгл);
		
		МассивИмениКоманды = СтрРазделить(СинонимИмениКоманды, " ");
		ИмяКоманды = "";
		Для Каждого ЭлементМассива Из МассивИмениКоманды Цикл
			ПерваяБуква = ВРег(Лев(ЭлементМассива, 1));
			ИмяКоманды = ИмяКоманды + ПерваяБуква + Сред(ЭлементМассива, 2);
		КонецЦикла;
		
		МассивПутиКоманды[МассивПутиКоманды.ВГраница()] = ИмяКоманды;
		
	ИначеЕсли СтрНайти(ПутьКомандыАнгл, ".Command.") > 0 Тогда
		
		ПутьКоманды = СтрЗаменить(ПутьКоманды, ".Command", "");
		МассивПутиКоманды = СтрРазделить(ПутьКоманды, ".");
		
	ИначеЕсли СтрНайти(ПутьКомандыАнгл, "CommonCommand.") > 0 Тогда
		
		МассивПутиКоманды = СтрРазделить(ПутьКоманды, ".");
		
	КонецЕсли;
	
	Если МассивПутиКоманды = Неопределено Тогда
		Возврат ПутьКоманды;
	КонецЕсли;
	
	ИмяКоманды = СтрСоединить(МассивПутиКоманды);
	Если СтрНачинаетсяС(ИмяКоманды, "Общие") Тогда
		ИмяКоманды = Сред(ИмяКоманды, 6);
	КонецЕсли;
	
	Возврат ИмяКоманды;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаписьРолевойНастройкиВидимостиИнтерфейса

Процедура ЗаписатьРолевуюНастройкуВидимостиИнтерфейса(КаталогВыгрузкиXML, КореньКонфигурации) Экспорт
	
	ЗаписатьРолевуюНастройкуВидимостиКомандногоИнтерфейса(КаталогВыгрузкиXML, КореньКонфигурации);
	ЗаписатьРолевуюНастройкуВидимостиКомандногоИнтерфейсаОсновногоРаздела(КаталогВыгрузкиXML, КореньКонфигурации);
	ЗаписатьРолевуюНастройкуВидимостиРабочейОбластиНачальнойСтраницы(КаталогВыгрузкиXML, КореньКонфигурации);
	
КонецПроцедуры

#Область КомандныйИнтерфейс

Процедура ЗаписатьРолевуюНастройкуВидимостиКомандногоИнтерфейса(КаталогВыгрузкиXML, КореньКонфигурации)
	
	ФайлКомандногоИнтерфейса = КаталогВыгрузкиXML + "Ext\CommandInterface.xml";
	Если НЕ ФайлСуществует(ФайлКомандногоИнтерфейса) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлКомандногоИнтерфейса);
	
	НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСодержания.Отбор.Объект.Установить(КореньКонфигурации);
	НаборЗаписейСодержания.Отбор.Имя.Установить(Перечисления.ИдентификаторыСодержанияОбъектов.КомандныйИнтерфейс);
	
	НаборЗаписейСодержания.Прочитать();
	
	Если НаборЗаписейСодержания.Количество() = 0 Тогда
		ЗаписьСодержания = НаборЗаписейСодержания.Добавить();
		ЗаписьСодержания.Объект = КореньКонфигурации;
		ЗаписьСодержания.Имя = Перечисления.ИдентификаторыСодержанияОбъектов.КомандныйИнтерфейс;
	КонецЕсли;
	
	Значение = НаборЗаписейСодержания[0].Значение;
	
	ДеревоЗначений = Значение.Получить();
	Если ДеревоЗначений = Неопределено Тогда
		ДеревоЗначений = Новый ДеревоЗначений;
		ДеревоЗначений.Колонки.Добавить("Свойство");
		ДеревоЗначений.Колонки.Добавить("Значение");
	КонецЕсли;
	
	ЗаполнитьРолевуюНастройкуВидимостиКомандногоИнтерфейса(ДеревоЗначений, ДеревоДанных);
	ЗаполнитьПорядокПодсистемКомандногоИнтерфейса(ДеревоЗначений, ДеревоДанных);
	
	НаборЗаписейСодержания[0].Значение = ВернутьХранилищеЗначения(ДеревоЗначений);
	НаборЗаписейСодержания.Записать(Истина);
	НаборЗаписейСодержания.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьРолевуюНастройкуВидимостиКомандногоИнтерфейса(ДеревоЗначений, ДеревоДанных)
	
	ПравилоПоиска = "CommandInterface.SubsystemsVisibility";
	СтрокаДереваДанныхВидимостьПодсистем = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПравилоПоиска);
	
	Если СтрокаДереваДанныхВидимостьПодсистем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваЗначенийВидимостьПодсистем = ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, "ВидимостьПодсистем");
	
	Для Каждого СтрокаДереваДанныхПодсистема Из СтрокаДереваДанныхВидимостьПодсистем.Строки Цикл
		
		ИмяПодсистемы = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхПодсистема, "Имя");
		Если ПустаяСтрока(ИмяПодсистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		// Например, ИмяПодсистемы = "Subsystem.ТехнологияСервиса", оставляем наименование "ТехнологияСервиса".
		МассивПутиПодсистемы = СтрРазделить(ИмяПодсистемы, ".");
		Если МассивПутиПодсистемы.Количество() > 1 Тогда
			ИмяПодсистемы = МассивПутиПодсистемы[1];
		КонецЕсли;
		
		СтрокаДереваЗначенийПодсистема = ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийВидимостьПодсистем,
			ИмяПодсистемы, "Подсистема");
		
		ЗаполнитьРолевыеНастройки(СтрокаДереваЗначенийПодсистема, СтрокаДереваДанныхПодсистема, "Видимость");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокПодсистемКомандногоИнтерфейса(ДеревоКомандногоИнтерфейса, ДеревоДанных)
	
	ПравилоПоиска = "CommandInterface.SubsystemsOrder";
	СтрокаДереваДанныхПорядокПодсистем = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПравилоПоиска);
	
	Если СтрокаДереваДанныхПорядокПодсистем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваКомандногоИнтерфейсаПорядокПодсистем = ДобавитьСтрокуВДеревоЗначений(ДеревоКомандногоИнтерфейса, "ПорядокПодсистем");
	
	Для Каждого СтрокаДереваДанныхПодсистема Из СтрокаДереваДанныхПорядокПодсистем.Строки Цикл
		
		ИмяПодсистемы = СтрокаДереваДанныхПодсистема.Значение;
		Если ПустаяСтрока(ИмяПодсистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		// Например, ИмяПодсистемы = "Subsystem.ТехнологияСервиса", оставляем наименование "ТехнологияСервиса".
		МассивПутиПодсистемы = СтрРазделить(ИмяПодсистемы, ".");
		Если МассивПутиПодсистемы.Количество() > 1 Тогда
			ИмяПодсистемы = МассивПутиПодсистемы[1];
		КонецЕсли;
		
		ДобавитьСтрокуВДеревоЗначений(СтрокаДереваКомандногоИнтерфейсаПорядокПодсистем, ИмяПодсистемы, "Подсистема");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КомандныйИнтерфейсОсновногоРаздела

Процедура ЗаписатьРолевуюНастройкуВидимостиКомандногоИнтерфейсаОсновногоРаздела(КаталогВыгрузкиXML, КореньКонфигурации)
	
	ФайлКомандногоИнтерфейсаОсновногоРаздела = КаталогВыгрузкиXML + "Ext\MainSectionCommandInterface.xml";
	Если НЕ ФайлСуществует(ФайлКомандногоИнтерфейсаОсновногоРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлКомандногоИнтерфейсаОсновногоРаздела);
	
	Идентификатор = Перечисления.ИдентификаторыСодержанияОбъектов.КомандныйИнтерфейсОсновногоРаздела;
	
	НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСодержания.Отбор.Объект.Установить(КореньКонфигурации);
	НаборЗаписейСодержания.Отбор.Имя.Установить(Идентификатор);
	
	НаборЗаписейСодержания.Прочитать();
	
	Если НаборЗаписейСодержания.Количество() = 0 Тогда
		ЗаписьСодержания = НаборЗаписейСодержания.Добавить();
		ЗаписьСодержания.Объект = КореньКонфигурации;
		ЗаписьСодержания.Имя = Идентификатор;
	КонецЕсли;
	
	Значение = НаборЗаписейСодержания[0].Значение;
	
	ДеревоЗначений = Значение.Получить();
	Если ДеревоЗначений = Неопределено Тогда
		ДеревоЗначений = Новый ДеревоЗначений;
		ДеревоЗначений.Колонки.Добавить("Свойство");
		ДеревоЗначений.Колонки.Добавить("Значение");
	КонецЕсли;
	
	ЗаполнитьРолевуюНастройкуВидимостиКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных);
	ЗаполнитьРасположениеКомандКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных);
	ЗаполнитьПорядокКомандКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных);
	ЗаполнитьПорядокГруппКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных);
	
	НаборЗаписейСодержания[0].Значение = ВернутьХранилищеЗначения(ДеревоЗначений);
	НаборЗаписейСодержания.Записать(Истина);
	НаборЗаписейСодержания.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьРолевуюНастройкуВидимостиКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных)
	
	ПравилоПоиска = "CommandInterface.CommandsVisibility";
	СтрокаДереваДанныхВидимостьКоманд = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПравилоПоиска);
	
	Если СтрокаДереваДанныхВидимостьКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	ТаблицаТиповКоманд = ПолучитьТаблицуТиповКоманд();
	
	СтрокаДереваЗначенийВидимостьКоманд = ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, "ВидимостьКоманд");
	
	Для Каждого СтрокаДереваДанныхКоманда Из СтрокаДереваДанныхВидимостьКоманд.Строки Цикл
		
		ПутьКомандыАнгл = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхКоманда, "Имя");
		Если ПустаяСтрока(ПутьКомандыАнгл) Тогда
			Продолжить;
		КонецЕсли;
		
		// Переопределяем имя команды на русском языке.
		ПутьКоманды = ПолучитьПутьКомандыНаРусскомЯзыке(ПутьКомандыАнгл, ТаблицаТиповОбъектов, ТаблицаТиповКоманд);
		
		СтрокаДереваЗначенийКоманда = ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийВидимостьКоманд, ПутьКоманды, "Команда");
		
		ЗаполнитьРолевыеНастройки(СтрокаДереваЗначенийКоманда, СтрокаДереваДанныхКоманда, "Видимость");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасположениеКомандКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных)
	
	ПравилоПоиска = "CommandInterface.CommandsPlacement";
	СтрокаДереваДанныхРасположениеКоманд = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПравилоПоиска);
	
	Если СтрокаДереваДанныхРасположениеКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	ТаблицаТиповКоманд = ПолучитьТаблицуТиповКоманд();
	
	СтрокаДереваЗначенийРасположениеКоманд = ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, "РасположениеКоманд");
	
	Для Каждого СтрокаДереваДанныхКоманда Из СтрокаДереваДанныхРасположениеКоманд.Строки Цикл
		
		ПутьКомандыАнгл = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхКоманда, "Имя");
		Если ПустаяСтрока(ПутьКомандыАнгл) Тогда
			Продолжить;
		КонецЕсли;
		
		// Переопределяем имя команды на русском языке.
		ПутьКоманды = ПолучитьПутьКомандыНаРусскомЯзыке(ПутьКомандыАнгл, ТаблицаТиповОбъектов, ТаблицаТиповКоманд);
		
		СтрокаДереваЗначенийКоманда = ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийРасположениеКоманд, ПутьКоманды, "Команда");
		
		ГруппаКоманд = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхКоманда, "ГруппаКоманд");
		ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийКоманда, "ГруппаКоманд", ГруппаКоманд);
		
		Расположение = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхКоманда, "Расположение");
		ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийКоманда, "Расположение", Расположение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокКомандКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных)
	
	ПравилоПоиска = "CommandInterface.CommandsOrder";
	СтрокаДереваДанныхПорядокКоманд = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПравилоПоиска);
	
	Если СтрокаДереваДанныхПорядокКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	ТаблицаТиповКоманд = ПолучитьТаблицуТиповКоманд();
	
	СтрокаДереваЗначенийПорядокКоманд = ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, "ПорядокКоманд");
	
	Для Каждого СтрокаДереваДанныхКоманда Из СтрокаДереваДанныхПорядокКоманд.Строки Цикл
		
		ПутьКомандыАнгл = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхКоманда, "Имя");
		Если ПустаяСтрока(ПутьКомандыАнгл) Тогда
			Продолжить;
		КонецЕсли;
		
		// Переопределяем имя команды на русском языке.
		ПутьКоманды = ПолучитьПутьКомандыНаРусскомЯзыке(ПутьКомандыАнгл, ТаблицаТиповОбъектов, ТаблицаТиповКоманд);
		
		СтрокаДереваЗначенийКоманда = ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийПорядокКоманд, ПутьКоманды, "Команда");
		
		ГруппаКоманд = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхКоманда, "ГруппаКоманд");
		ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийКоманда, "ГруппаКоманд", ГруппаКоманд);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокГруппКомандногоИнтерфейсаОсновногоРаздела(ДеревоЗначений, ДеревоДанных)
	
	ПравилоПоиска = "CommandInterface.GroupsOrder";
	СтрокаДереваДанныхПорядокГрупп = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПравилоПоиска);
	
	Если СтрокаДереваДанныхПорядокГрупп = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваЗначенийПорядокГрупп = ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, "ПорядокГрупп");
	
	Для Каждого СтрокаДереваДанныхГруппа Из СтрокаДереваДанныхПорядокГрупп.Строки Цикл
		
		Группа = СтрокаДереваДанныхГруппа.Значение;
		Если ПустаяСтрока(Группа) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваЗначенийГруппа = ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийПорядокГрупп, Группа, "Группа");
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПутьКомандыНаРусскомЯзыке(ПутьКомандыАнгл, ТаблицаТиповОбъектов, ТаблицаТиповКоманд)
	
	ПутьКоманды = ПолучитьПутьОбъектаПоИмениИзФайлаВыгрузки(ТаблицаТиповОбъектов, ПутьКомандыАнгл);
	
	// Если это стандартная команда, то переопределим имя команды на русском языке.
	Если СтрНайти(ПутьКомандыАнгл, ".StandardCommand.") > 0 Тогда
		МассивПутиКоманды = СтрРазделить(ПутьКоманды, ".");
		
		ИмяКоманды = МассивПутиКоманды[МассивПутиКоманды.ВГраница()];
		ИмяКоманды = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповКоманд, ИмяКоманды,, "Имя");
		
		МассивПутиКоманды[МассивПутиКоманды.ВГраница()] = ИмяКоманды;
		
		ПутьКоманды = СтрСоединить(МассивПутиКоманды, ".");
	КонецЕсли;
	
	Возврат ПутьКоманды;
	
КонецФункции

#КонецОбласти

#Область РабочаяОбластьНачальнойСтраницы

Процедура ЗаписатьРолевуюНастройкуВидимостиРабочейОбластиНачальнойСтраницы(КаталогВыгрузкиXML, КореньКонфигурации)
	
	ФайлРабочейОбластиНачальнойСтраницы = КаталогВыгрузкиXML + "Ext\HomePageWorkArea.xml";
	Если НЕ ФайлСуществует(ФайлРабочейОбластиНачальнойСтраницы) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлРабочейОбластиНачальнойСтраницы);
	
	Идентификатор = Перечисления.ИдентификаторыСодержанияОбъектов.РабочаяОбластьНачальнойСтраницы;
	
	НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСодержания.Отбор.Объект.Установить(КореньКонфигурации);
	НаборЗаписейСодержания.Отбор.Имя.Установить(Идентификатор);
	
	НаборЗаписейСодержания.Прочитать();
	
	Если НаборЗаписейСодержания.Количество() = 0 Тогда
		ЗаписьСодержания = НаборЗаписейСодержания.Добавить();
		ЗаписьСодержания.Объект = КореньКонфигурации;
		ЗаписьСодержания.Имя = Идентификатор;
	КонецЕсли;
	
	Значение = НаборЗаписейСодержания[0].Значение;
	
	ДеревоЗначений = Значение.Получить();
	Если ДеревоЗначений = Неопределено Тогда
		ДеревоЗначений = Новый ДеревоЗначений;
		ДеревоЗначений.Колонки.Добавить("Свойство");
		ДеревоЗначений.Колонки.Добавить("Значение");
	КонецЕсли;
	
	ЗаполнитьРолевуюНастройкуВидимостиРабочейОбластиНачальнойСтраницы(ДеревоЗначений, ДеревоДанных);
	
	НаборЗаписейСодержания[0].Значение = ВернутьХранилищеЗначения(ДеревоЗначений);
	НаборЗаписейСодержания.Записать(Истина);
	НаборЗаписейСодержания.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьРолевуюНастройкуВидимостиРабочейОбластиНачальнойСтраницы(ДеревоЗначений, ДеревоДанных)
	
	СтрокаДереваДанных = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "HomePageWorkArea");
	Если СтрокаДереваДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонНачальнойСтраницыАнгл = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанных, "ШаблонНачальнойСтраницы");
	Если ПустаяСтрока(ШаблонНачальнойСтраницыАнгл) Тогда
		// Не удалось определить количество колонок рабочей страницы, выходим.
		Возврат;
	КонецЕсли;
	
	ШаблонНачальнойСтраницы = ПолучитьШаблонНачальнойСтраницыНаРусскомЯзыке(ШаблонНачальнойСтраницыАнгл);
	
	ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, "ШаблонНачальнойСтраницы", ШаблонНачальнойСтраницы);
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("ИмяАнгл");
	ТаблицаКолонок.Колонки.Добавить("Имя");
	
	Если ШаблонНачальнойСтраницы = "ОднаКолонка" Тогда
		НоваяКолонка = ТаблицаКолонок.Добавить();
		НоваяКолонка.ИмяАнгл = "Column";
		НоваяКолонка.Имя = "ОднаКолонка";
	Иначе
		НоваяКолонка = ТаблицаКолонок.Добавить();
		НоваяКолонка.ИмяАнгл = "LeftColumn";
		НоваяКолонка.Имя = "ЛеваяКолонка";
		
		НоваяКолонка = ТаблицаКолонок.Добавить();
		НоваяКолонка.ИмяАнгл = "RightColumn";
		НоваяКолонка.Имя = "ПраваяКолонка";
	КонецЕсли;
	
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	
	Для Каждого Колонка Из ТаблицаКолонок Цикл
		
		СтрокаДереваДанныхКолонка = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДереваДанных, Колонка.ИмяАнгл);
		Если СтрокаДереваДанныхКолонка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваЗначенийКолонка = ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, Колонка.Имя);
		
		Для Каждого СтрокаДереваДанныхЭлемент Из СтрокаДереваДанныхКолонка.Строки Цикл
			
			ПутьФормыАнгл = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхЭлемент, "Форма");
			Если ПустаяСтрока(ПутьФормыАнгл) Тогда
				Продолжить;
			КонецЕсли;
			
			ПутьФормы = ПолучитьПутьОбъектаПоИмениИзФайлаВыгрузки(ТаблицаТиповОбъектов, ПутьФормыАнгл);
			СтрокаДереваЗначенийФорма = ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийКолонка, ПутьФормы, "Форма");
			
			Высота = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанныхЭлемент, "Высота");
			ДобавитьСтрокуВДеревоЗначений(СтрокаДереваЗначенийФорма, "Высота", Высота);
			
			ЗаполнитьРолевыеНастройки(СтрокаДереваЗначенийФорма, СтрокаДереваДанныхЭлемент, "Видимость");
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОтображениеКомандногоИнтерфейсаОсновногоРазделаАнгл = ПолучитьЗначениеСвойстваАтрибута(СтрокаДереваДанных,,
		"MACommandInterfaceDisplays");
	
	ОтображениеКомандногоИнтерфейсаОсновногоРаздела =
		ПолучитьОтображениеКомандногоИнтерфейсаОсновногоРазделаНаРусскомЯзыке(ОтображениеКомандногоИнтерфейсаОсновногоРазделаАнгл);
	
	ДобавитьСтрокуВДеревоЗначений(ДеревоЗначений, "ОтображениеКомандногоИнтерфейсаОсновногоРаздела",
		ОтображениеКомандногоИнтерфейсаОсновногоРаздела);
	
КонецПроцедуры

Функция ПолучитьШаблонНачальнойСтраницыНаРусскомЯзыке(ШаблонНачальнойСтраницыАнгл)
	
	ШаблонНачальнойСтраницы = "";
	Если ШаблонНачальнойСтраницыАнгл = "OneColumn" Тогда
		ШаблонНачальнойСтраницы = "ОднаКолонка";
	ИначеЕсли ШаблонНачальнойСтраницыАнгл = "TwoColumnsEqualWidth" Тогда
		ШаблонНачальнойСтраницы = "ДвеКолонкиОдинаковойШирины";
	ИначеЕсли ШаблонНачальнойСтраницыАнгл = "TwoColumnsVariableWidth" Тогда
		ШаблонНачальнойСтраницы = "ДвеКолонкиРазнойШирины";
	КонецЕсли;
	
	Возврат ШаблонНачальнойСтраницы;
	
КонецФункции

Функция ПолучитьОтображениеКомандногоИнтерфейсаОсновногоРазделаНаРусскомЯзыке(ОтображениеКомандногоИнтерфейсаОсновногоРазделаАнгл)
	
	ОтображениеКомандногоИнтерфейсаОсновногоРаздела = "";
	Если ПустаяСтрока(ОтображениеКомандногоИнтерфейсаОсновногоРазделаАнгл) Тогда
		ОтображениеКомандногоИнтерфейсаОсновногоРаздела = "НеИспользовать";
	ИначеЕсли ОтображениеКомандногоИнтерфейсаОсновногоРазделаАнгл = "Top" Тогда
		ОтображениеКомандногоИнтерфейсаОсновногоРаздела = "Сверху";
	ИначеЕсли ОтображениеКомандногоИнтерфейсаОсновногоРазделаАнгл = "Bottom" Тогда
		ОтображениеКомандногоИнтерфейсаОсновногоРаздела = "Снизу";
	КонецЕсли;
	
	Возврат ОтображениеКомандногоИнтерфейсаОсновногоРаздела;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеСведенийОМакетах

// Функция возвращает дерево значений, в котором содержатся данные о макетах проверяемой конфигурации.
//
Функция ПолучитьСведенияОМакетах(СведенияОКонфигурации, ТаблицаМакетов, ТаблицаТиповОбъектов,
	Расширение = Неопределено) Экспорт
	
	ИмяРасширения = ?(ЗначениеЗаполнено(Расширение), Расширение.Наименование, "");
	КаталогВыгрузкиФайлов = СведенияОКонфигурации.КаталогВыгрузкиФайлов;
	УровеньПредупреждение = УровеньЖурналаРегистрации.Предупреждение;
	
	СвойстваМакетов = Новый ТаблицаЗначений;
	СвойстваМакетов.Колонки.Добавить("Номер");
	СвойстваМакетов.Колонки.Добавить("Свойство");
	СвойстваМакетов.Колонки.Добавить("Значение");
	
	МакетСвойств = ПолучитьОбщийМакет("СвойстваМакетов");
	ТаблицаСвойствМакетов = СформироватьТаблицуЗначенийИзМакета(МакетСвойств);
	
	КоличествоМакетов = ТаблицаМакетов.Количество();
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка макетов (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	СоответствиеСистемныхПеречислений = Новый Соответствие;
	КаталогВыгрузкиМакетов = Неопределено;
	
	Счетчик = 0;
	ПроцентОбработанныхОбъектов = 0;
	Для Каждого ТекущийМакет Из ТаблицаМакетов Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НомерМакета = ТекущийМакет.Номер;
		ПутьМакета = ТекущийМакет.Путь;
		НаименованиеМакета = ТекущийМакет.Наименование;
		
		Счетчик = Счетчик + 1;
		
		#Если Клиент Тогда
		ТекущийПроцентОбъектов = Цел(100 * Счетчик / КоличествоМакетов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		Если ТекущийМакет.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМакет Тогда
			КаталогМакета = СтрШаблон("%1CommonTemplates\", КаталогВыгрузкиФайлов);
		Иначе
			РодительТипОбъекта = ТекущийМакет.ТипОбъектаМакета;
			ТипРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, РодительТипОбъекта, "ИмяМнФормы",
				"ИмяАнглМнФормы");
			КаталогМакета = СтрШаблон("%1%2\%3\Templates\", КаталогВыгрузкиФайлов, ТипРодителя,
				ТекущийМакет.ИмяОбъектаМакета);
		КонецЕсли;
		
		ИмяЗаглавногоФайла = СтрШаблон("%1.xml", НаименованиеМакета);
		ПутьЗаглавногоФайла = КаталогМакета + ИмяЗаглавногоФайла;
		
		Если НЕ ФайлСуществует(ПутьЗаглавногоФайла) Тогда
			ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Не существует файла макета: ""%1""'"), ПутьЗаглавногоФайла);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
			Продолжить;
		КонецЕсли;
		
		ТипМакета = ПолучитьТипМакета(ПутьЗаглавногоФайла);
		
		Если ПустаяСтрока(ТипМакета) Тогда
			ИмяСобытия = НСтр("ru='Ошибка определения типа макета'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Не удалось определить тип макета ""%1""'"), ПутьМакета);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
			Продолжить;
		КонецЕсли;
		
		// Макеты с типом "Табличный документ" обрабатываются с помощью выгрузки макетов конфигурации в файлы
		// и последующем чтении файлов с форматом "mxl". По сравнению с обработкой макетов из xml файлов,
		// данный способ позволяет существенно сократить время обработки табличных документов.
		Если СтрСравнить(ТипМакета, "SpreadsheetDocument") = 0 Тогда
			
			Если КаталогВыгрузкиМакетов = Неопределено Тогда
				КаталогВыгрузкиМакетов = ПолучитьКаталогВременныхФайлов();
				Конфигурация = СведенияОКонфигурации.Конфигурация;
				КаталогКонфигурации = СведенияОКонфигурации.КаталогКонфигурации;
				Пользователь = СведенияОКонфигурации.Пользователь;
				Пароль = СведенияОКонфигурации.Пароль;
				Статус = ДоступККонфигуратору.ВыгрузитьМакеты(Конфигурация, КаталогКонфигурации, Пользователь, Пароль,
					КаталогВыгрузкиМакетов, ИмяРасширения);
				
				Если НЕ ПустаяСтрока(Статус) Тогда
					ФайлУдалить(КаталогВыгрузкиМакетов);
					
					ИмяСобытия = НСтр("ru='Ошибка выгрузки макетов в mxl-файлы'", Метаданные.ОсновнойЯзык.КодЯзыка);
					ТекстПредупреждения = НСтр("ru='Выгрузка макетов конфигурации завершилась с ошибкой:%1%2'");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущийМакет.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМакет Тогда
				НачалоИмени = "ОбщийМакет.";
			Иначе
				ТипРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, РодительТипОбъекта, "ИмяМнФормы",
				"Имя");
				НачалоИмени = СтрШаблон("%1.%2.Макет.", ТипРодителя, ТекущийМакет.ИмяОбъектаМакета);
			КонецЕсли;
			ПутьМакета = СтрШаблон("%1%2%3.Макет.mxl", КаталогВыгрузкиМакетов, НачалоИмени, НаименованиеМакета);
			ДеревоСвойств = ПолучитьСвойстваМакетаТабличныйДокумент(ПутьМакета, ТаблицаСвойствМакетов,
				СоответствиеСистемныхПеречислений);
		Иначе
			
			РасширениеФайла = ПолучитьРасширенияФайлаМакета(ТипМакета);
			ОсновнойЯзык = ПолучитьОсновнойЯзыкКонфигурации(СведенияОКонфигурации, КаталогВыгрузкиФайлов);
			
			Если СтрСравнить(ТипМакета, "HTMLDocument") = 0 Тогда
				ПутьФайлаСДанными = СтрШаблон("%1%2\Ext\Template\%3.%4", КаталогМакета, НаименованиеМакета, ОсновнойЯзык, РасширениеФайла);
			Иначе
				ПутьФайлаСДанными = СтрШаблон("%1%2\Ext\Template.%3", КаталогМакета, НаименованиеМакета, РасширениеФайла);
			КонецЕсли;
			
			Если НЕ ФайлСуществует(ПутьФайлаСДанными) Тогда
				ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
				ТекстПредупреждения = СтрШаблон(НСтр("ru='Не существует файла макета: ""%1""'"), ПутьМакета);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
				Продолжить;
			КонецЕсли;
			
			ДеревоСвойств = ПолучитьДеревоСоЗначениямиМакета(ПутьФайлаСДанными, РасширениеФайла, ТаблицаСвойствМакетов,
				ТипМакета, СведенияОКонфигурации);
			
		КонецЕсли;
		
		СтрокаСвойства = СвойстваМакетов.Добавить();
		СтрокаСвойства.Номер = НомерМакета;
		СтрокаСвойства.Свойство = "Макет";
		СтрокаСвойства.Значение = ВернутьХранилищеЗначения(ДеревоСвойств);
		
	КонецЦикла;
	
	Если КаталогВыгрузкиМакетов <> Неопределено Тогда
		ФайлУдалить(КаталогВыгрузкиМакетов);
	КонецЕсли;
	
	Возврат СвойстваМакетов;
	
КонецФункции

Функция ПолучитьТипМакета(ПутьКФайлуXML)
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ПутьКФайлуXML);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяНРег", НРег("TemplateType"));
	МассивСтрок = ДеревоДанных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат МассивСтрок[0].Значение;
	
КонецФункции

Функция ПолучитьРасширенияФайлаМакета(ТипМакета)
	
	Если СтрСравнить(ТипМакета, "TextDocument") = 0 Тогда
		Возврат "txt";
	ИначеЕсли СтрСравнить(ТипМакета, "ActiveDocument") = 0
		ИЛИ СтрСравнить(ТипМакета, "BinaryData") = 0
		ИЛИ СтрСравнить(ТипМакета, "AddIn") = 0 Тогда
		Возврат "bin";
	ИначеЕсли СтрСравнить(ТипМакета, "HTMLDocument") = 0 Тогда
		Возврат "html";
	КонецЕсли;
	
	Возврат "xml";
	
КонецФункции

Функция ПолучитьСвойстваМакетаТабличныйДокумент(ПутьМакета, ТаблицаСвойствМакетов, СоответствиеСистемныхПеречислений)
	
	ДеревоЗначенийМакета = Новый ДеревоЗначений;
	ДеревоЗначенийМакета.Колонки.Добавить("Свойство");
	ДеревоЗначенийМакета.Колонки.Добавить("Значение");
	
	Макет = Новый ТабличныйДокумент();
	Попытка
		Макет.Прочитать(ПутьМакета);
	Исключение
		Возврат ДеревоЗначенийМакета;
	КонецПопытки;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипМакетаАнглийский", "SpreadsheetDocument");
	
	МассивНайденныхСтрок = ТаблицаСвойствМакетов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаТаблицыСвойств Из МассивНайденныхСтрок Цикл
		
		СвойствоМакета = СтрокаТаблицыСвойств.СвойствоРусский;
		
		Если ПустаяСтрока(СвойствоМакета) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДеревоЗначенийМакета.Строки.Добавить();
		НоваяСтрока.Свойство = СвойствоМакета;
		Значение = ПолучитьСвойствоМакетаТабличногоДокумента(Макет, СвойствоМакета);
		НоваяСтрока.Значение = Значение;
		
	КонецЦикла;
	
	ЗаполнитьДополнительныеСвойстваМакетаТабличныйДокумент(Макет, ДеревоЗначенийМакета);
	
	Возврат ДеревоЗначенийМакета;
	
КонецФункции

Функция ПолучитьСвойствоМакетаТабличногоДокумента(МакетДоступа, ИмяСвойства)
	
	Попытка
		
		Значение = МакетДоступа[ИмяСвойства];
		
		ТипЗначения = ТипЗнч(Значение);
		Если (ТипЗначения <> Тип("Число"))
		   И (ТипЗначения <> Тип("Строка"))
		   И (ТипЗначения <> Тип("Булево"))
		   И (ТипЗначения <> Тип("СписокЗначений"))
		   И (ТипЗначения <> Тип("Дата")) Тогда
			Значение = Строка(Значение);
		КонецЕсли;
		
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьДеревоСоЗначениямиМакета(ПутьКФайлуСДанными, РасширенияФайлаСДанными, ТаблицаСвойствМакетов, ТипМакета,
	СведенияОКонфигурации)
	
	ДеревоЗначенийМакета = Новый ДеревоЗначений;
	ДеревоЗначенийМакета.Колонки.Добавить("Свойство");
	ДеревоЗначенийМакета.Колонки.Добавить("Значение");
	
	ДеревоДанных = Неопределено;
	Если СтрСравнить(РасширенияФайлаСДанными, "xml") = 0 Тогда
		ДеревоДанных = XML_РазобратьФайлВыгрузки(ПутьКФайлуСДанными);
	КонецЕсли;
	
	ЗаполнитьОсновныеСвойстваМакета(ДеревоДанных, ДеревоЗначенийМакета, ТаблицаСвойствМакетов, ТипМакета,
		СведенияОКонфигурации.СоответствиеСистемныхПеречислений);
	
	Если СтрСравнить(ТипМакета, "TextDocument") = 0 Тогда
		ЗаполнитьДополнительныеСвойстваМакетаТекстовыйДокумент(ПутьКФайлуСДанными, ДеревоЗначенийМакета);
	ИначеЕсли СтрСравнить(ТипМакета, "BinaryData") = 0 ИЛИ СтрСравнить(ТипМакета, "AddIn") = 0 Тогда
		ЗаполнитьДополнительныеСвойстваМакетаДвоичныеДанные(ПутьКФайлуСДанными, ДеревоЗначенийМакета);
	ИначеЕсли СтрСравнить(ТипМакета, "HTMLDocument") = 0 Тогда
		ЗаполнитьДополнительныеСвойстваМакетаHTMLДокумент(ПутьКФайлуСДанными, ДеревоЗначенийМакета);
	ИначеЕсли СтрСравнить(ТипМакета, "DataCompositionSchema") = 0 Тогда
		ДанныеМакета = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, "datacompositionschema");
		ЗаполнитьДополнительныеСвойстваМакетаСхемаКомпоновкиДанных(ДанныеМакета, ДеревоЗначенийМакета,
			СведенияОКонфигурации);
	КонецЕсли;
	
	Возврат ДеревоЗначенийМакета;
	
КонецФункции

Процедура ЗаполнитьОсновныеСвойстваМакета(ДеревоДанных, ДеревоЗначенийМакета, ТаблицаСвойствМакетов, ТипМакета,
	СоответствиеСистемныхПеречислений)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипМакетаАнглийский", ТипМакета);
	
	МассивНайденныхСтрок = ТаблицаСвойствМакетов.НайтиСтроки(СтруктураОтбора);
	
	Если МассивНайденныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		ИмяКорневогоУзла = МассивНайденныхСтрок[0].ИмяКорневогоУзла;
		СтрокаСДанными = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ИмяКорневогоУзла);
		Если СтрокаСДанными = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыСвойств Из МассивНайденныхСтрок Цикл
		
		Если ПустаяСтрока(СтрокаТаблицыСвойств.СвойствоРусский) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДеревоЗначенийМакета.Строки.Добавить();
		НоваяСтрока.Свойство = СтрокаТаблицыСвойств.СвойствоРусский;
		
		Если ДеревоДанных = Неопределено Тогда
			НоваяСтрока.Значение = СтрокаТаблицыСвойств.ЗначениеПоУмолчанию;
		Иначе
			СтрокаДанных = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСДанными, СтрокаТаблицыСвойств.СвойствоАнглийский);
			
			Если СтрокаДанных = Неопределено Тогда
				НоваяСтрока.Значение = СтрокаТаблицыСвойств.ЗначениеПоУмолчанию;
			Иначе
				НоваяСтрока.Значение = ПривестиСтрокуКТипу(СтрокаДанных.Значение, СоответствиеСистемныхПеречислений,
					СтрокаТаблицыСвойств.ТипЗначения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает таблицу значений или дерево значений из макета.
// Параметры:
//   Макет - макет, в котором находится таблица
//   ТаблицаЗначений - флаг, если Истина, то создает таблицу значений, иначе дерево значений
// Возвращаемое значение:
//   Таблица значений или дерево значений.
Функция СформироватьТаблицуЗначенийИзМакета(Макет, ТаблицаЗначений = Истина) Экспорт
	
	Результат = Новый (Тип(?(ТаблицаЗначений, "ТаблицаЗначений", "ДеревоЗначений")));
	
	// Создание списка колонок.
	СписокКолонок = Новый СписокЗначений;
	Для Счет = 1 По Макет.ШиринаТаблицы Цикл
		
		ЗаголовокКолонки = Макет.Область(1, Счет).Текст;
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокКолонки) Тогда
			Прервать;
		КонецЕсли;
		
		ТипЗначения = Макет.Область(1, Счет).ПараметрРасшифровки;
		СписокКолонок.Добавить(ЗаголовокКолонки);
		Если Результат.Колонки.Найти(ЗаголовокКолонки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ТипЗначения) Тогда
			Результат.Колонки.Добавить(ЗаголовокКолонки);
		Иначе
			Результат.Колонки.Добавить(ЗаголовокКолонки, ПолучитьОписаниеТипа(ТипЗначения));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.Колонки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатСтроки = ?(ТипЗнч(Результат) = Тип("ТаблицаЗначений"), Результат, Результат.Строки);
	
	// Получение самой таблицы
	Для Счет = 2 По Макет.ВысотаТаблицы Цикл
		ТекущаяСтрока = РезультатСтроки.Добавить();
		Для Каждого ЭлементСписка Из СписокКолонок Цикл
			
			ТекущаяОбласть = Макет.Область(Счет, СписокКолонок.Индекс(ЭлементСписка) + 1);
			ТекстОбласти = ТекущаяОбласть.Текст;
			
			ТипЗначения = ТекущаяОбласть.ПараметрРасшифровки;
			Если ЗначениеЗаполнено(ТипЗначения) Тогда
				ТекстОбласти = ПривестиЗначение(ТекстОбласти, ПолучитьОписаниеТипа(ТипЗначения));
			КонецЕсли;
			
			ТекущаяСтрока[ЭлементСписка.Значение] = ТекстОбласти;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеТипа(ПараметрТип)
	
	Если ПустаяСтрока(ПараметрТип) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрТип) = Тип("Тип") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ПараметрТип);
	Иначе
		
		МассивТипов = СтрРазделить(ПараметрТип, ",", Ложь);
		
		Для Счет = 0 По МассивТипов.Количество() - 1 Цикл
			МассивТипов[Счет] = Тип(МассивТипов[Счет]);
		КонецЦикла;
	КонецЕсли;
	
	КвалификаторЧисла = Новый КвалификаторыЧисла();
	КвалификаторСтроки = Новый КвалификаторыСтроки();
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторЧисла, КвалификаторСтроки, КвалификаторДаты);
	
КонецФункции

Функция ПривестиЗначение(Значение, ПараметрОписаниеТипа)
	
	Если ПараметрОписаниеТипа = ПолучитьОписаниеТипа("ТипИзмеренияПостроителяОтчета") Тогда
		Попытка
			Возврат ТипИзмеренияПостроителяОтчета[Значение];
		Исключение;
		КонецПопытки;
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
	Если ПараметрОписаниеТипа = ПолучитьОписаниеТипа("ОписаниеТипов") Тогда
		Попытка
			Возврат ПолучитьОписаниеТипа(Значение);
		Исключение
		КонецПопытки;
		Возврат "";
	КонецЕсли;
	
	Если ПараметрОписаниеТипа = ПолучитьОписаниеТипа("ГоризонтальноеПоложение") Тогда
		Попытка
			Возврат ГоризонтальноеПоложение[Значение];
		Исключение
		КонецПопытки;
		Возврат ГоризонтальноеПоложение.Авто;
	КонецЕсли;
	
	Попытка
		Возврат ПараметрОписаниеТипа.ПривестиЗначение(Значение);
	Исключение
	КонецПопытки;
	Возврат "";
	
КонецФункции

Функция ПривестиСтрокуКТипу(ОбрабатываемаяСтрока, СоответствиеСистемныхПеречислений = Неопределено,
	ТипЗначения = "Строка", ПолучатьСиноним = Ложь)
	
	Если СтрСравнить(ТипЗначения, "Строка") = 0 Тогда
		Значение = ПолучитьТипЗначения(ОбрабатываемаяСтрока);
		Если ПолучатьСиноним Тогда
			Значение = ПолучитьСинонимПоИмени(Значение);
		КонецЕсли;
		Возврат Значение;
	ИначеЕсли СтрСравнить(ТипЗначения, "Число") = 0 Тогда
		ЭтоЧисло(ОбрабатываемаяСтрока);
		Возврат ОбрабатываемаяСтрока;
	ИначеЕсли СтрСравнить(ТипЗначения, "Булево") = 0 Тогда
		ЭтоБулево(ОбрабатываемаяСтрока);
		Возврат ОбрабатываемаяСтрока;
	ИначеЕсли СтрСравнить(ТипЗначения, "Дата") = 0 Тогда
		Попытка
			Значение = Дата(ОбрабатываемаяСтрока);
			Возврат Значение;
		Исключение
			Возврат ОбрабатываемаяСтрока;
		КонецПопытки;
	Иначе
		Если СоответствиеСистемныхПеречислений = Неопределено Тогда
			Возврат ОбрабатываемаяСтрока;
		КонецЕсли;
		
		ИскомоеЗначение = СтрШаблон("%1.%2", ТипЗначения, ОбрабатываемаяСтрока);
		НайденноеЗначение = СоответствиеСистемныхПеречислений[ИскомоеЗначение];
		
		Если НайденноеЗначение = Неопределено Тогда
			Попытка
				НайденноеЗначение = Строка(Вычислить(ИскомоеЗначение));
			Исключение
				НайденноеЗначение = ОбрабатываемаяСтрока;
			КонецПопытки;
			СоответствиеСистемныхПеречислений.Вставить(ИскомоеЗначение, НайденноеЗначение);
		КонецЕсли;
		
		Возврат НайденноеЗначение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипЗначения(ОбрабатываемаяСтрока)
	
	Если СтрСравнить("Desc", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "По убыванию"; // АПК:1297 - не локализуется
	КонецЕсли;
	
	Если СтрСравнить("Asc", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "По возрастанию"; // АПК:1297 - не локализуется
	КонецЕсли;
	
	Если СтрСравнить("Always", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "Всегда";
	КонецЕсли;
	
	Если СтрСравнить("Auto", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "Авто";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:CatalogRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "СправочникСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:ChartOfAccountsRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ПланСчетовСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:ChartOfCharacteristicTypesRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ПланВидовХарактеристикСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:TaskRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ЗадачаСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:ChartOfCalculationTypesRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ПланВидовРасчетаСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:EnumRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ПеречислениеСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:DocumentRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ДокументСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:AnyRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ЛюбаяСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:BusinessProcessRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "БизнесПроцессСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:BusinessProcessRoutePointRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ТочкаМаршрутаБизнесПроцессаСсылка";
	КонецЕсли;
	
	Если СтрСравнить("d5p1:ExchangePlanRef", ОбрабатываемаяСтрока) = 0 Тогда
		Возврат "ПланОбменаСсылка";
	КонецЕсли;
	
	Если СтрНачинаетсяС(ОбрабатываемаяСтрока, "d5p1:") Тогда
		НомерТочки = СтрНайти(ОбрабатываемаяСтрока, ".", НаправлениеПоиска.СКонца);
		Если НомерТочки = 0 Тогда
			Возврат ОбрабатываемаяСтрока;
		КонецЕсли;
		Возврат Сред(ОбрабатываемаяСтрока, НомерТочки + 1);
	КонецЕсли;
	
	Если СтрНачинаетсяС(ОбрабатываемаяСтрока, "xs:")
		ИЛИ СтрНачинаетсяС(ОбрабатываемаяСтрока, "v8:") Тогда
		Попытка
			Возврат Тип(Сред(ОбрабатываемаяСтрока, 4));
		Исключение
			
			Если СтрСравнить("xs:decimal", ОбрабатываемаяСтрока) = 0 Тогда
				Возврат Тип("Число");
			КонецЕсли;
			
			Если СтрСравнить("xs:dateTime", ОбрабатываемаяСтрока) = 0 Тогда
				Возврат Тип("Дата");
			КонецЕсли;
			
			Возврат ОбрабатываемаяСтрока;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Процедура ЗаполнитьДополнительныеСвойстваМакетаТабличныйДокумент(МакетОбъекта, ДеревоМакета)
	
	СтрокаСодержимого = ДеревоМакета.Строки.Добавить();
	СтрокаСодержимого.Свойство = "СодержимоеМакета";
	
	ТаблицаМакета = Новый ТаблицаЗначений;
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	Для НомерКолонки = 1 По МакетОбъекта.ШиринаТаблицы Цикл
		НаименованиеКолонки = "C" + Формат(НомерКолонки, "ЧГ=0");
		ТаблицаМакета.Колонки.Добавить(НаименованиеКолонки, ОписаниеТипаСтрока);
	КонецЦикла;
	
	Для НомерСтроки = 1 По МакетОбъекта.ВысотаТаблицы Цикл
		ТаблицаМакета.Добавить();
	КонецЦикла;
	
	Для НомерКолонки = 1 По МакетОбъекта.ШиринаТаблицы Цикл
		Для НомерСтроки = 1 По МакетОбъекта.ВысотаТаблицы Цикл
			Область = МакетОбъекта.Область(НомерСтроки, НомерКолонки);
			
			ТекстЯчейки = Область.Текст;
			Если ПустаяСтрока(ТекстЯчейки) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяОбласти = Область.Имя;
			
			// Если ячейка входит в область ячеек.
			Если Найти(ИмяОбласти, ":") > 0 Тогда
				// Строим название ячейки области.
				ЯчейкаОбласти = "R" + НомерСтроки + "C" + НомерКолонки + ":";
				ЯчейкаОбласти = СтрЗаменить(ЯчейкаОбласти, " ", "");
				
				// Если это не первая ячейка области, то очищаем.
				Если Найти(ИмяОбласти, ЯчейкаОбласти) = 0 Тогда
					ТекстЯчейки = "";
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаМакета[НомерСтроки - 1][НомерКолонки - 1] = ТекстЯчейки;
		КонецЦикла;
	КонецЦикла;
	
	СтрокаСодержимого.Значение = ТаблицаМакета;
	
КонецПроцедуры

Функция ЗаполнитьДополнительныеСвойстваМакетаТекстовыйДокумент(ПутьКФайлуСДанными, ДеревоЗначенийМакета)
	
	СтрокаСвойства = ДеревоЗначенийМакета.Строки.Добавить();
	СтрокаСвойства.Свойство = "Текст";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлуСДанными);
	
	СтрокаСвойства.Значение = ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

Функция ЗаполнитьДополнительныеСвойстваМакетаДвоичныеДанные(ПутьКФайлуСДанными, ДеревоЗначенийМакета)
	
	СтрокаСвойства = ДеревоЗначенийМакета.Строки.Добавить();
	СтрокаСвойства.Свойство = "Размер";
	
	Файл = Новый Файл(ПутьКФайлуСДанными);
	
	СтрокаСвойства.Значение = Файл.Размер();
	
КонецФункции

Функция ЗаполнитьДополнительныеСвойстваМакетаHTMLДокумент(ПутьКФайлуСДанными, ДеревоЗначенийМакета)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлуСДанными);
	
	СтрокаСвойства = ДеревоЗначенийМакета.Строки.Добавить();
	СтрокаСвойства.Свойство = "Текст";
	СтрокаСвойства.Значение = ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

Функция ЗаполнитьДополнительныеСвойстваМакетаСхемаКомпоновкиДанных(ДеревоДанных, ДеревоЗначенийМакета,
	СведенияОКонфигурации)
	
	ТаблицаДополнительныхСвойств = ЗаполнитьТаблицуДополнительныхСвойствМакетаСхемаКомпоновкиДанных();
	
	ЗаполнитьДополнительноеСвойствоМакетаСхемаКомпоновкиДанных(ДеревоДанных, ДеревоЗначенийМакета,
		Неопределено, ТаблицаДополнительныхСвойств, СведенияОКонфигурации);
	
КонецФункции

Функция ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, ИмяСвойства,
	ИмяАнглийское, РодительСвойства = Неопределено, ТипСвойства = "", АнглийскоеИмяЭлементаКоллекции = "",
	ЗначениеПоУмолчанию = "", ЗначениеПоУмолчаниюДляКоллекции = "", ПолучатьСиноним = Ложь, ИскатьРусскоеЗначение = Ложь)
	
	СтрокаТаблицыСвойств = ТаблицаДополнительныхСвойств.Добавить();
	СтрокаТаблицыСвойств.Имя = ИмяСвойства;
	СтрокаТаблицыСвойств.ИмяАнглийское = ИмяАнглийское;
	СтрокаТаблицыСвойств.Тип = ТипСвойства;
	СтрокаТаблицыСвойств.Родитель = РодительСвойства;
	СтрокаТаблицыСвойств.АнглийскоеИмяЭлементаКоллекции = АнглийскоеИмяЭлементаКоллекции;
	СтрокаТаблицыСвойств.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
	СтрокаТаблицыСвойств.ЗначениеПоУмолчаниюДляКоллекции = ЗначениеПоУмолчаниюДляКоллекции;
	СтрокаТаблицыСвойств.ПолучатьСиноним = ПолучатьСиноним;
	СтрокаТаблицыСвойств.ИскатьРусскоеЗначение = ИскатьРусскоеЗначение;
	
	Возврат СтрокаТаблицыСвойств;
	
КонецФункции

Функция ЗаполнитьТаблицуДополнительныхСвойствМакетаСхемаКомпоновкиДанных()
	
	ТаблицаДополнительныхСвойств = Новый ТаблицаЗначений;
	ТаблицаДополнительныхСвойств.Колонки.Добавить("Имя");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("ИмяАнглийское");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("Родитель");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("Тип");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("АнглийскоеИмяЭлементаКоллекции");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("ЗначениеПоУмолчанию");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("ЗначениеПоУмолчаниюДляКоллекции");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("ПолучатьСиноним");
	ТаблицаДополнительныхСвойств.Колонки.Добавить("ИскатьРусскоеЗначение");
	
	СтрокаНаборДанных = ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств,
		"НаборыДанных", "dataSet",, "Коллекция", "name", "НаборДанныхЗапросСхемыКомпоновкиДанных",
		"НаборыДанныхЗапросСхемыКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "АвтозаполнениеДоступныхПолей",
		"autoFillFields", СтрокаНаборДанных, "Булево",, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Запрос", "query",
		СтрокаНаборДанных, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Имя", "name",
		СтрокаНаборДанных, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ИсточникДанных", "dataSource",
		СтрокаНаборДанных, "Строка");
	
	СтрокаПоля = ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Поля", "field",
		СтрокаНаборДанных, "Коллекция", "field", "ПолеНабораДанныхСхемыКомпоновкиДанных",
		"ПоляНабораДанныхСхемыКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ВыражениеПредставления",
		"presentationExpression", СтрокаПоля, "Строка");
	СтрокаПолеВыраженияУпорядочивания = ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(
		ТаблицаДополнительныхСвойств, "ВыраженияУпорядочивания", "orderExpression", СтрокаПоля, "Коллекция",
		"dcscom:expression", "ВыраженияУпорядочиванияКомпоновкиДанных", "ВыраженияУпорядочиванияКомпоновкиДанных");
	ДоступныеЗначения = ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств,
		"ДоступныеЗначения", "availableValue", СтрокаПоля, "СписокЗначений");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Значение", "value",
		ДоступныеЗначения, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Представление",
		"presentation", ДоступныеЗначения, "Строка",,,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Заголовок",
		"title", СтрокаПоля, "Строка",,,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "НаборДанныхПроверкиИерархии",
		"inHierarchyDataSet", СтрокаПоля, "Строка");
	
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ОграничениеИспользования",
		"useRestriction", СтрокаПоля, "Строка",, "ОграничениеИспользованияПоляСхемыКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств,
		"ОграничениеИспользованияРеквизитов", "attributeUseRestriction", СтрокаПоля, "Строка",,
		"ОграничениеИспользованияПоляСхемыКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Оформление",
		"appearance.dcscor:item.dcscor:parameter", СтрокаПоля, "ЗначениеВСтроку",,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств,
		"ПараметрНабораДанныхПроверкиИерархии", "inHierarchyDataSetParameter", СтрокаПоля, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ПараметрыРедактирования",
		"inputParameters.dcscor:item.dcscor:parameter", СтрокаПоля, "ЗначениеВСтроку",,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Поле", "field", СтрокаПоля,
		"Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ПутьКДанным", "dataPath",
		СтрокаПоля, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Роль", "role", СтрокаПоля,
		"Строка",, "РольПоляНабораДанныхКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ТипЗначения",
		"valueType.v8:Type", СтрокаПоля, "ЗначениеВСтроку");
	
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Автоупорядочивание",
		"dcscom:autoOrder", СтрокаПолеВыраженияУпорядочивания, "Булево",, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Выражение",
		"dcscom:expression", СтрокаПолеВыраженияУпорядочивания, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ТипУпорядочивания",
		"dcscom:orderType", СтрокаПолеВыраженияУпорядочивания, "НаправлениеСортировкиКомпоновкиДанных");
	
	СтрокаПараметр = ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Параметры",
		"parameter",, "Коллекция", "name", "ПараметрСхемыКомпоновкиДанных",
		"ПараметрыСхемыКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ВключатьВДоступныеПоля",
		"availableAsField", СтрокаПараметр, "Булево",, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Выражение", "expression",
		СтрокаПараметр, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ДоступенСписокЗначений",
		"valueListAllowed", СтрокаПараметр, "Булево",, Ложь);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Заголовок",
		"title", СтрокаПараметр, "Булево",,,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств,
		"ЗапрещатьНезаполненныеЗначения", "denyIncompleteValues", СтрокаПараметр, "Булево",, Ложь);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Значение", "value",
		СтрокаПараметр, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Имя", "name", СтрокаПараметр,
		"Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Использование", "use",
		СтрокаПараметр, "ИспользованиеПараметраКомпоновкиДанных",, "Авто");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ОграничениеИспользования",
		"useRestriction", СтрокаПараметр, "Булево",, Ложь);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ПараметрФункциональныхОпций",
		"functionalOptionsParameter", СтрокаПараметр, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ПараметрыРедактирования",
		"inputParameters.dcscor:item.dcscor:parameter", СтрокаПараметр, "ЗначениеВСтроку",,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ТипЗначения",
		"valueType.v8:Type", СтрокаПараметр, "ЗначениеВСтроку");
	
	СтрокаВычисляемоеПоле = ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств,
		"ВычисляемыеПоля", "calculatedField",, "Коллекция", "dataPath",
		"ВычисляемоеПолеСхемыКомпоновкиДанных", "ВычисляемыеПоляСхемыКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Выражение", "expression",
		СтрокаВычисляемоеПоле, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ВыражениеПредставления",
		"presentationExpression", СтрокаВычисляемоеПоле, "Строка");
	СтрокаВычисляемоеПолеВыраженияУпорядочивания = ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(
		ТаблицаДополнительныхСвойств, "ВыраженияУпорядочивания", "orderExpression", СтрокаВычисляемоеПоле, "Коллекция",
		"dcscom:expression", "ВыраженияУпорядочиванияКомпоновкиДанных", "ВыраженияУпорядочиванияКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Заголовок",
		"title", СтрокаВычисляемоеПоле, "Строка",,,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ОграничениеИспользования",
		"useRestriction", СтрокаВычисляемоеПоле, "Строка",, "ОграничениеИспользованияПоляСхемыКомпоновкиДанных");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Оформление",
		"appearance.dcscor:item.dcscor:parameter", СтрокаВычисляемоеПоле, "ЗначениеВСтроку",,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ПараметрыРедактирования",
		"inputParameters.dcscor:item.dcscor:parameter", СтрокаВычисляемоеПоле, "ЗначениеВСтроку",,,, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ПутьКДанным", "dataPath",
		СтрокаВычисляемоеПоле, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ТипЗначения",
		"valueType.v8:Type", СтрокаВычисляемоеПоле, "ЗначениеВСтроку");
	
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Автоупорядочивание",
		"dcscom:autoOrder", СтрокаВычисляемоеПолеВыраженияУпорядочивания, "Булево",, Истина);
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "Выражение",
		"dcscom:expression", СтрокаВычисляемоеПолеВыраженияУпорядочивания, "Строка");
	ДобавитьСтрокуТаблицыСвойствМакетаСхемаКомпоновкиДанных(ТаблицаДополнительныхСвойств, "ТипУпорядочивания",
		"dcscom:orderType", СтрокаВычисляемоеПолеВыраженияУпорядочивания, "НаправлениеСортировкиКомпоновкиДанных");
	
	ТаблицаДополнительныхСвойств.Индексы.Добавить("Родитель");
	
	Возврат ТаблицаДополнительныхСвойств;
	
КонецФункции

Процедура ЗаполнитьДополнительноеСвойствоМакетаСхемаКомпоновкиДанных(ДеревоДанных,
	ДеревоЗначенийМакета, СтрокаТаблицыСвойств, ТаблицаДополнительныхСвойств, СведенияОКонфигурации)
	
	СоответствиеСистемныхПеречислений = СведенияОКонфигурации.СоответствиеСистемныхПеречислений;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Родитель", СтрокаТаблицыСвойств);
	
	МассивСвойств = ТаблицаДополнительныхСвойств.НайтиСтроки(СтруктураОтбора);
	Для Каждого Свойство Из МассивСвойств Цикл
		
		ИмяСвойстваАнглийское = НРег(Свойство.ИмяАнглийское);
		ИмяСвойства = Свойство.Имя;
		ТипСвойства = Свойство.Тип;
		ЗначениеПоУмолчанию = Свойство.ЗначениеПоУмолчанию;
		ПолучатьСиноним = Свойство.ПолучатьСиноним;
		
		СтрокаДерева = ДеревоЗначенийМакета.Строки.Найти(ИмяСвойства, "Свойство");
		Если СтрокаДерева = Неопределено Тогда
			СтрокаДерева = ДеревоЗначенийМакета.Строки.Добавить();
			СтрокаДерева.Свойство = ИмяСвойства;
			Если Свойство.ИскатьРусскоеЗначение Тогда
				СтрокаПредставления = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ИмяСвойстваАнглийское);
				СтрокаДерева.Значение = ПолучитьЗначениеСинонимаПоОсновномуЯзыку(СтрокаПредставления, СведенияОКонфигурации);
			Иначе
				СтрокаДерева.Значение = ПолучитьСвойствоМакета(ДеревоДанных, ИмяСвойстваАнглийское,
					СоответствиеСистемныхПеречислений, ТипСвойства, ЗначениеПоУмолчанию, ПолучатьСиноним);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСвойства = "СписокЗначений" Тогда
			
			Результат = Новый СписокЗначений;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Родитель", Свойство);
			
			МассивСтрок = ТаблицаДополнительныхСвойств.НайтиСтроки(СтруктураОтбора);
			
			ИмяЗначения = "";
			ИмяПредставления = "";
			
			Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
				
				Если ТекущаяСтрока.Имя = "Значение" Тогда
					ИмяЗначения = НРег(ТекущаяСтрока.ИмяАнглийское);
				КонецЕсли;
				
				Если ТекущаяСтрока.Имя = "Представление" Тогда
					ИмяПредставления = НРег(ТекущаяСтрока.ИмяАнглийское);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ИмяЗначения) И НЕ ПустаяСтрока(ИмяПредставления) Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ИмяНРег", ИмяСвойстваАнглийское);
				
				МассивСтрокДерева = ДеревоДанных.Строки.НайтиСтроки(СтруктураОтбора);
				Для Каждого ТекущаяСтрока Из МассивСтрокДерева Цикл
					Значение = ПолучитьСвойствоМакета(ТекущаяСтрока, ИмяЗначения, СоответствиеСистемныхПеречислений,,,
						ПолучатьСиноним);
					СтрокаПредставления = ПолучитьСтрокуДереваПоПравилуПоиска(ТекущаяСтрока, ИмяПредставления);
					Представление = ПолучитьЗначениеСинонимаПоОсновномуЯзыку(СтрокаПредставления, СведенияОКонфигурации);
					Результат.Добавить(Значение, Представление);
				КонецЦикла;
				
			КонецЕсли;
			
			Если Результат.Количество() > 0 Тогда
				СтрокаДерева.Значение = Результат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСвойства = "Коллекция" Тогда
			
			МассивСтрок = НайтиСтрокиДереваДанных(ИмяСвойстваАнглийское, ДеревоДанных);
			ЗаполнитьДополнительныеСвойстваМакетаСхемаКомпоновкиДанныхДляКоллекции(МассивСтрок, СтрокаДерева, Свойство,
				ДеревоДанных, ТаблицаДополнительныхСвойств, СведенияОКонфигурации);
			
			СтрокаДерева.Значение = Свойство.ЗначениеПоУмолчаниюДляКоллекции;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеСвойстваМакетаСхемаКомпоновкиДанныхДляКоллекции(МассивСвойств, ДеревоЗначенийМакета,
	СтрокаТаблицыСвойств, ДеревоДанных, ТаблицаДополнительныхСвойств, СведенияОКонфигурации)
	
	СоответствиеСистемныхПеречислений = СведенияОКонфигурации.СоответствиеСистемныхПеречислений;
	
	ЗначениеПоУмолчанию = СтрокаТаблицыСвойств.ЗначениеПоУмолчанию;
	ИмяЭлементаКоллекции = НРег(СтрокаТаблицыСвойств.АнглийскоеИмяЭлементаКоллекции);
	ПолучатьСиноним = СтрокаТаблицыСвойств.ПолучатьСиноним;
	
	Для Каждого ЭлементКоллекции Из МассивСвойств Цикл
		
		СтрокаДерева = ДеревоЗначенийМакета.Строки.Добавить();
		СтрокаДерева.Свойство = ПолучитьСвойствоМакета(ЭлементКоллекции, ИмяЭлементаКоллекции,
			СоответствиеСистемныхПеречислений,, ПолучатьСиноним);
		СтрокаДерева.Значение = ЗначениеПоУмолчанию;
		
		ЗаполнитьДополнительноеСвойствоМакетаСхемаКомпоновкиДанных(ЭлементКоллекции, СтрокаДерева,
			СтрокаТаблицыСвойств, ТаблицаДополнительныхСвойств, СведенияОКонфигурации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСвойствоМакета(ДеревоДанных, ИмяСвойства, СоответствиеСистемныхПеречислений, ТипСвойства = "",
	ЗначениеПоУмолчанию = "", ПолучатьСиноним = Ложь)
	
	Попытка
		
		Результат = НайтиСтрокиДереваДанных(ИмяСвойства, ДеревоДанных);
		
		Если Результат.Количество() = 0 Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Если ТипСвойства = "ЗначениеВСтроку" Тогда
			Значение = "";
			МассивЭлементовСписка = Новый Массив;
			Для Каждого СтрокаМассива Из Результат Цикл
				ТекущееЗначение = ПолучитьТипЗначения(СтрокаМассива.Значение);
				Если ПолучатьСиноним Тогда
					ТекущееЗначение = ПолучитьСинонимПоИмени(ТекущееЗначение);
				КонецЕсли;
				
				МассивЭлементовСписка.Добавить(ТекущееЗначение);
				
			КонецЦикла;
			Значение = СтрСоединить(МассивЭлементовСписка, ", ");
		Иначе
			Значение = ПривестиСтрокуКТипу(Результат[0].Значение, СоответствиеСистемныхПеречислений,
				ТипСвойства, ПолучатьСиноним);
		КонецЕсли;
		
	Исключение
		Возврат ЗначениеПоУмолчанию;
	КонецПопытки;
	
	Если ПустаяСтрока(Значение) Тогда
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция НайтиСтрокиДереваДанных(ИмяСвойства, ДеревоДанных, Знач КолонкаПоиска = "ИмяНРег",
	РазделительСлов = ".") Экспорт
	
	Если СтрСравнить(КолонкаПоиска, "ИмяНРег") = 0 Тогда
		ИмяСвойства = НРег(ИмяСвойства);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивПравилПоиска = СтрРазделить(ИмяСвойства, РазделительСлов);
	КоличествоИтераций = МассивПравилПоиска.Количество() - 1;
	НайтиСтрокиДереваДанныхРекурсивно(ДеревоДанных, МассивПравилПоиска, МассивСтрок, КоличествоИтераций, КолонкаПоиска);
	
	Возврат МассивСтрок;
	
КонецФункции

Процедура НайтиСтрокиДереваДанныхРекурсивно(ДеревоДанных, МассивПравилПоиска, Результат,КоличествоИтераций,
	КолонкаПоиска, Индекс = 0)
	
	ПравилоПоиска = МассивПравилПоиска[Индекс];
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(КолонкаПоиска, ПравилоПоиска);
	МассивСтрок = ДеревоДанных.Строки.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если КоличествоИтераций = Индекс Тогда
			Результат.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		
		НайтиСтрокиДереваДанныхРекурсивно(Строка, МассивПравилПоиска, Результат, КоличествоИтераций, КолонкаПоиска,
			Индекс + 1);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСведенийОМетаданных

Функция ПолучитьСведенияОМетаданных(СведенияОбОбъектах, ТаблицаОбъектов, ТаблицаВсехОбъектов, СведенияОКонфигурации) Экспорт
	
	КаталогВыгрузки = СведенияОКонфигурации.КаталогВыгрузкиФайлов;
	КаталогВыгрузки = ОтредактироватьПутьККаталогу(КаталогВыгрузки);
	ПутьКФайлуКонфигурации = КаталогВыгрузки + "Configuration.xml";
	Если НЕ ФайлСуществует(ПутьКФайлуКонфигурации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Конфигурация = СведенияОКонфигурации.Конфигурация;
	
	// инициализация используемых данных
	СтруктураДанныеДляПолученияСвойств = Новый Структура();
	СтруктураДанныеДляПолученияСвойств.Вставить("ЗначенияСвойств", ПолучитьЗначенияСвойствДляПеревода(Конфигурация));
	СтруктураДанныеДляПолученияСвойств.Вставить("ТаблицаТиповОбъектов", ПолучитьТаблицуТиповОбъектовДляСвойств());
	СтруктураДанныеДляПолученияСвойств.Вставить("ТаблицаСвойствОбъектов", ПолучитьТаблицуСвойствОбъектовМетаданных());
	СтруктураДанныеДляПолученияСвойств.Вставить("ТаблицаВсехОбъектов", ТаблицаВсехОбъектов);
	СтруктураДанныеДляПолученияСвойств.Вставить("КаталогВыгрузкиФайлов", КаталогВыгрузки);
	СтруктураДанныеДляПолученияСвойств.Вставить("ОсновнойЯзык", СведенияОКонфигурации.ОсновнойЯзык);
	
	ТаблицаФайловОбъектов = ТаблицаОбъектов.Скопировать(, "ПутьКФайлуХМЛ");
	ТаблицаФайловОбъектов.Свернуть("ПутьКФайлуХМЛ");
	КоличествоОбъектов = ТаблицаФайловОбъектов.Количество() - 1;
	
	ТаблицаЗаменСвойств = Новый ТаблицаЗначений;
	ТаблицаЗаменСвойств.Колонки.Добавить("Ссылка");
	ТаблицаЗаменСвойств.Колонки.Добавить("ИмяСвойства");
	ТаблицаЗаменСвойств.Колонки.Добавить("ТипСвойства");
	
	ТаблицаОбъектов.Колонки.Добавить("СтрокаВДеревеХМЛ");
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка свойств объектов (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	// выгрузка свойств объектов конфигурации
	СчетчикОбъектов = 0;
	ПроцентОбработанныхОбъектов = 0;
	Для Каждого ТекущийФайл Из ТаблицаФайловОбъектов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийФайл.ПутьКФайлуХМЛ) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикОбъектов = СчетчикОбъектов + 1;
		
		ТекущийПутьКФайлуХМЛ = КаталогВыгрузки + ТекущийФайл.ПутьКФайлуХМЛ;
		Если НЕ ФайлСуществует(ТекущийПутьКФайлуХМЛ) ИЛИ Прав(ТекущийПутьКФайлуХМЛ, 4) <> ".xml" Тогда
			ИмяСобытия = НСтр("ru='Сбор сведений о метаданных'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстОшибки = НСтр("ru='Не найден xml-файл объекта по пути'") + " " + ТекущийПутьКФайлуХМЛ;
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Дерево = XML_РазобратьФайлВыгрузки(ТекущийПутьКФайлуХМЛ);
		
		СтруктураПоискаПоФайлу = Новый Структура("ПутьКФайлуХМЛ", ТекущийФайл.ПутьКФайлуХМЛ);
		СтрокиОбъектаДанногоФайла = ТаблицаОбъектов.НайтиСтроки(СтруктураПоискаПоФайлу);
		
		ТаблицаСтрокТекущегоОбъекта = Новый ТаблицаЗначений;
		ТаблицаСтрокТекущегоОбъекта.Колонки.Добавить("СсылкаНаСтроку");
		ТаблицаСтрокТекущегоОбъекта.Колонки.Добавить("НомерСтрокиРодителяХМЛ");
		Для Каждого ТекущаяСтрокаДанногоФайла Из СтрокиОбъектаДанногоФайла Цикл
			НоваяСтрока = ТаблицаСтрокТекущегоОбъекта.Добавить();
			НоваяСтрока.СсылкаНаСтроку = ТекущаяСтрокаДанногоФайла;
			НоваяСтрока.НомерСтрокиРодителяХМЛ = ТекущаяСтрокаДанногоФайла.НомерСтрокиРодителяХМЛ;
		КонецЦикла;
		ТаблицаСтрокТекущегоОбъекта.Сортировать("НомерСтрокиРодителяХМЛ");
		
		Для Каждого СтрокаТаблицыСтрокТекущегоОбъекта Из ТаблицаСтрокТекущегоОбъекта Цикл
			
			СтрокаОбъекта = СтрокаТаблицыСтрокТекущегоОбъекта.СсылкаНаСтроку;
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			ТекущийПроцентОбъектов = Цел(100 * СчетчикОбъектов / КоличествоОбъектов);
			
			Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
				ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
				ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
				Состояние(ТекстСостояния);
			КонецЕсли;
			#КонецЕсли
			
			СтрокаОбъекта.ПутьКФайлуХМЛ = КаталогВыгрузки + СтрокаОбъекта.ПутьКФайлуХМЛ;
			ДеревоПоиска = Дерево;
			Если СтрокаТаблицыСтрокТекущегоОбъекта.НомерСтрокиРодителяХМЛ > -1 Тогда
				ДеревоПоиска = ТаблицаОбъектов[СтрокаТаблицыСтрокТекущегоОбъекта.НомерСтрокиРодителяХМЛ].СтрокаВДеревеХМЛ;
			КонецЕсли;
			
			СтрокаСвойствОбъекта = ПолучитьСтрокуСвойствОбъектаВДеревеХМЛ(ДеревоПоиска, СтрокаОбъекта,
				СтруктураДанныеДляПолученияСвойств.ТаблицаТиповОбъектов);
			Если СтрокаСвойствОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОбъекта.СтрокаВДеревеХМЛ = СтрокаСвойствОбъекта.Родитель;
			
			СсылкаНаОбъект = СтрокаОбъекта.Ссылка;
			СписокСведений = СведенияОбОбъектах[СсылкаНаОбъект];
			Если НЕ ЗначениеЗаполнено(СписокСведений) Тогда
				СписокСведений = Новый СписокЗначений;
			Иначе
				СписокСведений = СписокСведений.Получить();
				Если ТипЗнч(СписокСведений) <> Тип("СписокЗначений") Тогда
					СписокСведений = Новый СписокЗначений;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСвойстваОбъектаМетаданных(СписокСведений, СтрокаСвойствОбъекта, СтрокаОбъекта,
				СтруктураДанныеДляПолученияСвойств, ТаблицаЗаменСвойств);
			
			СведенияОбОбъектах.Вставить(СсылкаНаОбъект, ВернутьХранилищеЗначения(СписокСведений));
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыСтрокТекущегоОбъекта Из ТаблицаСтрокТекущегоОбъекта Цикл
			СтрокаТаблицыСтрокТекущегоОбъекта.СсылкаНаСтроку.СтрокаВДеревеХМЛ = Неопределено;
		КонецЦикла;
		
	КонецЦикла;
	
	ВыполнитьЗаменыЗначенийСвойств(СведенияОбОбъектах, ТаблицаЗаменСвойств, ТаблицаОбъектов);
	
	СведенияОКонфигурации.ОсновнойЯзык = СтруктураДанныеДляПолученияСвойств.ОсновнойЯзык;
	
	Возврат Истина;
	
КонецФункции

Функция ПреобразоватьЗначениеКТипу(Значение, СтрокаТипа, УточнениеТипа, ЗначенияСвойств)
	
	Если СтрокаТипа = "Строка" ИЛИ СтрокаТипа = "Заголовок" Тогда
		Возврат "" + Значение;
	ИначеЕсли СтрокаТипа = "Булево" Тогда
		
		Если Значение = "false" Тогда
			Возврат Ложь;
		ИначеЕсли Значение = "true" Тогда
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаТипа = "СтрокаСПрефиксом" Тогда
		
		Если СтрНачинаетсяС(Значение, УточнениеТипа) Тогда
			Возврат Прав(Значение, СтрДлина(Значение) - СтрДлина(УточнениеТипа));
		Иначе
			Возврат Значение;
		КонецЕсли;
		
	ИначеЕсли СтрокаТипа = "СистемноеПеречисление" Тогда
		
		ИскомоеЗначение = УточнениеТипа + "." + Значение;
		НайденноеЗначение = ЗначенияСвойств[ИскомоеЗначение];
		
		Если НайденноеЗначение = Неопределено Тогда
			Попытка
				НайденноеЗначение = Строка(Вычислить(ИскомоеЗначение));
			Исключение
				НайденноеЗначение = Значение;
			КонецПопытки;
			ЗначенияСвойств.Вставить(ИскомоеЗначение, НайденноеЗначение);
		КонецЕсли;
		
		Возврат НайденноеЗначение;
		
	ИначеЕсли СтрокаТипа = "КоллекцияЗначенийСвойстваОбъектаМетаданных" Тогда
		
		Возврат Значение;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьКвалификаторыТипа(СтрокаТипа, СтрокаДерева, ЗначенияСвойств)
	
	Если СтрокаТипа = "Строка" Тогда
		
		ДлинаСтроки = 0;
		ДопустимаяДлинаСтроки = "Переменная";
		
		СтрокаПоискаНаименование = "v8:stringqualifiers.v8:length";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			ДлинаСтроки = СтрокаКвалификатора.Значение;
		КонецЕсли;
		
		СтрокаПоискаНаименование = "v8:stringqualifiers.v8:allowedlength";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			ДопустимаяДлинаСтроки = ПреобразоватьЗначениеКТипу(СтрокаКвалификатора.Значение,
				"СистемноеПеречисление", "ДопустимаяДлина", ЗначенияСвойств);
		КонецЕсли;
		
		Возврат Новый Структура("Длина, ДопустимаяДлина", Число(ДлинаСтроки), ДопустимаяДлинаСтроки);
		
	ИначеЕсли СтрокаТипа = "Число" Тогда
		
		РазрядностьЧисла = 0;
		РазрядностьДробнойЧастиЧисла = 0;
		ДопустимыйЗнакЧисла = "Любой";
		
		СтрокаПоискаНаименование = "v8:numberqualifiers.v8:digits";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			РазрядностьЧисла = СтрокаКвалификатора.Значение;
		КонецЕсли;
		
		СтрокаПоискаНаименование = "v8:numberqualifiers.v8:fractiondigits";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			РазрядностьДробнойЧастиЧисла = СтрокаКвалификатора.Значение;
		КонецЕсли;
		
		СтрокаПоискаНаименование = "v8:numberqualifiers.v8:allowedsign";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			ДопустимыйЗнакЧисла = ПреобразоватьЗначениеКТипу(СтрокаКвалификатора.Значение,
				"СистемноеПеречисление", "ДопустимыйЗнак", ЗначенияСвойств);
		КонецЕсли;
		
		Возврат Новый Структура("Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнак",
			Число(РазрядностьЧисла), Число(РазрядностьДробнойЧастиЧисла), ДопустимыйЗнакЧисла);
		
	ИначеЕсли СтрокаТипа = "Дата" Тогда
		
		ЧастиДатыДата = "Дата и время"; // АПК:1297 - не локализуется
		
		СтрокаПоискаНаименование = "v8:datequalifiers.v8:datefractions";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			ЧастиДатыДата = ПреобразоватьЗначениеКТипу(СтрокаКвалификатора.Значение,
				"СистемноеПеречисление", "ЧастиДаты", ЗначенияСвойств);
		КонецЕсли;
		
		Возврат Новый Структура("ЧастиДаты", ЧастиДатыДата);
		
	ИначеЕсли СтрокаТипа = "ДвоичныеДанные" Тогда
		
		ДлинаДвоичныеДанные = 0;
		ДопустимаяДлинаДвоичныеДанные = "Переменная";
		
		СтрокаПоискаНаименование = "v8:binarydataqualifiers.v8:length";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			ДлинаДвоичныеДанные = СтрокаКвалификатора.Значение;
		КонецЕсли;
		
		СтрокаПоискаНаименование = "v8:binarydataqualifiers.v8:allowedlength";
		СтрокаКвалификатора = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаДерева, СтрокаПоискаНаименование);
		Если СтрокаКвалификатора <> Неопределено Тогда
			ДопустимаяДлинаДвоичныеДанные = ПреобразоватьЗначениеКТипу(СтрокаКвалификатора.Значение,
				"СистемноеПеречисление", "ДопустимаяДлина", ЗначенияСвойств);
		КонецЕсли;
		
		Возврат Новый Структура("Длина, ДопустимаяДлина", Число(ДлинаДвоичныеДанные), ДопустимаяДлинаДвоичныеДанные);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
	
КонецФункции

Функция ДобавитьТипВСтруктуру(СтрокаТипа, СтруктураТипОбъекта, МассивТипов, ТаблицаТипов,
	СтрокаРодитель, ЗначенияСвойств)
	
	Если МассивТипов.Найти(СтрокаТипа) <> Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	МассивТипов.Добавить(СтрокаТипа);
	
	НоваяСтрока = ТаблицаТипов.Добавить();
	НоваяСтрока.Тип = СтрокаТипа;
	
	Если СтрокаТипа = "Число" ИЛИ СтрокаТипа = "Строка"
		ИЛИ СтрокаТипа = "Дата" ИЛИ СтрокаТипа = "ДвоичныеДанные" Тогда
		
		НоваяСтрока.КвалификаторыТипа = ПолучитьКвалификаторыТипа(СтрокаТипа, СтрокаРодитель, ЗначенияСвойств);
		
		Если СтрокаТипа = "Число" И НоваяСтрока.КвалификаторыТипа <> Неопределено Тогда
			СтруктураТипОбъекта.ДопустимыйЗнак = НоваяСтрока.КвалификаторыТипа.ДопустимыйЗнак;
			СтруктураТипОбъекта.Разрядность = НоваяСтрока.КвалификаторыТипа.Разрядность;
			СтруктураТипОбъекта.РазрядностьДробнойЧасти = НоваяСтрока.КвалификаторыТипа.РазрядностьДробнойЧасти;
		КонецЕсли;
		
		Если СтрокаТипа = "Строка" И НоваяСтрока.КвалификаторыТипа <> Неопределено Тогда
			СтруктураТипОбъекта.Длина = НоваяСтрока.КвалификаторыТипа.Длина;
			СтруктураТипОбъекта.ДопустимаяДлина = НоваяСтрока.КвалификаторыТипа.ДопустимаяДлина;
		КонецЕсли;
		
		Если СтрокаТипа = "Дата" И НоваяСтрока.КвалификаторыТипа <> Неопределено Тогда
			СтруктураТипОбъекта.ЧастиДаты = НоваяСтрока.КвалификаторыТипа.ЧастиДаты;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбъектыСоставаОбщегоРеквизита(СтрокаСвойстваХМЛ)
	
	СоответствиеСоставОбщегоРеквизита = Новый Соответствие;
	
	СоответствиеСоставОбщегоРеквизита.Вставить("ExchangePlan", "ПланОбмена");
	СоответствиеСоставОбщегоРеквизита.Вставить("Catalog", "Справочник");
	СоответствиеСоставОбщегоРеквизита.Вставить("Document", "Документ");
	СоответствиеСоставОбщегоРеквизита.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	СоответствиеСоставОбщегоРеквизита.Вставить("ChartOfAccounts", "ПланСчетов");
	СоответствиеСоставОбщегоРеквизита.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	СоответствиеСоставОбщегоРеквизита.Вставить("InformationRegister", "РегистрСведений");
	СоответствиеСоставОбщегоРеквизита.Вставить("AccumulationRegister", "РегистрНакопления");
	СоответствиеСоставОбщегоРеквизита.Вставить("AccountingRegister", "РегистрБухгалтерии");
	СоответствиеСоставОбщегоРеквизита.Вставить("CalculationRegister", "РегистрРасчета");
	СоответствиеСоставОбщегоРеквизита.Вставить("BusinessProcess", "БизнесПроцесс");
	СоответствиеСоставОбщегоРеквизита.Вставить("Task", "Задача");
	СоответствиеСоставОбщегоРеквизита.Вставить("ExternalDataSource", "ВнешнийИсточникДанных");
	
	СтрокаСвойств = СтрокаСвойстваХМЛ.Родитель;
	СтрокаРазделениеДанных = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойств, "dataseparation");
	Если СтрокаРазделениеДанных <> Неопределено Тогда
		Если СтрокаРазделениеДанных.Значение = "DontUse" Тогда
			СоответствиеСоставОбщегоРеквизита.Вставить("DocumentJournal", "ЖурналДокументов");
		ИначеЕсли СтрокаРазделениеДанных.Значение = "Separate" Тогда
			СоответствиеСоставОбщегоРеквизита.Вставить("ScheduledJob", "РегламентноеЗадание");
			СоответствиеСоставОбщегоРеквизита.Вставить("Constant", "Константа");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствиеСоставОбщегоРеквизита;
	
КонецФункции

Процедура СформироватьДеревоПредопределенныхЭлементов(ДеревоПредопределенных, СтрокаСвойстваХМЛ)
	
	МассивСтрок = НайтиСтрокиДереваДанных("item", СтрокаСвойстваХМЛ);
	Для Каждого Предопределенный Из МассивСтрок Цикл
		
		СтрокаИмени = ПолучитьСтрокуДереваПоПравилуПоиска(Предопределенный, "Name");
		Если СтрокаИмени = Неопределено Тогда
			Имя = "";
		Иначе
			Имя = СтрокаИмени.Значение;
		КонецЕсли;
		
		СтрокаКода = ПолучитьСтрокуДереваПоПравилуПоиска(Предопределенный, "Code");
		Если СтрокаКода = Неопределено Тогда
			Код = "";
		Иначе
			Код = СтрокаКода.Значение;
		КонецЕсли;
		
		Если ПустаяСтрока(Код) Тогда
			Код = "0";
		КонецЕсли;
		
		СтрокаНаименования = ПолучитьСтрокуДереваПоПравилуПоиска(Предопределенный, "Description");
		Если СтрокаНаименования = Неопределено Тогда
			Наименование = "";
		Иначе
			Наименование = СтрокаНаименования.Значение;
		КонецЕсли;
		
		СтрокаЭтоГруппа = ПолучитьСтрокуДереваПоПравилуПоиска(Предопределенный, "IsFolder");
		Если СтрокаЭтоГруппа = Неопределено Тогда
			ЭтоГруппа = Ложь;
		Иначе
			ЗначениеГруппы = СтрокаЭтоГруппа.Значение;
			ЭтоГруппа = ЭтоБулево(ЗначениеГруппы);
		КонецЕсли;
		
		НоваяСтрока = ДеревоПредопределенных.Строки.Добавить();
		НоваяСтрока.Имя				 = Имя;
		НоваяСтрока.Код				 = Код;
		НоваяСтрока.Наименование	 = Наименование;
		НоваяСтрока.ЭтоГруппа		 = ЭтоГруппа;
		
		МассивПодчиненныхЭлементов = НайтиСтрокиДереваДанных("childitems", Предопределенный);
		Для Каждого Элемент Из МассивПодчиненныхЭлементов Цикл
			СформироватьДеревоПредопределенныхЭлементов(ДеревоПредопределенных, Элемент)
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПустоеДеревоПредопределенных()
	
	ДеревоПредопределенных = Новый ДеревоЗначений;
	ДеревоПредопределенных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ДеревоПредопределенных.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ДеревоПредопределенных.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
	ДеревоПредопределенных.Колонки.Добавить("ЭтоГруппа",  Новый ОписаниеТипов("Булево"));
	Возврат ДеревоПредопределенных;
	
КонецФункции

Процедура СформироватьРасписаниеРегламентногоЗадания(МассивРасписаний, СтрокаСвойстваХМЛ, ПутьКРасписанию,
	СоответствиеСистемныхПеречислений)
	
	СтрокаРасписания = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, ПутьКРасписанию);
	Если СтрокаРасписания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваРасписания(МассивРасписаний, СтрокаРасписания, СоответствиеСистемныхПеречислений);
	
	МассивДетальныхРасписаний = НайтиСтрокиДереваДанных("ent:detaileddailyschedules", СтрокаРасписания);
	Для Каждого Расписание Из МассивДетальныхРасписаний Цикл
		ЗаполнитьСвойстваРасписания(МассивРасписаний, Расписание, СоответствиеСистемныхПеречислений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваРасписания(МассивРасписаний, СтрокаСвойстваХМЛ, СоответствиеСистемныхПеречислений)
	
	СтрокаАтрибутов = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "Атрибуты");
	Если СтрокаАтрибутов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРасписания = Новый Структура;
	МассивРасписаний.Добавить(СтруктураРасписания);
	
	АтрибутыРасписания = СтрокаАтрибутов.Строки;
	Для Каждого Атрибут Из АтрибутыРасписания Цикл
		Свойство = СоответствиеСистемныхПеречислений[Атрибут.Имя];
		Если Свойство = Неопределено Тогда
			Свойство = Атрибут.Имя;
		КонецЕсли;
		
		Значение = Атрибут.Значение;
		
		Если СтрНайти(Значение, "-") <> 0 Тогда
			Попытка
				СтрокаДаты = СтрЗаменить(Значение, "-", "");
				Значение = Дата(СтрокаДаты);
			Исключение;
			КонецПопытки;
		ИначеЕсли СтрНайти(Значение, ":") <> 0 Тогда
			Попытка
				СтрокаВремени = СтрЗаменить(Значение, ":", "");
				СтрокаВремени = СтрШаблон("00010101%1", СтрокаВремени);
				Значение = Дата(СтрокаВремени);
			Исключение;
			КонецПопытки;
		КонецЕсли;
		
		СтруктураРасписания.Вставить(Свойство, Значение);
	КонецЦикла;
	
	СтрокаДнейНедели = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "ent:WeekDays");
	Если СтрокаДнейНедели = Неопределено Тогда
		ДниНедели = "";
	Иначе
		ДниНедели = СтрокаДнейНедели.Значение;
	КонецЕсли;
	
	СтруктураРасписания.Вставить("ДниНедели", ДниНедели);
	
	СтрокаМесяцы = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "ent:Months");
	Если СтрокаМесяцы = Неопределено Тогда
		Месяцы = "";
	Иначе
		Месяцы = СтрокаМесяцы.Значение;
	КонецЕсли;
	
	СтруктураРасписания.Вставить("Месяцы", Месяцы);
	
КонецПроцедуры

Процедура СформироватьСтруктуруЗначенияЭлементаСтиля(СтруктураЗначенияЭлементаСтиля, СтрокаСвойстваХМЛ,
	СоответствиеСистемныхПеречислений)
	
	Если НЕ ПустаяСтрока(СтрокаСвойстваХМЛ.Значение) Тогда
		
		// 1. Обработка элемента стиля с видом "Цвет".
		СтруктураЦвета = ПолучитьЗначениеСвойстваЦвет(СтрокаСвойстваХМЛ.Значение, СоответствиеСистемныхПеречислений);
		СтруктураЗначенияЭлементаСтиля.Вставить("Цвет", СтруктураЦвета.Цвет);
		
	Иначе
		СтрокаСТипомЭлементаСтиля = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "Атрибуты.xsi:type");
		Если СтрокаСТипомЭлементаСтиля = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТипЭлементаСтиля = СтрокаСТипомЭлементаСтиля.Значение;
		Если СтрСравнить(ТипЭлементаСтиля, "v8ui:Border") = 0 Тогда
			
			// 2. Обработка элемента стиля с видом "Рамка".
			СтруктураЗначенияЭлементаСтиля.Вставить("СтильРамки", "");
			СтруктураЗначенияЭлементаСтиля.Вставить("ТипРамки", "");
			СтруктураЗначенияЭлементаСтиля.Вставить("ТолщинаРамки", 1);
			ПолучитьЗначениеСвойстваРамка(СтруктураЗначенияЭлементаСтиля, СтрокаСвойстваХМЛ, СоответствиеСистемныхПеречислений);
			
		Иначе
			
			// 3. Обработка элемента стиля с видом "Шрифт".
			СтруктураЗначенияЭлементаСтиля.Вставить("Шрифт", "");
			СтруктураЗначенияЭлементаСтиля.Вставить("Размер", 0);
			СтруктураЗначенияЭлементаСтиля.Вставить("Масштаб", 100);
			СтруктураЗначенияЭлементаСтиля.Вставить("Жирный", Ложь);
			СтруктураЗначенияЭлементаСтиля.Вставить("Наклонный", Ложь);
			СтруктураЗначенияЭлементаСтиля.Вставить("Подчеркнутый", Ложь);
			СтруктураЗначенияЭлементаСтиля.Вставить("Зачеркнутый", Ложь);
			
			ПолучитьЗначениеСвойстваШрифт(СтруктураЗначенияЭлементаСтиля, СтрокаСвойстваХМЛ, СоответствиеСистемныхПеречислений);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеСвойстваЦвет(Знач ЗначениеЦвета, СоответствиеСистемныхПеречислений)
	
	СтруктураЦвета = Новый Структура;
	СтруктураЦвета.Вставить("Цвет", "");
	СтруктураЦвета.Вставить("ИзСтиля", Ложь);
	
	Если СтрНачинаетсяС(ЗначениеЦвета, "web:") Тогда
		ЗначениеЦвета = СтрЗаменить(ЗначениеЦвета, "web:", "");
		СтруктураЦвета.Цвет = ПреобразоватьЗначениеКТипу(ЗначениеЦвета, "СистемноеПеречисление",
			"WebЦвета", СоответствиеСистемныхПеречислений);
	ИначеЕсли СтрНачинаетсяС(ЗначениеЦвета, "style:") Тогда
		ЗначениеЦвета = СтрЗаменить(ЗначениеЦвета, "style:", "");
		Цвет = ПреобразоватьЗначениеКТипу(ЗначениеЦвета, "СистемноеПеречисление",
			"ЦветаСтиля", СоответствиеСистемныхПеречислений);
		СтруктураЦвета.Цвет = СтрЗаменить(Цвет, "стиль: ", "");
		СтруктураЦвета.ИзСтиля = Истина;
	ИначеЕсли СтрНачинаетсяС(ЗначениеЦвета, "#") И (СтрДлина(ЗначениеЦвета) = 7) Тогда
		ЗначениеЦвета = СтрЗаменить(ЗначениеЦвета, "#", "");
		СтруктураЦвета.Цвет = СтрШаблон("%1,%2,%3",
			КонвертироватьHexВDec(Сред(ЗначениеЦвета, 1, 2)),
			КонвертироватьHexВDec(Сред(ЗначениеЦвета, 3, 2)),
			КонвертироватьHexВDec(Сред(ЗначениеЦвета, 5, 2)));
	Иначе
		// В качестве цвета указан элемент стиля. В xml-файл выгружается ИД элемента стиля.
		СтруктураЦвета.Цвет = "Элемент стиля"; // АПК:1297 - не локализуется
		СтруктураЦвета.ИзСтиля = Истина;
	КонецЕсли;
	
	Возврат СтруктураЦвета;
	
КонецФункции

Процедура ПолучитьЗначениеСвойстваШрифт(СтруктураЗначенийШрифта, СтрокаСвойстваХМЛ, СоответствиеСистемныхПеречислений,
	ПолучатьСтильШрифта = Ложь)
	
	СтрокаТипаШрифта = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "Атрибуты.Kind");
	Если СтрокаТипаШрифта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипШрифта = СтрокаТипаШрифта.Значение;
	
	ПутьКИмениШрифта = ?(ТипШрифта = "Absolute", "Атрибуты.FaceName", "Атрибуты.Ref");
	
	СтрокаШрифта = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, ПутьКИмениШрифта);
	Если СтрокаШрифта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтильШрифта = "";
	ТипШрифтаРусский = "";
	
	Если ТипШрифта = "Absolute" Тогда
		Шрифт = СтрокаШрифта.Значение;
	ИначеЕсли ТипШрифта = "StyleItem" Тогда
		Шрифт = СтрЗаменить(СтрокаШрифта.Значение, "style:", "");
		Шрифт = ПреобразоватьЗначениеКТипу(Шрифт, "СистемноеПеречисление",
			"ШрифтыСтиля", СоответствиеСистемныхПеречислений);
		Шрифт = СтрЗаменить(Шрифт, "стиль: ", "");
		СтильШрифта = Шрифт;
		ТипШрифтаРусский = "Шрифт стиля"; // АПК:1297 - не локализуется
	Иначе
		Шрифт = СтрЗаменить(СтрокаШрифта.Значение, "sys:", "");
		Шрифт = ПреобразоватьЗначениеКТипу(Шрифт, "СистемноеПеречисление",
			"WindowsШрифты", СоответствиеСистемныхПеречислений);
		СтильШрифта = Шрифт;
		ТипШрифтаРусский = "Системный шрифт"; // АПК:1297 - не локализуется
	КонецЕсли;
	
	Если ПолучатьСтильШрифта Тогда
		Шрифт = "ИзСтиля";
		СтрокаШрифта = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "Атрибуты.FaceName");
		Если СтрокаШрифта <> Неопределено Тогда
			Шрифт = СтрокаШрифта.Значение;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗначенийШрифта.Шрифт = Шрифт;
	
	СтруктураЗначенийШрифта.Размер = ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ, "Атрибуты.Height", "Число",
		СтруктураЗначенийШрифта.Размер);
	СтруктураЗначенийШрифта.Жирный = ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ, "Атрибуты.Bold",,
		СтруктураЗначенийШрифта.Жирный);
	СтруктураЗначенийШрифта.Наклонный = ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ, "Атрибуты.Italic",,
		СтруктураЗначенийШрифта.Наклонный);
	СтруктураЗначенийШрифта.Подчеркнутый = ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ,
		"Атрибуты.Underline",, СтруктураЗначенийШрифта.Подчеркнутый);
	СтруктураЗначенийШрифта.Зачеркнутый = ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ, "Атрибуты.Strikeout",,
		СтруктураЗначенийШрифта.Зачеркнутый);
	СтруктураЗначенийШрифта.Масштаб = ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ, "Атрибуты.Scale", "Число",
		СтруктураЗначенийШрифта.Масштаб);
	
	Если СтруктураЗначенийШрифта.Свойство("СтильШрифта") Тогда
		СтруктураЗначенийШрифта.СтильШрифта = СтильШрифта;
	КонецЕсли;
	
	Если СтруктураЗначенийШрифта.Свойство("ТипШрифта") Тогда
		СтруктураЗначенийШрифта.ТипШрифта = ТипШрифтаРусский;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗначениеСвойстваРамка(СтруктураЗначенияЭлементаСтиля, СтрокаСвойстваХМЛ,
	СоответствиеСистемныхПеречислений)
	
	СтрокаТипРамкиИзСтиля = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "Атрибуты.ref");
	Если СтрокаТипРамкиИзСтиля <> Неопределено Тогда
		СтильРамки = СтрокаТипРамкиИзСтиля.Значение;
		СтильРамки = СтрЗаменить(СтильРамки, "style:", "");
		СтруктураЗначенияЭлементаСтиля.СтильРамки = ПреобразоватьЗначениеКТипу(СтильРамки,
			"СистемноеПеречисление", "РамкиСтиля", СоответствиеСистемныхПеречислений);
		Возврат;
	КонецЕсли;
	
	СтрокаСТипомРамки = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, "v8ui:style");
	Если СтрокаСТипомРамки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипРамки = ПреобразоватьЗначениеКТипу(СтрокаСТипомРамки.Значение, "СистемноеПеречисление",
		"ТипРамкиЭлементаУправления", СоответствиеСистемныхПеречислений);
	
	СтруктураЗначенияЭлементаСтиля.ТипРамки = ТипРамки;
	
	СтруктураЗначенияЭлементаСтиля.ТолщинаРамки = ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ, "Атрибуты.Width",
		"Число", 0);
	
КонецПроцедуры

Функция КонвертироватьHexВDec(Знач ЧислоСтрокой)
	
	Результат = 0;
	Шаблон = "0123456789ABCDEF";
	
	ЧислоСтрокой = ВРег(Строка(ЧислоСтрокой));
	Для ТекущийСимвол = 1 По СтрДлина(ЧислоСтрокой) Цикл
		ПозицияВШаблоне = Найти(Шаблон, Сред(ЧислоСтрокой, ТекущийСимвол, 1))-1;
		Результат = Результат * СтрДлина(Шаблон) + ПозицияВШаблоне;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСвойствоЭлементаСтиля(СтрокаСвойстваХМЛ, ПутьКСвойству, ТипЗначения = "Булево",
	ЗначениеПоУмолчанию = Ложь)
	
	СтрокаСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойстваХМЛ, ПутьКСвойству);
	Если СтрокаСвойства = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗначения = "Булево" Тогда
		Значение = ПреобразоватьЗначениеКТипу(СтрокаСвойства.Значение, "Булево", "", "");
	ИначеЕсли ТипЗначения = "Число" Тогда
		Значение = СтрокаСвойства.Значение;
		ЭтоЧисло(Значение);
	Иначе
		Значение = СтрокаСвойства.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура СформироватьСоставСтиля(СоставСтиля, СтрокаСвойстваХМЛ, СоответствиеСистемныхПеречислений)
	
	МассивСтрокЭлементовСтилей = НайтиСтрокиДереваДанных("item", СтрокаСвойстваХМЛ);
	Для Каждого ЭлементСтиля Из МассивСтрокЭлементовСтилей Цикл
		
		СтруктураСвойствЭлементаСтиля = Новый Структура;
		СтруктураСвойствЭлементаСтиля.Вставить("ИмяЭлемента", "");
		СтруктураСвойствЭлементаСтиля.Вставить("ТипЭлемента", "");
		
		Если ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСтиля, "Color") <> Неопределено Тогда
			
			СтруктураСвойствЭлементаСтиля.ТипЭлемента = "ЦветаСтиля";
			СтрокаЦвета = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСтиля, "Color");
			СтруктураЦвета = ПолучитьЗначениеСвойстваЦвет(СтрокаЦвета.Значение, СоответствиеСистемныхПеречислений);
			СтруктураСвойствЭлементаСтиля.Вставить("Цвет", СтруктураЦвета.Цвет);
			
		ИначеЕсли ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСтиля, "Font") <> Неопределено Тогда
			
			СтруктураСвойствЭлементаСтиля.ТипЭлемента = "ШрифтыСтиля";
			СтрокаШрифта = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСтиля, "Font");
			
			СтруктураСвойствЭлементаСтиля.Вставить("СтильШрифта", "");
			СтруктураСвойствЭлементаСтиля.Вставить("ТипШрифта", "");
			СтруктураСвойствЭлементаСтиля.Вставить("Шрифт", "ИзСтиля");
			СтруктураСвойствЭлементаСтиля.Вставить("Размер", "ИзСтиля");
			СтруктураСвойствЭлементаСтиля.Вставить("Масштаб", 100);
			СтруктураСвойствЭлементаСтиля.Вставить("Жирный", "ИзСтиля");
			СтруктураСвойствЭлементаСтиля.Вставить("Наклонный", "ИзСтиля");
			СтруктураСвойствЭлементаСтиля.Вставить("Подчеркнутый", "ИзСтиля");
			СтруктураСвойствЭлементаСтиля.Вставить("Зачеркнутый", "ИзСтиля");
			ПолучитьЗначениеСвойстваШрифт(СтруктураСвойствЭлементаСтиля, СтрокаШрифта, СоответствиеСистемныхПеречислений, Истина);
			
		Иначе
			СтруктураСвойствЭлементаСтиля.ТипЭлемента = "РамкиСтиля";
			
			СтрокаРамки = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСтиля, "Border");
			
			СтруктураСвойствЭлементаСтиля.Вставить("СтильРамки", "");
			СтруктураСвойствЭлементаСтиля.Вставить("ТипРамки", "");
			СтруктураСвойствЭлементаСтиля.Вставить("ТолщинаРамки", 1);
			ПолучитьЗначениеСвойстваРамка(СтруктураСвойствЭлементаСтиля, СтрокаРамки, СоответствиеСистемныхПеречислений);
			
		КонецЕсли;
		
		СтрокаИмениЭлементаСтиля = ПолучитьСтрокуДереваПоПравилуПоиска(ЭлементСтиля, "Атрибуты.name");
		Если СтрокаИмениЭлементаСтиля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлементаСтиля = СтрокаИмениЭлементаСтиля.Значение;
		
		Если СтрНачинаетсяС(ИмяЭлементаСтиля, "StyleItem.") Тогда
			ИмяЭлементаСтиля = СтрЗаменить(ИмяЭлементаСтиля, "StyleItem.", "");
		Иначе
			ИмяЭлементаСтиля = ПреобразоватьЗначениеКТипу(ИмяЭлементаСтиля, "СистемноеПеречисление",
				СтруктураСвойствЭлементаСтиля.ТипЭлемента, СоответствиеСистемныхПеречислений);
			ИмяЭлементаСтиля = СтрЗаменить(ИмяЭлементаСтиля, "стиль: ", "");
		КонецЕсли;
		
		СтруктураСвойствЭлементаСтиля.ИмяЭлемента = ИмяЭлементаСтиля;
		
		СоставСтиля.Добавить(СтруктураСвойствЭлементаСтиля);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьХешСуммуКартинки(СтрокаОбъекта)
	
	ПутьКФайлуХМЛ = СтрЗаменить(СтрокаОбъекта.ПутьКФайлуХМЛ, ".xml", "\Ext\Picture.xml");
	Если НЕ ФайлСуществует(ПутьКФайлуХМЛ) Тогда
		Возврат "";
	КонецЕсли;
	
	ДеревоСвойства = XML_РазобратьФайлВыгрузки(ПутьКФайлуХМЛ);
	СтрокаТекущегоСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоСвойства, "ExtPicture.Picture.xr:Abs");
	Если СтрокаТекущегоСвойства = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ПутьККартинке = СтрЗаменить(СтрокаОбъекта.ПутьКФайлуХМЛ, ".xml", "\Ext\Picture\");
	ПутьККартинке = ПутьККартинке + СтрокаТекущегоСвойства.Значение;
	Если НЕ ФайлСуществует(ПутьККартинке) Тогда
		Возврат "";
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.ДобавитьФайл(ПутьККартинке);
	ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	
	Возврат ХешСумма;
	
КонецФункции

Функция СчитатьЗначениеСвойстваМетаданных(СтрокаСвойстваМакета, СтрокаСвойстваХМЛ, СтруктураДанныеДляПолученияСвойств,
	ТаблицаЗаменСвойств, СтрокаОбъекта)
	
	Если СтрокаСвойстваМакета.ТипСвойства = "Заголовок" Тогда
		
		Результат = ПолучитьЗначениеСинонимаПоОсновномуЯзыку(СтрокаСвойстваХМЛ, СтруктураДанныеДляПолученияСвойств);
		Возврат Результат;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Предопределенные" Тогда
		
		ДеревоПредопределенных = ПолучитьПустоеДеревоПредопределенных();
		СформироватьДеревоПредопределенныхЭлементов(ДеревоПредопределенных, СтрокаСвойстваХМЛ);
		Возврат ДеревоПредопределенных;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Тип" Тогда
		
		СтруктураТипОбъекта = ПолучитьПустуюСтруктуруТипа();
		
		Если СтрокаСвойстваМакета.СвойствоРусский = "Тип" И СтрокаСвойстваХМЛ.Строки.Количество() = 0 Тогда
			СтруктураТипОбъекта.Тип.Добавить("Произвольный");
			НоваяСтрока = СтруктураТипОбъекта.ТаблицаТипов.Добавить();
			НоваяСтрока.Тип = "Произвольный";
			
			Возврат СтруктураТипОбъекта;
		КонецЕсли;
		
		Результат = НайтиСтрокиДереваДанных("v8:type", СтрокаСвойстваХМЛ);
		
		РезультатНаборТипов = НайтиСтрокиДереваДанных("v8:typeset", СтрокаСвойстваХМЛ);
		Для Каждого ТекущийЭлемент Из РезультатНаборТипов Цикл
			Результат.Добавить(ТекущийЭлемент);
		КонецЦикла;
		
		РезультатТипИд = НайтиСтрокиДереваДанных("v8:typeid", СтрокаСвойстваХМЛ);
		Для Каждого ТекущийЭлемент Из РезультатТипИд Цикл
			Результат.Добавить(ТекущийЭлемент);
		КонецЦикла;
		
		Если Результат.Количество() = 0 Тогда
			Возврат СтруктураТипОбъекта;
		КонецЕсли;
		
		ТаблицаТипов = Новый ТаблицаЗначений;
		ТаблицаТипов.Колонки.Добавить("Тип");
		ТаблицаТипов.Колонки.Добавить("КвалификаторыТипа");
		
		МассивТипов = Новый Массив;
		
		Для Каждого ТекущийЭлементМассива Из Результат Цикл
			
			СтрокаТипа = ОпределитьТипАтрибута(ТекущийЭлементМассива.Значение);
			МассивСтрокиТипа = СтрРазделить(СтрокаТипа, ".", Ложь);
			
			Если МассивСтрокиТипа[0] = "Характеристика" ИЛИ МассивСтрокиТипа[0] = "ОпределяемыйТип" Тогда
				НоваяСтрока = ТаблицаЗаменСвойств.Добавить();
				НоваяСтрока.Ссылка = СтрокаОбъекта.Ссылка;
				НоваяСтрока.ИмяСвойства = СтрокаСвойстваМакета.СвойствоРусский;
				НоваяСтрока.ТипСвойства = "Тип";
			КонецЕсли;
			
			ДобавитьТипВСтруктуру(СтрокаТипа, СтруктураТипОбъекта, МассивТипов, ТаблицаТипов,
				ТекущийЭлементМассива.Родитель, СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств);
		КонецЦикла;
		
		СтруктураТипОбъекта.Тип = МассивТипов;
		СтруктураТипОбъекта.ТаблицаТипов = ТаблицаТипов;
		
		Возврат СтруктураТипОбъекта;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "КоллекцияЗначенийСвойстваОбъектаМетаданных" Тогда
		
		Результат = НайтиСтрокиДереваДанных("xr:item", СтрокаСвойстваХМЛ);
		
		Если Результат.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		МассивКоллекции = Новый Массив;
		Для Каждого ТекущийЭлементМассива Из Результат Цикл
			
			ЗначениеСвойства = ТекущийЭлементМассива.Значение;
			СтрокаПреобразования = СтрокаСвойстваМакета.УточнениеТипа;
			
			Если СтрокаПреобразования = "СтрокаАнгл" Тогда
				
				ЗначениеСвойства = ПутьКОбъектуПеревестиНаРусский(ЗначениеСвойства,
					СтруктураДанныеДляПолученияСвойств.ТаблицаТиповОбъектов);
				
			ИначеЕсли СтрокаПреобразования <> "" Тогда
				
				Выражение = Прав(СтрокаПреобразования, СтрДлина(СтрокаПреобразования)-1);
				Выражение = СтрЗаменить(Выражение, "$Значение$", """"+ЗначениеСвойства+"""");
				Попытка
					ЗначениеСвойства = Вычислить(Выражение);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			МассивКоллекции.Добавить(ЗначениеСвойства);
		КонецЦикла;
		
		Возврат СтрСоединить(МассивКоллекции, ", ");
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "НазначенияИспользования" Тогда
		
		Результат = НайтиСтрокиДереваДанных("v8:value", СтрокаСвойстваХМЛ);
		
		Если Результат.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		МассивКоллекции = Новый Массив;
		Для Каждого ТекущийЭлементМассива Из Результат Цикл
			
			ЗначениеСвойства = ТекущийЭлементМассива.Значение;
			СтрокаНазначения = "";
			Если ЗначениеСвойства = "PlatformApplication" Тогда
				СтрокаНазначения = "Приложение для платформы"; // АПК:1297 - не локализуется
			ИначеЕсли ЗначениеСвойства = "MobilePlatformApplication" Тогда
				СтрокаНазначения = "Приложение для мобильной платформы"; // АПК:1297 - не локализуется
			Иначе
				СтрокаНазначения = ЗначениеСвойства;
			КонецЕсли;
			
			МассивКоллекции.Добавить(СтрокаНазначения);
			
		КонецЦикла;
		
		Возврат СтрСоединить(МассивКоллекции, ", ");
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "СписокПолей" Тогда
		
		Результат = НайтиСтрокиДереваДанных("xr:field", СтрокаСвойстваХМЛ);
		
		Если Результат.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		МассивКоллекции = Новый Массив;
		Для Каждого ТекущийЭлементМассива Из Результат Цикл
			
			ЗначениеСвойства = ТекущийЭлементМассива.Значение;
			МассивПути = СтрРазделить(ЗначениеСвойства, ".", Ложь);
			КоличествоЭлементов = МассивПути.Количество();
			Если КоличествоЭлементов < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЭлемента = МассивПути[КоличествоЭлементов - 2];
			ИмяЭлемента = "";
			Если ТипЭлемента = "StandardAttribute" Тогда
				ИмяЭлемента = ПутьКОбъектуПеревестиНаРусский(МассивПути[КоличествоЭлементов-1],
					СтруктураДанныеДляПолученияСвойств.ТаблицаТиповОбъектов);
			ИначеЕсли ТипЭлемента = "Attribute" Тогда
				ИмяЭлемента = МассивПути[КоличествоЭлементов-1];
			КонецЕсли;
			
			Если ИмяЭлемента <> "" Тогда
				МассивКоллекции.Добавить(ИмяЭлемента);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СтрСоединить(МассивКоллекции, ", ");
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Состав" Тогда
		
		Если СтрокаСвойстваМакета.УточнениеТипа = "ОбщийРеквизит" Тогда
			
			ТаблицаСостава = Новый ТаблицаЗначений;
			ТаблицаСостава.Колонки.Добавить("Метаданные");
			ТаблицаСостава.Колонки.Добавить("Использование");
			ТаблицаСостава.Колонки.Добавить("УсловноеРазделение");
			
			СоответствиеСоставОбщегоРеквизита = ПолучитьОбъектыСоставаОбщегоРеквизита(СтрокаСвойстваХМЛ);
			
			Для Каждого СтрокаЭлементаСостава Из СтрокаСвойстваХМЛ.Строки Цикл
				
				СтрокаМетаданные = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаЭлементаСостава, "xr:metadata");
				Если СтрокаМетаданные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаОбъектаМетаданных = СтрокаМетаданные.Значение;
				
				МассивПутьОбъекта = СтрРазделить(СтрокаОбъектаМетаданных, ".", Ложь);
				Если МассивПутьОбъекта.Количество() < 2 Тогда
					Продолжить;
				КонецЕсли;
				
				РусскоеНазваниеТипаОбъекта = СоответствиеСоставОбщегоРеквизита.Получить(МассивПутьОбъекта[0]);
				Если РусскоеНазваниеТипаОбъекта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыСостава = ТаблицаСостава.Добавить();
				СтрокаТаблицыСостава.Метаданные = РусскоеНазваниеТипаОбъекта + "." + МассивПутьОбъекта[1];
				
				СтрокаИспользование = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаЭлементаСостава, "xr:use");
				Если СтрокаИспользование <> Неопределено Тогда
					ИспользованиеАнглийский = СтрокаИспользование.Значение;
					Если ИспользованиеАнглийский = "DontUse" Тогда
						СтрокаТаблицыСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
					ИначеЕсли ИспользованиеАнглийский = "Use" Тогда
						СтрокаТаблицыСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
					ИначеЕсли ИспользованиеАнглийский = "Auto" Тогда
						СтрокаТаблицыСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаУсловноеРазделение = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаЭлементаСостава, "xr:conditionalseparation");
				
				Если СтрокаУсловноеРазделение <> Неопределено И ЗначениеЗаполнено(СтрокаУсловноеРазделение.Значение) Тогда
					
					ТекстУсловноеРазделение = СтрокаУсловноеРазделение.Значение;
					МассивПутьОбъекта = СтрРазделить(ТекстУсловноеРазделение, ".", Ложь);
					Если МассивПутьОбъекта.Количество() = 2 Тогда
						РусскоеНазваниеТипаОбъекта = СоответствиеСоставОбщегоРеквизита.Получить(МассивПутьОбъекта[0]);
						Если РусскоеНазваниеТипаОбъекта = Неопределено Тогда
							РусскоеНазваниеТипаОбъекта = МассивПутьОбъекта[0];
						КонецЕсли;
						СтрокаТаблицыСостава.УсловноеРазделение = РусскоеНазваниеТипаОбъекта + "." + МассивПутьОбъекта[1];
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаСоставаИзХМЛ = ТаблицаСостава.Скопировать();
			
			Для Каждого ТекущийЭлемент Из СоответствиеСоставОбщегоРеквизита Цикл
				
				СтруктураПоиска = Новый Структура("ТипОбъектаВРег", ВРег(ТекущийЭлемент.Значение));
				СтрокиОбъектов = СтруктураДанныеДляПолученияСвойств.ТаблицаВсехОбъектов.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ТекущийОбъект Из СтрокиОбъектов Цикл
					
					НазваниеТекущегоТипа = ТекущийЭлемент.Значение + "." + ТекущийОбъект.Наименование;
					
					СтруктураПоискаОбъекта = Новый Структура("Метаданные", НазваниеТекущегоТипа);
					СтрокиОбъекта = ТаблицаСоставаИзХМЛ.НайтиСтроки(СтруктураПоискаОбъекта);
					Если СтрокиОбъекта.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыСостава = ТаблицаСостава.Добавить();
					СтрокаТаблицыСостава.Метаданные = НазваниеТекущегоТипа;
					СтрокаТаблицыСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
				КонецЦикла;
				
			КонецЦикла;
			
			ТаблицаСостава.Сортировать("Метаданные");
			
			Возврат ТаблицаСостава;
			
		ИначеЕсли СтрокаСвойстваМакета.УточнениеТипа = "ПланОбмена" Тогда
			
			ТаблицаСостава = Новый ТаблицаЗначений;
			ТаблицаСостава.Колонки.Добавить("Метаданные");
			ТаблицаСостава.Колонки.Добавить("АвтоРегистрация");
			
			Для Каждого СтрокаЭлементаСостава Из СтрокаСвойстваХМЛ.Строки Цикл
				
				Если СтрокаЭлементаСостава.Имя <> "Item" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыСостава = ТаблицаСостава.Добавить();
				
				СтрокаМетаданные = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаЭлементаСостава, "metadata");
				Если СтрокаМетаданные <> Неопределено Тогда
					ЗначениеМетаданные = СтрокаМетаданные.Значение;
					СтрокаТаблицыСостава.Метаданные = ПутьКОбъектуПеревестиНаРусский(ЗначениеМетаданные,
						СтруктураДанныеДляПолученияСвойств.ТаблицаТиповОбъектов);
				КонецЕсли;
				
				СтрокаАвтоРегистрация = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаЭлементаСостава, "autorecord");
				Если СтрокаАвтоРегистрация <> Неопределено Тогда
					АвтоРегистрацияАнглийский = СтрокаАвтоРегистрация.Значение;
					Если АвтоРегистрацияАнглийский = "Allow" Тогда
						СтрокаТаблицыСостава.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить;
					ИначеЕсли АвтоРегистрацияАнглийский = "Deny" Тогда
						СтрокаТаблицыСостава.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат ТаблицаСостава;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Расписание" Тогда
		
		МассивРасписаний = Новый Массив;
		СформироватьРасписаниеРегламентногоЗадания(МассивРасписаний, СтрокаСвойстваХМЛ, "Schedule",
			СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств);
		Возврат МассивРасписаний;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "ЭлементСтиля" Тогда
		
		СтруктураЗначенияЭлементаСтиля = Новый Структура;
		СформироватьСтруктуруЗначенияЭлементаСтиля(СтруктураЗначенияЭлементаСтиля, СтрокаСвойстваХМЛ,
			СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств);
		
		Возврат СтруктураЗначенияЭлементаСтиля;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Стиль" Тогда
		
		СоставСтиля = Новый Массив;
		СформироватьСоставСтиля(СоставСтиля, СтрокаСвойстваХМЛ, СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств);
		
		Возврат СоставСтиля;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "СвязьПоТипу" Тогда
		
		Возврат "СвязьПоТипу";
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Булево" Тогда
		
		Если СтрокаСвойстваХМЛ.Значение = "false" ИЛИ СтрокаСвойстваХМЛ.Значение = "true" Тогда
			Возврат ПреобразоватьЗначениеКТипу(СтрокаСвойстваХМЛ.Значение,
				"Булево", СтрокаСвойстваМакета.УточнениеТипа, СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств);
		КонецЕсли;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "СоответствиеЗначений" Тогда
		
		НайденноеЗначение = СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств[СтрокаСвойстваХМЛ.Значение];
		Если НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = СтрокаСвойстваХМЛ.Значение;
			
			Если СтрокаСвойстваМакета.СвойствоРусский = "Группа" И СтрНачинаетсяС(НайденноеЗначение, "CommandGroup.") Тогда
				НоваяСтрока = ТаблицаЗаменСвойств.Добавить();
				НоваяСтрока.Ссылка = СтрокаОбъекта.Ссылка;
				НоваяСтрока.ИмяСвойства = СтрокаСвойстваМакета.СвойствоРусский;
				НоваяСтрока.ТипСвойства = "Группа";
			КонецЕсли;
		КонецЕсли;
		Возврат НайденноеЗначение;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "СтрокаАнгл" Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаСвойстваХМЛ.Значение) Тогда
			Возврат СтрокаСвойстваХМЛ.Значение;
		КонецЕсли;
		
		Возврат ПутьКОбъектуПеревестиНаРусский(СтрокаСвойстваХМЛ.Значение,
			СтруктураДанныеДляПолученияСвойств.ТаблицаТиповОбъектов);
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Строка" Тогда
		
		Возврат СтрокаСвойстваХМЛ.Значение;
		
	ИначеЕсли СтрокаСвойстваМакета.ТипСвойства = "Число" Тогда
		
		ЧислоСтрокой = СтрокаСвойстваХМЛ.Значение;
		Попытка
			Возврат Число(ЧислоСтрокой);
		Исключение
			Возврат 0;
		КонецПопытки;
		
	Иначе
		
		Возврат ПреобразоватьЗначениеКТипу(СтрокаСвойстваХМЛ.Значение, СтрокаСвойстваМакета.ТипСвойства,
		СтрокаСвойстваМакета.УточнениеТипа, СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств);
		
	КонецЕсли;
	
	Возврат ПреобразоватьЗначениеКТипу(СтрокаСвойстваМакета.ЗначениеПоУмолчанию, СтрокаСвойстваМакета.ТипСвойства,
	СтрокаСвойстваМакета.УточнениеТипа, СтруктураДанныеДляПолученияСвойств.ЗначенияСвойств);
	
КонецФункции

Функция ЗаполнитьСвойстваОбъектаМетаданных(СписокСвойств, СтрокаСвойствОбъекта, СтрокаОбъекта,
	СтруктураДанныеДляПолученияСвойств, ТаблицаЗаменСвойств)
	
	СтруктураПоискаСвойств = ПолучитьСтруктуруПоискаСвойств(СтрокаОбъекта.ТипОбъекта);
	СтрокиСвойств = СтруктураДанныеДляПолученияСвойств.ТаблицаСвойствОбъектов.НайтиСтроки(СтруктураПоискаСвойств);
	Если СтрокиСвойств.Количество() = 0 Тогда
		Возврат СписокСвойств;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрокаСвойстваМакета Из СтрокиСвойств Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрокаСвойстваМакета.Примечание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрокаСвойстваМакета.СвойствоРусский = "Имя" И СтрокаОбъекта.ТипОбъекта <> "Конфигурация" Тогда
			СписокСвойств.Добавить(СтрокаОбъекта.Наименование, "Имя");
			Продолжить;
		КонецЕсли;
		
		СтрокаПоиска = "";
		Если ТекущаяСтрокаСвойстваМакета.СвойствоРусский = "Состав" И СтрокаОбъекта.ТипОбъекта = "ПланОбмена" Тогда
			ПутьКФайлуХМЛ = СтрЗаменить(СтрокаОбъекта.ПутьКФайлуХМЛ, ".xml", "\Ext\Content.xml");
			ДеревоСвойства = XML_РазобратьФайлВыгрузки(ПутьКФайлуХМЛ);
			СтрокаПоиска = "ExchangePlanContent";
			СтрокаТекущегоСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоСвойства, СтрокаПоиска);
		ИначеЕсли ТекущаяСтрокаСвойстваМакета.СвойствоРусский = "Предопределенные" Тогда
			ПутьКФайлуХМЛ = СтрЗаменить(СтрокаОбъекта.ПутьКФайлуХМЛ, ".xml", "\Ext\Predefined.xml");
			Если НЕ ФайлСуществует(ПутьКФайлуХМЛ) Тогда
				СписокСвойств.Добавить(ПолучитьПустоеДеревоПредопределенных(), "Предопределенные");
				Продолжить;
			КонецЕсли;
			ДеревоСвойства = XML_РазобратьФайлВыгрузки(ПутьКФайлуХМЛ);
			СтрокаПоиска = "PredefinedData";
			СтрокаТекущегоСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоСвойства, СтрокаПоиска);
		ИначеЕсли ТекущаяСтрокаСвойстваМакета.СвойствоРусский = "Расписание" Тогда
			ПутьКФайлуХМЛ = СтрЗаменить(СтрокаОбъекта.ПутьКФайлуХМЛ, ".xml", "\Ext\Schedule.xml");
			Если НЕ ФайлСуществует(ПутьКФайлуХМЛ) Тогда
				СписокСвойств.Добавить("", "Расписание");
				Продолжить;
			КонецЕсли;
			ДеревоСвойства = XML_РазобратьФайлВыгрузки(ПутьКФайлуХМЛ);
			СтрокаПоиска = "JobSchedule";
			СтрокаТекущегоСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоСвойства, СтрокаПоиска);
		ИначеЕсли ТекущаяСтрокаСвойстваМакета.СвойствоРусский = "Стиль" Тогда
			ПутьКФайлуХМЛ = СтрЗаменить(СтрокаОбъекта.ПутьКФайлуХМЛ, ".xml", "\Ext\Style.xml");
			Если НЕ ФайлСуществует(ПутьКФайлуХМЛ) Тогда
				СписокСвойств.Добавить("", "Стиль");
				Продолжить;
			КонецЕсли;
			ДеревоСвойства = XML_РазобратьФайлВыгрузки(ПутьКФайлуХМЛ);
			СтрокаПоиска = "Style";
			СтрокаТекущегоСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоСвойства, СтрокаПоиска);
		ИначеЕсли ТекущаяСтрокаСвойстваМакета.ТипСвойства = "ХешСумма" Тогда
			ЗначениеСвойства = ПолучитьХешСуммуКартинки(СтрокаОбъекта);
			СписокСвойств.Добавить(ЗначениеСвойства, "ХешСумма");
			Продолжить;
		Иначе
			СтрокаПоиска = ТекущаяСтрокаСвойстваМакета.СвойствоАнглийский;
			Если СтрокаОбъекта.ИмяОбъектаХМЛ = "Атрибуты.Name" Тогда
				СтрокаПоиска = "xr:" + СтрокаПоиска;
			КонецЕсли;
			СтрокаТекущегоСвойства = ПолучитьСтрокуДереваПоПравилуПоиска(СтрокаСвойствОбъекта, СтрокаПоиска);
		КонецЕсли;
		
		Если СтрокаТекущегоСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСвойства = СчитатьЗначениеСвойстваМетаданных(ТекущаяСтрокаСвойстваМакета, СтрокаТекущегоСвойства,
			СтруктураДанныеДляПолученияСвойств, ТаблицаЗаменСвойств, СтрокаОбъекта);
			
		СписокСвойств.Добавить(ЗначениеСвойства, ТекущаяСтрокаСвойстваМакета.СвойствоРусский);
	КонецЦикла;
	
	Возврат СписокСвойств;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруТипа()
	СтруктураТипОбъекта = Новый Структура("Тип, ЧастиДаты, Длина, ДопустимаяДлина, ДопустимыйЗнак,
		| Разрядность, РазрядностьДробнойЧасти, ТаблицаТипов");
	
	СтруктураТипОбъекта.ЧастиДаты               = "Дата и время"; // АПК:1297 - не локализуется
	СтруктураТипОбъекта.Длина                   = 0;
	СтруктураТипОбъекта.ДопустимаяДлина         = "Переменная";
	СтруктураТипОбъекта.ДопустимыйЗнак          = "Любой";
	СтруктураТипОбъекта.Разрядность             = 0;
	СтруктураТипОбъекта.РазрядностьДробнойЧасти = 0;
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Тип");
	ТаблицаТипов.Колонки.Добавить("КвалификаторыТипа");
	СтруктураТипОбъекта.ТаблицаТипов = ТаблицаТипов;
	
	МассивТипов = Новый Массив;
	СтруктураТипОбъекта.Тип = МассивТипов;
	
	Возврат СтруктураТипОбъекта;
	
КонецФункции

Функция ПутьКОбъектуПеревестиНаРусский(Путь, ТаблицаТиповОбъектов, Разделитель = ".", ФлагМнЧисло = Ложь)
	
	ПутьРусский = Путь;
	
	МассивПути = СтрРазделить(Путь, Разделитель, Ложь);
	Если МассивПути.Количество() = 0 Тогда
		Возврат ПутьРусский;
	КонецЕсли;
	
	ИмяКолонкиПоиска   = ?(ФлагМнЧисло, "ИмяАнглМнФормы", "ИмяАнгл");
	ИмяКолонкиЗначения = ?(ФлагМнЧисло, "ИмяМнФормы", "Имя");
	
	Если МассивПути.Количество() = 1 Тогда
		Возврат ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивПути[0],
			ИмяКолонкиПоиска, ИмяКолонкиЗначения, МассивПути[0]);
	ИначеЕсли МассивПути.Количество() = 2 Тогда
		Возврат ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивПути[0],
			ИмяКолонкиПоиска, ИмяКолонкиЗначения, МассивПути[0]) + Разделитель + МассивПути[1];
	ИначеЕсли МассивПути.Количество() = 3 Тогда
		Возврат ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивПути[0],
			ИмяКолонкиПоиска, ИмяКолонкиЗначения, МассивПути[0]) + Разделитель + МассивПути[1] + Разделитель
			+ ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивПути[2],
			ИмяКолонкиПоиска, ИмяКолонкиЗначения, МассивПути[2]);
	ИначеЕсли МассивПути.Количество() = 4 Тогда
		Возврат ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивПути[0],
			ИмяКолонкиПоиска, ИмяКолонкиЗначения, МассивПути[0]) + Разделитель + МассивПути[1] + Разделитель
			+ ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивПути[2],
			ИмяКолонкиПоиска, ИмяКолонкиЗначения, МассивПути[2]) + Разделитель + МассивПути[3];
	КонецЕсли;
	
	Возврат ПутьРусский;
	
КонецФункции

Функция ПолучитьЗначенияСвойствДляПеревода(Конфигурация)
	
	СоответствиеЗначений = Новый Соответствие;
	
	// Группы команд
	СоответствиеЗначений.Вставить("NavigationPanelImportant", НСтр("ru='Панель навигации.Важное'"));
	СоответствиеЗначений.Вставить("NavigationPanelOrdinary", НСтр("ru='Панель навигации.Обычное'"));
	СоответствиеЗначений.Вставить("NavigationPanelSeeAlso", НСтр("ru='Панель навигации.См. также'"));
	СоответствиеЗначений.Вставить("ActionsPanelTools", НСтр("ru='Панель действий.Сервис'"));
	СоответствиеЗначений.Вставить("ActionsPanelReports", НСтр("ru='Панель действий.Отчеты'"));
	СоответствиеЗначений.Вставить("ActionsPanelCreate", НСтр("ru='Панель действий.Создать'"));
	СоответствиеЗначений.Вставить("FormCommandBarCreateBasedOn",
		НСтр("ru='Командная панель формы.Создать на основании'"));
	СоответствиеЗначений.Вставить("FormCommandBarImportant", НСтр("ru='Командная панель формы.Важное'"));
	СоответствиеЗначений.Вставить("CommandGroup.Информация", НСтр("ru='Панель действий.Информация'"));
	СоответствиеЗначений.Вставить("CommandGroup.Печать", НСтр("ru='Командная панель формы.Печать'"));
	СоответствиеЗначений.Вставить("FormNavigationPanelSeeAlso", НСтр("ru='Панель навигации формы.См. также'"));
	СоответствиеЗначений.Вставить("FormNavigationPanelImportant", НСтр("ru='Панель навигации формы.Важное'"));
	СоответствиеЗначений.Вставить("FormNavigationPanelGoTo", НСтр("ru='Панель навигации формы.Перейти'"));
	
	// Категории команд
	СоответствиеЗначений.Вставить("ActionsPanel", НСтр("ru='Панель действий'"));
	СоответствиеЗначений.Вставить("FormCommandBar", НСтр("ru='Командная панель формы'"));
	СоответствиеЗначений.Вставить("NavigationPanel", НСтр("ru='Панель навигации'"));
	СоответствиеЗначений.Вставить("FormNavigationPanel", НСтр("ru='Панель навигации формы'"));
	
	// События подписок
	СоответствиеЗначений.Вставить("OnSetNewCode", "ПриУстановкеНовогоКода");
	СоответствиеЗначений.Вставить("OnCopy", "ПриКопировании");
	СоответствиеЗначений.Вставить("Filling", "ОбработкаЗаполнения");
	СоответствиеЗначений.Вставить("BeforeWrite", "ПередЗаписью");
	СоответствиеЗначений.Вставить("OnWrite", "ПриЗаписи");
	СоответствиеЗначений.Вставить("BeforeDelete", "ПередУдалением");
	СоответствиеЗначений.Вставить("FillCheckProcessing", "ОбработкаПроверкиЗаполнения");
	СоответствиеЗначений.Вставить("Posting", "ОбработкаПроведения");
	СоответствиеЗначений.Вставить("UndoPosting", "ОбработкаУдаленияПроведения");
	СоответствиеЗначений.Вставить("InteractiveActivationProcessing", "ОбработкаИнтерактивнойАктивации");
	СоответствиеЗначений.Вставить("CheckExecutionProcessing", "ОбработкаПроверкиВыполнения");
	СоответствиеЗначений.Вставить("BeforeExecute", "ПередВыполнением");
	СоответствиеЗначений.Вставить("BeforeExecuteInteractively", "ПередИнтерактивнымВыполнением");
	СоответствиеЗначений.Вставить("OnExecute", "ПриВыполнении");
	СоответствиеЗначений.Вставить("OnSendDataToSlave", "ПриОтправкеДанныхПодчиненному");
	СоответствиеЗначений.Вставить("OnSendDataToMaster", "ПриОтправкеДанныхГлавному");
	СоответствиеЗначений.Вставить("OnReceiveDataFromSlave", "ПриПолученииДанныхОтПодчиненного");
	СоответствиеЗначений.Вставить("OnReceiveDataFromMaster", "ПриПолученииДанныхОтГлавного");
	СоответствиеЗначений.Вставить("OnSendNodeDataToSlave", "ПриОтправкеДанныхУзлаПодчиненному");
	СоответствиеЗначений.Вставить("OnReceiveNodeDataFromMaster", "ПриПолученииДанныхУзлаОтГлавного");
	СоответствиеЗначений.Вставить("ChoiceDataGetProcessing", "ОбработкаПолученияДанныхВыбора");
	СоответствиеЗначений.Вставить("FormGetProcessing", "ОбработкаПолученияФормы");
	СоответствиеЗначений.Вставить("PresentationFieldsGetProcessing", "ОбработкаПолученияПолейПредставления");
	СоответствиеЗначений.Вставить("PresentationGetProcessing", "ОбработкаПолученияПредставления");
	СоответствиеЗначений.Вставить("LoadProcessing", "ОбработкаЗагрузки");
	СоответствиеЗначений.Вставить("SaveProcessing", "ОбработкаСохранения");
	СоответствиеЗначений.Вставить("GetDescriptionProcessing", "ОбработкаПолученияОписания");
	СоответствиеЗначений.Вставить("SetDescriptionProcessing", "ОбработкаУстановкиОписания");
	СоответствиеЗначений.Вставить("OnSetNewNumber", "ПриУстановкеНовогоНомера");
	
	// Перечисление ОбновлениеПредопределенныхДанных
	СоответствиеЗначений.Вставить("Auto", "Авто");
	СоответствиеЗначений.Вставить("DontAutoUpdate", "НеОбновлятьАвтоматически");
	СоответствиеЗначений.Вставить("AutoUpdate", "ОбновлятьАвтоматически");
	
	// Имена атрибутов регламентного задания.
	СоответствиеЗначений.Вставить("BeginDate", "ДатаНачала");
	СоответствиеЗначений.Вставить("EndDate", "ДатаКонца");
	СоответствиеЗначений.Вставить("BeginTime", "ВремяНачала");
	СоответствиеЗначений.Вставить("EndTime", "ВремяКонца");
	СоответствиеЗначений.Вставить("CompletionTime", "ВремяЗавершения");
	СоответствиеЗначений.Вставить("CompletionInterval", "ИнтервалЗавершения");
	СоответствиеЗначений.Вставить("RepeatPeriodInDay", "ПериодПовтораВТечениеДня");
	СоответствиеЗначений.Вставить("RepeatPause", "ПаузаПовтора");
	СоответствиеЗначений.Вставить("WeekDayInMonth", "ДеньНеделиВМесяце");
	СоответствиеЗначений.Вставить("DayInMonth", "ДеньВМесяце");
	СоответствиеЗначений.Вставить("WeeksPeriod", "ПериодНедель");
	СоответствиеЗначений.Вставить("DaysRepeatPeriod", "ПериодПовтораДней");
	
	// Режим совместимости "НеИспользовать"
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	НомерРелиза = ПолучитьВерсиюПлатформыДляЗапуска(СтрокаЗапускаПлатформы);
	НомерВерсии = ПолучитьНомерВерсииБезСборки(НомерРелиза);
	ТекущаяВерсия = "Version" + СтрЗаменить(НомерВерсии, ".", "_");
	СоответствиеЗначений.Вставить("Метаданные.СвойстваОбъектов.РежимСовместимости." + ТекущаяВерсия, "НеИспользовать");
	
	Возврат СоответствиеЗначений;
	
КонецФункции

Функция ПолучитьСтруктуруПоискаСвойств(ТипОбъектаТекущий)
	
	ТипОбъектаДляПоискаСвойств = ТипОбъектаТекущий;
	
	Если ТипОбъектаТекущий = "УправляемаяФорма" Тогда
		ТипОбъектаДляПоискаСвойств = "Форма";
	КонецЕсли;
	
	Если ТипОбъектаТекущий = "ОбщаяУправляемаяФорма" Тогда
		ТипОбъектаДляПоискаСвойств = "ОбщаяФорма";
	КонецЕсли;
	
	Возврат Новый Структура("ТипОбъектаРусский", ТипОбъектаДляПоискаСвойств);
КонецФункции

Функция ПолучитьСтрокуСвойствОбъектаВДеревеХМЛ(Дерево, СтрокаОбъекта, ТаблицаТиповОбъектов)
	
	СтрокаСвойствОбъекта = Неопределено;
	
	СтрокаПоиска = НРег(СтрокаОбъекта.ПутьВДеревеХМЛ);
	
	Если НЕ ЗначениеЗаполнено(СтрокаОбъекта.ИмяОбъектаХМЛ) Тогда
		Возврат ПолучитьСтрокуДереваПоПравилуПоиска(Дерево, СтрокаПоиска);
	КонецЕсли;
	
	СтрокаПоиска = СтрокаПоиска + "." + НРег(СтрокаОбъекта.ИмяОбъектаХМЛ);
	СтрокиИменПодчиненныхОбъектов = НайтиСтрокиДереваДанных(СтрокаПоиска, Дерево);
	
	Для Каждого СтрокаИмени Из СтрокиИменПодчиненныхОбъектов Цикл
		
		ИмяОбъекта = СтрокаИмени.Значение;
		Если СтрокаОбъекта.ИмяОбъектаХМЛ = "Атрибуты.Name" Тогда
			ИмяОбъекта = ПутьКОбъектуПеревестиНаРусский(СтрокаИмени.Значение, ТаблицаТиповОбъектов);
		КонецЕсли;
		
		Если ИмяОбъекта <> СтрокаОбъекта.Наименование Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОбъекта.ИмяОбъектаХМЛ = "Атрибуты.Name" Тогда
			Возврат СтрокаИмени.Родитель.Родитель;
		Иначе
			Возврат СтрокаИмени.Родитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТаблицуТиповОбъектовДляСвойств()
	
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DocumentNumerator";
	СтрокаТипаОбъекта.Имя = "НумераторДокументов";
	СтрокаТипаОбъекта.ИмяМнФормы = "НумераторыДокументов";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DocumentNumerators";
	
	Возврат ТаблицаТиповОбъектов;
	
КонецФункции

Функция ПолучитьТаблицуСвойствОбъектовМетаданных()
	
	МакетСвойств = ПолучитьОбщийМакет("СвойстваОбъектовМетаданных");
	ТаблицаСвойствОбъектов = СформироватьТаблицуЗначенийИзМакета(МакетСвойств);
	ТаблицаСвойствОбъектов.Индексы.Добавить("ТипОбъектаРусский");
	
	Возврат ТаблицаСвойствОбъектов;
	
КонецФункции

Функция ВыполнитьЗаменыЗначенийСвойств(СведенияОбОбъектах, ТаблицаЗаменСвойств, ТаблицаОбъектов)
	
	Для Каждого СтрокаЗамены Из ТаблицаЗаменСвойств Цикл
		
		СтруктураНайденногоСвойства = НайтиСвойствоОбъектаВСведениях(СведенияОбОбъектах, СтрокаЗамены.Ссылка,
			СтрокаЗамены.ИмяСвойства);
		Если СтруктураНайденногоСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтруктураНайденногоСвойства.ЭлементСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолученноеЗначениеСвойства = Неопределено;
		Если СтрокаЗамены.ТипСвойства = "Группа" Тогда
			
			ТекущаяГруппа = СтруктураНайденногоСвойства.Значение;
			МассивТекущаяГруппа = СтрРазделить(ТекущаяГруппа, ".", Ложь);
			Если МассивТекущаяГруппа.Количество() <> 2 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяОбъекта = МассивТекущаяГруппа[1];
			СтруктураПоискаОбъекта = Новый Структура("Путь, ТипОбъекта", "Общие.ГруппыКоманд." + ИмяОбъекта, "ГруппаКоманд");
			СтрокиОбъекта = ТаблицаОбъектов.НайтиСтроки(СтруктураПоискаОбъекта);
			Если СтрокиОбъекта.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураНайденногоСвойстваКатегория = НайтиСвойствоОбъектаВСведениях(СведенияОбОбъектах, СтрокиОбъекта[0].Ссылка,
				"Категория");
			Если СтруктураНайденногоСвойстваКатегория = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтруктураНайденногоСвойстваКатегория.ЭлементСписка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураНайденногоСвойстваСиноним = НайтиСвойствоОбъектаВСведениях(СведенияОбОбъектах, СтрокиОбъекта[0].Ссылка,
				"Синоним");
			Если СтруктураНайденногоСвойстваСиноним = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтруктураНайденногоСвойстваСиноним.ЭлементСписка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяГруппыКоманд = СтруктураНайденногоСвойстваСиноним.Значение;
			Если ПустаяСтрока(ИмяГруппыКоманд) Тогда
				ИмяГруппыКоманд = ИмяОбъекта;
			КонецЕсли;
			
			ПолученноеЗначениеСвойства = СтруктураНайденногоСвойстваКатегория.Значение+"."+ИмяГруппыКоманд;
			
		ИначеЕсли СтрокаЗамены.ТипСвойства = "Тип" Тогда
			
			ИсходнаяСтруктураТипа = СтруктураНайденногоСвойства.Значение;
			МассивТипов = ИсходнаяСтруктураТипа.Тип;
			
			СтруктураУстанавливаемогоТипа = ИсходнаяСтруктураТипа;
			
			ИзмененоЗначениеТипа = Ложь;
			НовыйМассивТипов = Новый Массив;
			НовыйМассивДобавляемыхТипов = Новый Массив;
			Для Каждого ТекущийТип Из МассивТипов Цикл
				
				НовыйМассивТипов.Добавить(ТекущийТип);
				
				СтрокаТипа = "" + ТекущийТип;
				ТипОбъектаДляПоиска = "";
				Если СтрНачинаетсяС(ТекущийТип, "Характеристика.") Тогда
					СтрокаТипа = СтрЗаменить(СтрокаТипа, "Характеристика.", "ПланыВидовХарактеристик.");
					ТипОбъектаДляПоиска = "ПланВидовХарактеристик";
				ИначеЕсли СтрНачинаетсяС(ТекущийТип, "ОпределяемыйТип.") Тогда
					СтрокаТипа = СтрЗаменить(СтрокаТипа, "ОпределяемыйТип.", "Общие.ОпределяемыеТипы.");
					ТипОбъектаДляПоиска = "ОпределяемыйТип";
				Иначе
					Продолжить;
				КонецЕсли;
				
				СтруктураПоискаОбъекта = Новый Структура("Путь, ТипОбъекта", СтрокаТипа, ТипОбъектаДляПоиска);
				СтрокиОбъекта = ТаблицаОбъектов.НайтиСтроки(СтруктураПоискаОбъекта);
				Если СтрокиОбъекта.Количество() <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураНайденногоСвойстваТип = НайтиСвойствоОбъектаВСведениях(СведенияОбОбъектах, СтрокиОбъекта[0].Ссылка,
					"Тип");
				Если СтруктураНайденногоСвойстваТип = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если СтруктураНайденногоСвойстваТип.ЭлементСписка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИзмененоЗначениеТипа = Истина;
				НовыйМассивТипов.Удалить(НовыйМассивТипов.Количество()-1);
				Для Каждого ТекущийНовыйТип Из СтруктураНайденногоСвойстваТип.Значение.Тип Цикл
					НовыйМассивДобавляемыхТипов.Добавить(ТекущийНовыйТип);
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(СтруктураУстанавливаемогоТипа, СтруктураНайденногоСвойстваТип.Значение,
					"Длина, ДопустимаяДлина, ДопустимыйЗнак, Разрядность, РазрядностьДробнойЧасти, ЧастиДаты");
			КонецЦикла;
			
			Если НЕ ИзмененоЗначениеТипа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекущийДобавляемыйТип Из НовыйМассивДобавляемыхТипов Цикл
				Если НовыйМассивТипов.Найти(ТекущийДобавляемыйТип) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НовыйМассивТипов.Добавить(ТекущийДобавляемыйТип);
			КонецЦикла;
			
			СтруктураУстанавливаемогоТипа.Тип = НовыйМассивТипов;
			ПолученноеЗначениеСвойства = СтруктураУстанавливаемогоТипа;
			
		КонецЕсли;
		
		Если ПолученноеЗначениеСвойства <> Неопределено Тогда
			СтруктураНайденногоСвойства.СписокСвойств.Удалить(СтруктураНайденногоСвойства.ЭлементСписка);
			СтруктураНайденногоСвойства.СписокСвойств.Добавить(ПолученноеЗначениеСвойства, СтрокаЗамены.ИмяСвойства);
			НовыеСведения = ВернутьХранилищеЗначения(СтруктураНайденногоСвойства.СписокСвойств);
			СведенияОбОбъектах.Вставить(СтрокаЗамены.Ссылка, НовыеСведения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция НайтиСвойствоОбъектаВСведениях(СведенияОбОбъектах, СсылкаСтруктурыКонфигурации, ИмяСвойства)
	
	СведенияОбъекта = СведенияОбОбъектах.Получить(СсылкаСтруктурыКонфигурации);
	Если СведенияОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокСвойств = СведенияОбъекта.Получить();
	СтруктураРезультат = Новый Структура("СписокСвойств, ЭлементСписка, Значение",
	СписокСвойств, Неопределено, Неопределено);
	
	ЭлементСписка = Неопределено;
	Для Каждого ТекущийЭлемент Из СписокСвойств Цикл
		Если ТекущийЭлемент.Представление = ИмяСвойства Тогда
			ЭлементСписка = ТекущийЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	СтруктураРезультат.ЭлементСписка = ЭлементСписка;
	СтруктураРезультат.Значение = ЭлементСписка.Значение;
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеОсновногоЯзыкаКонфигурации

Функция ПолучитьОсновнойЯзыкКонфигурации(ПараметрыПроверки, КаталогВыгрузкиФайлов) Экспорт
	
	Если ПараметрыПроверки.Свойство("ОсновнойЯзык") И ЗначениеЗаполнено(ПараметрыПроверки.ОсновнойЯзык) Тогда
		Возврат ПараметрыПроверки.ОсновнойЯзык;
	КонецЕсли;
	
	Результат = ПолучитьОсновнойЯзыкИзФайловXML(КаталогВыгрузкиФайлов);
	Если Результат.Успешно Тогда
		ОсновнойЯзык = Результат.ОсновнойЯзык;
		ПараметрыПроверки.Вставить("ОсновнойЯзык", ОсновнойЯзык);
	Иначе
		ОсновнойЯзык = "RU";
	КонецЕсли;
	
	Возврат ОсновнойЯзык;
	
КонецФункции

Функция ПолучитьОсновнойЯзыкИзФайловXML(КаталогВыгрузкиФайлов)
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ОсновнойЯзык", "");
	
	КаталогВыгрузкиФайлов = ОтредактироватьПутьККаталогу(КаталогВыгрузкиФайлов);
	ФайлСвойствКонфигурации = КаталогВыгрузкиФайлов + "Configuration.xml";
	Если НЕ ФайлСуществует(ФайлСвойствКонфигурации) Тогда
		ТекстОшибки = НСтр("ru='Не удалось найти файл: %1'");
		Результат.ТекстОшибки = СтрШаблон(ТекстОшибки, ФайлСвойствКонфигурации);
		Возврат Результат;
	КонецЕсли;
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлСвойствКонфигурации);
	ПутьПоиска = "MetaDataObject.Configuration.Properties.DefaultLanguage";
	СтрокаЯзыка = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПутьПоиска);
	Если СтрокаЯзыка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗначениеЯзыка = СтрокаЯзыка.Значение;
	ЗначениеЯзыка = СтрЗаменить(ЗначениеЯзыка, "Language.", "");
	
	ФайлЯзыка = СтрШаблон("%1Languages\%2.xml", КаталогВыгрузкиФайлов, ЗначениеЯзыка);
	Если НЕ ФайлСуществует(ФайлЯзыка) Тогда
		ТекстОшибки = НСтр("ru='Не удалось найти файл: %1'");
		Результат.ТекстОшибки = СтрШаблон(ТекстОшибки, ФайлЯзыка);
		Возврат Результат;
	КонецЕсли;
	
	ДеревоДанных = XML_РазобратьФайлВыгрузки(ФайлЯзыка);
	ПутьПоиска = "MetaDataObject.Language.Properties.LanguageCode";
	СтрокаКодаЯзыка = ПолучитьСтрокуДереваПоПравилуПоиска(ДеревоДанных, ПутьПоиска);
	Если СтрокаКодаЯзыка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОсновнойЯзык = СтрокаКодаЯзыка.Значение;
	Результат.Успешно = Истина;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти