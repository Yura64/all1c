
#Область РегистрацияСообщений

// Фиксирует в виде сообщения пользователю событие с указанием времени и содержания.
//
Процедура Зафиксировать(Конфигурация, Уровень, Комментарий, ЖурналПроверки = "", ТаблицаЖурнала = Неопределено) Экспорт
	
	ДатаПроверки = Формат(ТекущаяДатаСеанса(), "ДФ=""ггггММдд""");
	
	ИмяСобытия = СтрЗаменить(Конфигурация, ".", "_");
	ИмяСобытия = СтрШаблон(НСтр("ru='Проверка конфигурации.%1.%2'", Метаданные.ОсновнойЯзык.КодЯзыка),
		ИмяСобытия, ДатаПроверки);
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,, Комментарий);
	
	ТекстСообщения = ДобавитьТекущуюДатуВКомментарий(Комментарий);
	
	#Если Клиент Тогда
	Сообщить(ТекстСообщения);
	#КонецЕсли
	
	Если ПустаяСтрока(ЖурналПроверки) Тогда
		ЖурналПроверки = ТекстСообщения;
	Иначе
		ЖурналПроверки = ЖурналПроверки + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	
	Если ТаблицаЖурнала <> Неопределено Тогда
		
		Порядок = 1;
		КоличествоСтрок = ТаблицаЖурнала.Количество();
		Если КоличествоСтрок > 0 Тогда
			ПоследняяСтрока = ТаблицаЖурнала[КоличествоСтрок - 1];
			Порядок = ПоследняяСтрока.Порядок + 1;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЖурнала.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Время = ТекущаяДата();
		НоваяСтрока.Порядок = Порядок;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьТекущуюДатуВКомментарий(Комментарий) Экспорт
	
	Возврат СтрШаблон("[%1]: %2", ТекущаяДатаСеанса(), Комментарий);
	
КонецФункции

#КонецОбласти

#Область РаботаСПользователями

// Процедура фиксирует в регистре настроек значение настройки по текущему или переданному пользователю.
//
Процедура ЗаписатьНастройку(ИмяНастройки, ЗначениеНастройки, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	МенеджерНастройки = РегистрыСведений.НастройкиПользователя.СоздатьМенеджерЗаписи();
	МенеджерНастройки.Настройка = ИмяНастройки;
	МенеджерНастройки.Пользователь = Пользователь;
	МенеджерНастройки.Значение = Новый ХранилищеЗначения(ЗначениеНастройки);
	
	МенеджерНастройки.Записать();
	
КонецПроцедуры

// Функция возвращает значение настройки, запомненное ранее в регистре или неопределено,
// если сведений о такой настройке нет.
// Если пользователь неопределен, то считывается значение настройки для текущего пользователя.
//
Функция ПрочитатьНастройку(ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяНастройки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ЗапросПоНастройке = Новый Запрос;
	ЗапросПоНастройке.Текст = "
	|ВЫБРАТЬ
	|	НастройкиПользователя.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|ГДЕ
	|	НастройкиПользователя.Настройка = &Настройка
	|	И НастройкиПользователя.Пользователь = &Пользователь";
	
	ЗапросПоНастройке.УстановитьПараметр("Настройка", ИмяНастройки);
	ЗапросПоНастройке.УстановитьПараметр("Пользователь", Пользователь);
	
	ВыборкаНастроек = ЗапросПоНастройке.Выполнить().Выбрать();
	
	Если ВыборкаНастроек.Следующий() Тогда
		Возврат ВыборкаНастроек.Значение.Получить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает список ссылок на элементы справочника "Требования", подчиненные элементам
// с наименованием "Система стандартов" и "1С:Совместимо".
//
Функция СформироватьСписокСсылокТребования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	(Требования.Ссылка В ИЕРАРХИИ (&СсылкаСистемаСтандартов)
	|	ИЛИ Требования.Ссылка В ИЕРАРХИИ (&Ссылка1ССовместимо))";
	
	Запрос.УстановитьПараметр("СсылкаСистемаСтандартов", Справочники.Требования.СистемаСтандартов);
	Запрос.УстановитьПараметр("Ссылка1ССовместимо", Справочники.Требования.Совместимо);
	
	Возврат Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0));
	
КонецФункции

// Функция возвращает список ссылок на элементы справочника "Правила", подчиненные элементам
// с наименованием "Прочие правила проверок".
//
Функция СформироватьСписокСсылокПравила() Экспорт
	
	ЭлементПрочиеПравилаПроверок = Справочники.Правила.НайтиПоНаименованию("Прочие правила проверок");
	
	Если ЭлементПрочиеПравилаПроверок.Пустая() Тогда
		Возврат Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	ЗапросПоНаименованию = Новый Запрос;
	ЗапросПоНаименованию.Текст = "
	|ВЫБРАТЬ
	|	Правила.Ссылка
	|ИЗ
	|	Справочник.Правила КАК Правила
	|ГДЕ
	|	Правила.Наименование = &ПрочиеПравилаПроверок
	|	И Правила.Родитель.Ссылка ЕСТЬ NULL";
	ЗапросПоНаименованию.УстановитьПараметр("ПрочиеПравилаПроверок", НСтр("ru='Прочие правила проверок'"));
	
	СсылкиПрочиеПравилаПроверок = ЗапросПоНаименованию.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Правила.Ссылка
	|ИЗ
	|	Справочник.Правила КАК Правила
	|ГДЕ
	|	Правила.Ссылка В ИЕРАРХИИ (&ПрочиеПравилаПроверок)";
	Запрос.УстановитьПараметр("ПрочиеПравилаПроверок", СсылкиПрочиеПравилаПроверок);
	
	Возврат Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0));
	
КонецФункции

// Функция возвращает текущего пользователя информационной базы.
//
Функция ОпределитьТекущегоПользователя() Экспорт
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИмяПользователя = ТекущийПользовательИБ.Имя;
	Если ПустаяСтрока(ИмяПользователя) Тогда
		
		ИмяПользователя = НСтр("ru='Не авторизован'");
		ПолноеИмяПользователя = НСтр("ru='Не авторизован'");
		
	Иначе
		
		ПолноеИмяПользователя = ТекущийПользовательИБ.ПолноеИмя;
		Если ПустаяСтрока(ПолноеИмяПользователя) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПользователяОС = ТекущийПользовательИБ.ПользовательОС;
	АутентификацияОС = ТекущийПользовательИБ.АутентификацияОС;
	ПрименятьАутентификациюОС = АутентификацияОС И ЗначениеЗаполнено(ИмяПользователяОС);
	Если ПрименятьАутентификациюОС Тогда
		ТекущийПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ПользовательОС", НРег(ИмяПользователяОС));
		
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			Возврат ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию(ПолноеИмяПользователя, Истина);
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Если ПрименятьАутентификациюОС И НЕ ЗначениеЗаполнено(ТекущийПользователь.ПользовательОС) Тогда
			ОбъектПользователь = ТекущийПользователь.ПолучитьОбъект();
			ОбъектПользователь.ПользовательОС = ИмяПользователяОС;
			ОбъектПользователь.Записать();
		КонецЕсли;
		
		Возврат ТекущийПользователь;
	КонецЕсли;
	
	ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ПолноеИмяПользователя);
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Если ПрименятьАутентификациюОС И НЕ ЗначениеЗаполнено(ТекущийПользователь.ПользовательОС) Тогда
			ОбъектПользователь = ТекущийПользователь.ПолучитьОбъект();
			ОбъектПользователь.ПользовательОС = ИмяПользователяОС;
			ОбъектПользователь.Записать();
		КонецЕсли;
		
		Возврат ТекущийПользователь;
	КонецЕсли;
	
	Если ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;
		Если ПрименятьАутентификациюОС Тогда
			ОбъектПользователь.ПользовательОС = ИмяПользователяОС;
		КонецЕсли;
		ОбъектПользователь.Записать();
		
		ТекущийПользователь = ОбъектПользователь.Ссылка;
		
	КонецЕсли;
	
	Возврат ТекущийПользователь;
	
КонецФункции

// Проверяет наличие необходимых прав на выполнение действия.
//
Функция ВыбранаРольПользователя() Экспорт
	
	Возврат НЕ ВыбранаРольАудитор();
	
КонецФункции

// Возвращает Истину, если у пользователя полные права.
//
Функция ВыбранаРольПолныеПрава() Экспорт
	
	Возврат РольДоступна("ПолныеПрава") ИЛИ ПустаяСтрока(ИмяПользователя());
	
КонецФункции

// Возвращает Истину, если у пользователя полные права или права аудитора.
//
Функция ВыбранаРольАудитор() Экспорт
	
	Возврат ВыбранаРольПолныеПрава() ИЛИ РольДоступна("Аудитор");
	
КонецФункции

// Возвращает Истину, если у пользователя полные права или права разработчика правил проверок.
//
Функция ВыбранаРольРазработчикПравилПроверок() Экспорт
	
	Возврат ВыбранаРольПолныеПрава() ИЛИ РольДоступна("РазработчикПравилПроверок");
	
КонецФункции

#КонецОбласти

#Область УстановкаФлажковОбъектовСтруктурыКонфигурации

Функция НайтиСтрокуКэшаУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка) Экспорт
	
	Возврат КэшУстановленныхФлажков.Найти(Ссылка, "Ссылка");
	
КонецФункции

// Вызывается при наступлении события при изменении флага.
//
Функция ПриИзмененииФлажкаОсновной(КэшУстановленныхФлажков, Элемент, Версия) Экспорт
	
	Ссылка = ?(ТипЗнч(Элемент) = Тип("СправочникСсылка.СтруктураКонфигурации"), Элемент, Элемент.ТекущаяСтрока);
	
	СтароеЗначение = НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка);
	ПромежуточноеЗначение = ?(ПроверкаЗаполненностиФлажковОсновной(КэшУстановленныхФлажков, Ссылка), 2, 0);
	НовоеЗначение = ?(СтароеЗначение = 1, ПромежуточноеЗначение, 1);
	
	ИзменитьКэшУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка, НовоеЗначение);
	
	УстановитьФлажокРодителюОсновной(КэшУстановленныхФлажков, Ссылка, Справочники.СтруктураКонфигурации.ПустаяСсылка());
	
КонецФункции

// Поиск в кэше установленных ранее флажков.
//
Функция НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка) Экспорт
	
	СтрокаКэша = НайтиСтрокуКэшаУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка);
	Возврат ?(СтрокаКэша = Неопределено, 0, СтрокаКэша.Значение);
	
КонецФункции

// Изменение в кэше установленных ранее флажков.
//
Функция ИзменитьКэшУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка, НовоеЗначение) Экспорт
	
	СтароеЗначение = НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка);
	Если СтароеЗначение = НовоеЗначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтароеЗначение = 0 Тогда
		НоваяСтрока = КэшУстановленныхФлажков.Добавить();
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.Значение = НовоеЗначение;
	ИначеЕсли НовоеЗначение = 0 Тогда
		Строка = НайтиСтрокуКэшаУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка);
		КэшУстановленныхФлажков.Удалить(Строка);
	Иначе
		Строка = НайтиСтрокуКэшаУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка);
		Строка.Значение = НовоеЗначение;
	КонецЕсли;
	
КонецФункции

// Объединяет содержимое двух переменных с типом ТаблицаЗначений.
//
Функция ОбъединитьТаблицы(Приемник, Источник) Экспорт
	
	Для Каждого СтрокаТаблицы Из Источник Цикл
		СтрокаПриемника = Приемник.Найти(СтрокаТаблицы.Ссылка, "Ссылка");
		ЗаполнитьЗначенияСвойств(?(СтрокаПриемника = Неопределено, Приемник.Добавить(), СтрокаПриемника), СтрокаТаблицы);
	КонецЦикла;
	
КонецФункции

// Устанавливает флажки.
//
Функция УстановитьФлажкиОсновной(КэшУстановленныхФлажков, Ссылка, НовоеЗначение, Версия,
	ФлагВыделенияВсехОбъектов = Истина) Экспорт
	
	ФлагВыбораВсех = (Ссылка = Справочники.СтруктураКонфигурации.ПустаяСсылка());
	Если НЕ ФлагВыбораВсех Тогда
		ИзменитьКэшУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка, НовоеЗначение);
	КонецЕсли;
	
	СсылкаПодсистемы = Справочники.СтруктураКонфигурации.НайтиПоНаименованию("Подсистемы", Истина,, Версия);
	
	Если ФлагВыбораВсех И ФлагВыделенияВсехОбъектов Тогда
		ЗапросПоОбъектам = Новый Запрос;
		ЗапросПоОбъектам.Текст = "
			|ВЫБРАТЬ
			|	СтруктураКонфигурации.Ссылка
			|ИЗ
			|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
			|ГДЕ
			|	СтруктураКонфигурации.Владелец = &Владелец
			|	" + ?(НовоеЗначение = 1, "", "	И СтруктураКонфигурации.Ссылка В(&МассивСсылок)") + "
			|	И СтруктураКонфигурации.Ссылка НЕ В ИЕРАРХИИ(&СсылкаПодсистемы)";
		
		ЗапросПоОбъектам.УстановитьПараметр("МассивСсылок", КэшУстановленныхФлажков);
		ЗапросПоОбъектам.УстановитьПараметр("СсылкаПодсистемы", СсылкаПодсистемы);
		ЗапросПоОбъектам.УстановитьПараметр("Владелец", Версия);
		ЗапросПоОбъектам.УстановитьПараметр("Ссылка", Ссылка);
		
		ТаблицаСтруктураКонфигурации = ЗапросПоОбъектам.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаСтруктураКонфигурации = Новый ТаблицаЗначений;
		ТаблицаСтруктураКонфигурации.Колонки.Добавить("Ссылка");
		Если ФлагВыбораВсех Тогда
			Выборка = Справочники.СтруктураКонфигурации.ВыбратьИерархически(СсылкаПодсистемы.Родитель, Версия);
		Иначе
			Выборка = Справочники.СтруктураКонфигурации.ВыбратьИерархически(Ссылка, Версия);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если НовоеЗначение = 1 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаСтруктураКонфигурации.Добавить(), Выборка);
			Иначе
				Если КэшУстановленныхФлажков.Найти(Выборка.Ссылка) <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаСтруктураКонфигурации.Добавить(), Выборка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовоеЗначение = 1 Тогда
		ТаблицаСтруктураКонфигурации.Колонки.Добавить("Значение");
		ТаблицаСтруктураКонфигурации.ЗаполнитьЗначения(1, "Значение");
		ОбъединитьТаблицы(КэшУстановленныхФлажков, ТаблицаСтруктураКонфигурации);
		КэшУстановленныхФлажков.Свернуть("Ссылка, Значение");
	Иначе
		Для Каждого СтрокаТаблицы Из ТаблицаСтруктураКонфигурации Цикл
			СтрокаКэша = НайтиСтрокуКэшаУстановленныхФлажков(КэшУстановленныхФлажков, СтрокаТаблицы.Ссылка);
			КэшУстановленныхФлажков.Удалить(СтрокаКэша);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ФлагВыбораВсех Тогда
		УстановитьФлажокРодителюОсновной(КэшУстановленныхФлажков, Ссылка, Справочники.СтруктураКонфигурации.ПустаяСсылка());
	КонецЕсли;
	
КонецФункции

// Получает список потомков.
//
Функция ПолучитьСписокДетей(Родитель, Значение = Неопределено, ТипыОбъектов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Родитель = &Родитель
	|	И СтруктураКонфигурации.Владелец = &Владелец
	|	" + ?(Значение = Неопределено, "", "И СтруктураКонфигурации.Пометка = &Значение") + "
	|	" + ?(ТипыОбъектов = Неопределено, "", "И СтруктураКонфигурации.ТипОбъекта В(&ТипОбъекта)");
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Владелец", Родитель.Владелец);
	Запрос.УстановитьПараметр("Значение", Значение);
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Устанавливает флаг родителю.
//
Функция УстановитьФлажокРодителюОсновной(КэшУстановленныхФлажков, Ссылка, ПустаяСсылка) Экспорт
	
	Родитель = Ссылка.Родитель;
	Если Родитель = ПустаяСсылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтароеЗначение = НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Родитель);
	ПромежуточноеЗначение = ?(ПроверкаЗаполненностиФлажковОсновной(КэшУстановленныхФлажков, Родитель), 2, 0);
	НовоеЗначение = ?(СтароеЗначение = 1, 1, ПромежуточноеЗначение);
	
	ИзменитьКэшУстановленныхФлажков(КэшУстановленныхФлажков, Родитель, НовоеЗначение);
	
	УстановитьФлажокРодителюОсновной(КэшУстановленныхФлажков, Родитель, ПустаяСсылка);
	
КонецФункции

// Проверяет значение заполненности флажков.
//
Функция ПроверкаЗаполненностиФлажковОсновной(КэшУстановленныхФлажков, Ссылка) Экспорт
	
	Выборка = ПолучитьСписокДетей(Ссылка);
	Пока Выборка.Следующий() Цикл
		
		ЗначениеФлажка = НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Выборка.Ссылка);
		
		Если ЗначениеФлажка > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

// Получает путь к каталогу по пути к файлу.
//
Функция ФайлПолучитьКаталог(ПолныйПутьКФайлу) Экспорт
	
	Попытка
		Файл = Новый Файл(ПолныйПутьКФайлу);
		Возврат Файл.Путь;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Возвращает Истину, если по переданному пути существует файл.
//
Функция ФайлСуществует(ФайлПуть) Экспорт
	
	Попытка
		Файл = Новый Файл(ФайлПуть);
		Возврат Файл.Существует();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ФайлЭтоКаталог(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ЭтоКаталог();
	
КонецФункции

// Возвращает расширение файла.
//
Функция ФайлПолучитьРасширение(ФайлПуть) Экспорт
	
	Попытка
		Файл = Новый Файл(ФайлПуть);
		Возврат Файл.Расширение;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Удаляет в попытке указанный файл или каталог.
// Действует аналогично методу УдалитьФайлы().
//
Процедура ФайлУдалить(ИмяФайла, Маска = "") Экспорт
	
	Если НЕ ФайлСуществует(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла, Маска);
	Исключение
		Если ФайлЭтоКаталог(ИмяФайла) Тогда
			ОчиститьКаталог(ИмяФайла);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура удаляет файлы в переданном каталоге и дожидается окончания этой операции.
//
Процедура ОчиститьКаталог(Каталог) Экспорт
	
	#Если Клиент Тогда
	
	Попытка
		КомандаСистемы("del " + Каталог + "\*.* /Q /S");
	Исключение
		Возврат;
	КонецПопытки;
	
	Попытка
		КомандаСистемы("md " + Каталог);
	Исключение
		Возврат;
	КонецПопытки;
	
	НачалоОперации = ТекущаяДатаСеанса();
	
	// Ожидаем не более 30 секунд.
	Пока НайтиФайлы(Каталог, "*.*").Количество() > 0 Цикл
		Если (ТекущаяДатаСеанса() - НачалоОперации) > 30 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

// Добавляет слэш в конец строки с путем, если его нет.
//
Функция ОтредактироватьПутьККаталогу(Путь) Экспорт
	
	Если ПустаяСтрока(Путь) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Путь + ?(СтрЗаканчиваетсяНа(Путь, "\"), "", "\");
	
КонецФункции

// Возвращает путь к каталогу временных файлов.
//
Функция ПолучитьКаталогВременныхФайлов() Экспорт
	
	Каталог = ПолучитьИмяВременногоФайла("") + "\";
	
	Возврат Каталог;
	
КонецФункции

// Копирует базу данных из исходного каталога в каталог копии.
// Если копирование выполнено успешно, функция возвращает пустую строку,
// иначе возвращает текст ошибки.
//
Функция КопироватьБазу(КаталогИсходный, КаталогКопии) Экспорт
	
	ТекстОшибки = "";
	
	ФайлБазыИмя = "1cv8.1CD";
	ФайлБазыПуть = ОтредактироватьПутьККаталогу(КаталогИсходный) + ФайлБазыИмя;
	
	Если НЕ ФайлСуществует(ФайлБазыПуть) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='База данных не обнаружена по пути: %1'"), ФайлБазыПуть);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ФайлСуществует(КаталогКопии) Тогда
		СоздатьКаталог(КаталогКопии);
	КонецЕсли;
	
	ФайлБазыКопииПуть = ОтредактироватьПутьККаталогу(КаталогКопии) + ФайлБазыИмя;
	
	Попытка
		КопироватьФайл(ФайлБазыПуть, ФайлБазыКопииПуть);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат ТекстОшибки;
	КонецПопытки;
	
	Если НЕ ФайлСуществует(ФайлБазыКопииПуть) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось скопировать базу данных по пути: %1'"), ФайлБазыКопииПуть);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Получает текст переданного файла.
//
Функция ФайлПолучитьТекст(ПолноеИмяФайла) Экспорт
	
	// Проверяем существование файла.
	Если НЕ ФайлСуществует(ПолноеИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	// Получаем текст.
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	Текст = ДокументТекст.ПолучитьТекст();
	
	ФайлУдалить(ПолноеИмяФайла);
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Получает каталог максимального установленного релиза платформы.
// Если указан номер версии, то получает максимальный номер релиза для этой версии.
//
Функция ПолучитьКаталогМаксимальногоРелизаПлатформы(ВерсияПлатформы = "") Экспорт
	
	ТаблицаРелизов = ПолучитьТаблицуУстановленныхРелизовПлатформы();
	Если ТаблицаРелизов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустаяСтрока(ВерсияПлатформы) Тогда
		ТаблицаРелизов.Сортировать("КлючРелиза Убыв");
		Возврат ТаблицаРелизов[0].Каталог;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерВерсии", ВерсияПлатформы);
	
	ТаблицаРелизовПоВерсии = ТаблицаРелизов.Скопировать(ПараметрыОтбора);
	Если ТаблицаРелизовПоВерсии.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаРелизовПоВерсии.Сортировать("КлючРелиза Убыв");
	
	Возврат ТаблицаРелизовПоВерсии[0].Каталог;
	
КонецФункции

// Получает таблицу всех установленных релизов платформы из каталога платформы.
// Каталог платформы определяется как родительский каталог родительского каталога КаталогПрограммы().
// Например, если КаталогПрограммы() = "C:\Program Files (x86)\1Cv8\8.3.12.1313\bin\",
// то каталог платформы = "C:\Program Files (x86)\1Cv8\".
//
Функция ПолучитьТаблицуУстановленныхРелизовПлатформы() Экспорт
	
	КаталогПрограммы = КаталогПрограммы();
	
	КаталогРелизов = ФайлПолучитьКаталог(ФайлПолучитьКаталог(КаталогПрограммы));
	МассивРелизовПлатформы = НайтиФайлы(КаталогРелизов, "*.*", Ложь);
	
	ТаблицаРелизов = Новый ТаблицаЗначений;
	ТаблицаРелизов.Колонки.Добавить("НомерРелиза");
	ТаблицаРелизов.Колонки.Добавить("НомерВерсии");
	ТаблицаРелизов.Колонки.Добавить("Каталог");
	ТаблицаРелизов.Колонки.Добавить("КлючРелиза");
	
	Для Каждого РелизПлатформы Из МассивРелизовПлатформы Цикл
		
		Если НЕ РелизПлатформы.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		НомерРелиза = РелизПлатформы.Имя;
		НомерРелизаБезТочек = СтрЗаменить(НомерРелиза, ".", "");
		Если НЕ ЭтоЧисло(НомерРелизаБезТочек) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементовРелиза = СтрРазделить(НомерРелиза, ".", Ложь);
		КоличествоЭлементовРелиза = МассивЭлементовРелиза.Количество();
		
		// Если каталог не содержит номер релиза, то пропускаем его.
		Если КоличествоЭлементовРелиза < 4 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерВерсии = ПолучитьНомерВерсииБезСборки(НомерРелиза);
		
		// Заполняем ключ релиза для правильной сортировки.
		Множитель = 1;
		КлючРелиза = Число(МассивЭлементовРелиза[3]);
		Для Счетчик = 1 По 3 Цикл
			Множитель = Множитель * 10000;
			КлючРелиза = КлючРелиза + Множитель * МассивЭлементовРелиза[3 - Счетчик];
		КонецЦикла;
		
		НовыйРелиз = ТаблицаРелизов.Добавить();
		НовыйРелиз.НомерРелиза = НомерРелиза;
		НовыйРелиз.НомерВерсии = НомерВерсии;
		НовыйРелиз.Каталог = РелизПлатформы.ПолноеИмя;
		НовыйРелиз.КлючРелиза = КлючРелиза;
		
	КонецЦикла;
	
	Возврат ТаблицаРелизов;
	
КонецФункции

#КонецОбласти

#Область РаботаСОсобенностями

// Функция получает номера ошибок из регистра сведений "НайденныеОшибки" по структуре особенности.
// Структура особенности - структура с ключами:
//   Конфигурация - ссылка на конфигурацию;
//   Объект - путь к объекту из справочника "СтруктураКонфигурации" реквизит "Путь";
//   Уточнение - уточнение особенности;
//   Ошибка - ссылка на ошибку.
//
Функция ПолучитьНомераОшибокПоОсобенности(СтруктураОсобенности) Экспорт
	
	ЗапросПоОшибкам = Новый Запрос;
	ЗапросПоОшибкам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Номер
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Объект.Путь = &Путь
	|	И НайденныеОшибки.Ошибка = &Ошибка
	|	И НайденныеОшибки.Уточнение = &Уточнение
	|	И НайденныеОшибки.Объект.Владелец.Владелец = &Владелец
	|	И НайденныеОшибки.Состояние = &Состояние";
	
	ЗапросПоОшибкам.УстановитьПараметр("Владелец", СтруктураОсобенности.Конфигурация);
	ЗапросПоОшибкам.УстановитьПараметр("Путь", СтруктураОсобенности.Объект);
	ЗапросПоОшибкам.УстановитьПараметр("Уточнение", СтруктураОсобенности.Уточнение);
	ЗапросПоОшибкам.УстановитьПараметр("Ошибка", СтруктураОсобенности.Ошибка);
	ЗапросПоОшибкам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Особенность);
	
	МассивОшибок = ЗапросПоОшибкам.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
	Возврат МассивОшибок;
	
КонецФункции

// Функция отменяет особенности по номерам ошибок.
//
Функция ОтменитьОсобенности(МассивНомеров, Комментарий = "") Экспорт
	
	СписокНомеровОшибок = Новый СписокЗначений;
	Если МассивНомеров.Количество() = 0 Тогда
		Возврат СписокНомеровОшибок;
	КонецЕсли;
	
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект,
	|	НайденныеОшибки.Правило,
	|	НайденныеОшибки.Номер,
	|	НайденныеОшибки.Уточнение
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В(&МассивНомеров)
	|	И НайденныеОшибки.Состояние = &Состояние";
	
	ЗапросПоСвойствам.УстановитьПараметр("МассивНомеров", МассивНомеров);
	ЗапросПоСвойствам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Особенность);
	
	ТаблицаСвойств = ЗапросПоСвойствам.Выполнить().Выгрузить();
	Для Каждого СтрокаСвойствОшибки Из ТаблицаСвойств Цикл
		Если ОтменитьОсобенность(СтрокаСвойствОшибки, Комментарий) <> Неопределено Тогда
			СписокНомеровОшибок.Добавить(СтрокаСвойствОшибки.Номер);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНомеровОшибок;
	
КонецФункции

// Функция отменяет особенность по строке ошибки.
//
Функция ОтменитьОсобенность(СтрокаСвойствОшибки, Комментарий = "")
	
	// Аудитору разрешено отменять особенности.
	РольАудитор = ВыбранаРольАудитор();
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	РегистрНайденныеОшибки = РегистрыСведений.НайденныеОшибки;
	
	МенеджерОшибки = РегистрНайденныеОшибки.СоздатьМенеджерЗаписи();
	МенеджерОшибки.Номер = СтрокаСвойствОшибки.Номер;
	МенеджерОшибки.Правило = СтрокаСвойствОшибки.Правило;
	МенеджерОшибки.Объект = СтрокаСвойствОшибки.Объект;
	МенеджерОшибки.Прочитать();
	
	ТекстСообщения = НСтр("ru='Нет прав на помещение особенности в ошибки'");
	Если (НЕ РольАудитор) И (НЕ РазрешитьПомещениеОсобенностиВОшибки(МенеджерОшибки, ТекущийПользователь, ТекстСообщения)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерОшибки.Состояние = Перечисления.СостояниеОшибки.Зарегистрирована;
	МенеджерОшибки.ПричинаОсобенности = Справочники.ПричиныОсобенности.ПустаяСсылка();
	МенеджерОшибки.АвторОсобенности = "";
	МенеджерОшибки.ДатаПомещенияВОсобенности = Дата(1, 1, 1);
	МенеджерОшибки.Записать();
	
	КомментарийОшибки = ПолучитьКомментарийОшибки(СтрокаСвойствОшибки.Номер);
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		ДобавляемыйКомментарий = СокрЛП(Комментарий);
		Если ПустаяСтрока(КомментарийОшибки) Тогда
			КомментарийОшибки = ДобавляемыйКомментарий;
		Иначе
			КомментарийОшибки = ДобавляемыйКомментарий + Символы.ПС + Символы.ПС + КомментарийОшибки;
		КонецЕсли;
	КонецЕсли;
	ЗаписатьКомментарийОшибки(СтрокаСвойствОшибки.Номер, КомментарийОшибки, СтрокаСвойствОшибки.Объект);
	
	Возврат СтрокаСвойствОшибки.Номер;
	
КонецФункции

Функция РазрешитьПомещениеОсобенностиВОшибки(Особенность, ТекущийПользовательСсылка, ТекстСообщения) Экспорт
	
	АвторОсобенности = Особенность.АвторОсобенности;
	ИмяТекущегоПользователя = ТекущийПользовательСсылка.Наименование;
	
	Если ЗначениеЗаполнено(АвторОсобенности) И (АвторОсобенности = ИмяТекущегоПользователя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектПоНаследству = ПолучитьОбъектПоНаследству(Особенность.Объект);
	АвторОсобенности = ОбъектПоНаследству.Ответственный.Наименование;
	
	Если АвторОсобенности = ИмяТекущегоПользователя Тогда
		Возврат Истина;
	КонецЕсли;
	
	#Если Клиент Тогда
	ТекстСообщения = СтрШаблон("%1 <%2 %3 %4 (%5)>", ТекстСообщения, Особенность.Номер, Особенность.Объект,
		Особенность.Ошибка, Особенность.АвторОсобенности);
	
	Сообщить(ТекстСообщения);
	#КонецЕсли
	
	Возврат Ложь;
	
КонецФункции

// Удаляет записи в регистре сведений "НайденныеОшибки".
//
Процедура УдалитьЗаписиВРегистреНайденныеОшибки(МассивНомеров, ТолькоОсобенности = Истина) Экспорт
	
	Если МассивНомеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Аудитору разрешено удалять ошибки.
	РольАудитор = ВыбранаРольАудитор();
	
	Если НЕ РольАудитор Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Нет прав на удаление ошибки'");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	РегистрНайденныеОшибки = РегистрыСведений.НайденныеОшибки;
	
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект,
	|	НайденныеОшибки.Правило,
	|	НайденныеОшибки.Номер,
	|	НайденныеОшибки.Уточнение
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В(&МассивНомеров)
	|	" + ?(ТолькоОсобенности, "И НайденныеОшибки.Состояние = &Состояние", "");
	
	ЗапросПоСвойствам.УстановитьПараметр("МассивНомеров", МассивНомеров);
	ЗапросПоСвойствам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Особенность);
	
	ТаблицаСвойств = ЗапросПоСвойствам.Выполнить().Выгрузить();
	Для Каждого СтрокаСвойствОшибки Из ТаблицаСвойств Цикл
		
		МенеджерОшибки = РегистрНайденныеОшибки.СоздатьМенеджерЗаписи();
		МенеджерОшибки.Номер = СтрокаСвойствОшибки.Номер;
		МенеджерОшибки.Правило = СтрокаСвойствОшибки.Правило;
		МенеджерОшибки.Объект = СтрокаСвойствОшибки.Объект;
		МенеджерОшибки.Прочитать();
		МенеджерОшибки.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует записи в регистре сведений "НайденныеОшибки" из версии источника в версию приемника.
//
Функция СкопироватьОшибкиКонфигурации(ВерсияИсточник, ВерсияПриемник, ПроверитьВерсии = Ложь,
	СостояниеОшибки = Неопределено) Экспорт
	
	ТаблицаНомеровОшибок = Новый ТаблицаЗначений;
	ТаблицаНомеровОшибок.Колонки.Добавить("СтарыйНомер", Новый ОписаниеТипов("Число"));
	ТаблицаНомеровОшибок.Колонки.Добавить("НовыйНомер", Новый ОписаниеТипов("Число"));
	ТаблицаНомеровОшибок.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.СтруктураКонфигурации"));
	
	Если ПроверитьВерсии Тогда
		НомерВерсииИсточника = ПолучитьНомерВерсииБезСборки(ВерсияИсточник.ПолныйНомер);
		НомерВерсииПриемника = ПолучитьНомерВерсииБезСборки(ВерсияПриемник.ПолныйНомер);
		Если НомерВерсииИсточника = НомерВерсииПриемника Тогда
			Возврат ТаблицаНомеровОшибок;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонаТекстаСостояния = НСтр("ru='Выполняется копирование ошибок конфигурации (%1%%)'");
	
	#Если Клиент Тогда
	Состояние(СтрШаблон(ШаблонаТекстаСостояния, "0"));
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Правило,
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Ошибка,
	|	НайденныеОшибки.Состояние,
	|	НайденныеОшибки.Ответственный,
	|	НайденныеОшибки.АвторОсобенности,
	|	НайденныеОшибки.ДатаПомещенияВОсобенности,
	|	НайденныеОшибки.МестоОбнаружения,
	|	НайденныеОшибки.Уточнение,
	|	НайденныеОшибки.ДатаРегистрации,
	|	НайденныеОшибки.ПричинаОсобенности,
	|	ЕСТЬNULL(СтруктураКонфигурации.Ссылка, &ПустаяСсылка) КАК Объект
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|		ПО (НайденныеОшибки.Объект.Путь = СтруктураКонфигурации.Путь)
	|		 И (НайденныеОшибки.Объект.ТипОбъекта = СтруктураКонфигурации.ТипОбъекта)
	|		 И (СтруктураКонфигурации.Владелец = &ВерсияПриемник)
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец = &ВерсияИсточник
	|	%1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект, Номер
	|
	|ИТОГИ ПО
	|	СтруктураКонфигурации.Ссылка";
	
	Запрос.УстановитьПараметр("ВерсияИсточник", ВерсияИсточник);
	Запрос.УстановитьПараметр("ВерсияПриемник", ВерсияПриемник);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.СтруктураКонфигурации.ПустаяСсылка());
	
	ТекстДляЗамены = ?(СостояниеОшибки = Неопределено, "", "И НайденныеОшибки.Состояние = &Состояние");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ТекстДляЗамены);
	Запрос.УстановитьПараметр("Состояние", СостояниеОшибки);
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоОбъектов = ВыборкаОбъектов.Количество();
	ПроцентОбработанныхОбъектов = 0;
	НомерОбъекта = 0;
	
	ПоследнийНомерОшибки = ПолучитьМаксимальныйНомерОшибки();
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		ТекущийОбъект = ВыборкаОбъектов.Объект;
		
		НайденныеОшибкиНаборЗаписей = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
		НайденныеОшибкиНаборЗаписей.Отбор.Объект.Установить(ТекущийОбъект);
		
		ВыборкаОшибок = ВыборкаОбъектов.Выбрать();
		
		Пока ВыборкаОшибок.Следующий() Цикл
			
			ПоследнийНомерОшибки = ПоследнийНомерОшибки + 1;
			
			СтрокаТаблицы = ТаблицаНомеровОшибок.Добавить();
			СтрокаТаблицы.СтарыйНомер = ВыборкаОшибок.Номер;
			СтрокаТаблицы.НовыйНомер = ПоследнийНомерОшибки;
			СтрокаТаблицы.Объект = ТекущийОбъект;
			
			НоваяЗапись = НайденныеОшибкиНаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаОшибок);
			НоваяЗапись.Номер = ПоследнийНомерОшибки;
			
		КонецЦикла;
		
		НайденныеОшибкиНаборЗаписей.Записать();
		
		#Если Клиент Тогда
		НомерОбъекта = НомерОбъекта + 1;
		
		ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ШаблонаТекстаСостояния, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	Возврат ТаблицаНомеровОшибок
	
КонецФункции

// Копирует комментарии найденных ошибок на основании переданной таблицы с номерами ошибок.
//
Функция СкопироватьКомментарииНайденныхОшибок(ТаблицаНомеровОшибок) Экспорт
	
	Если ТаблицаНомеровОшибок.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонаТекстаСостояния = НСтр("ru='Выполняется копирование комментариев к ошибкам конфигурации (%1%%)'");
	
	#Если Клиент Тогда
	Состояние(СтрШаблон(ШаблонаТекстаСостояния, "0"));
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНомеровОшибок", ТаблицаНомеровОшибок);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаНомеровОшибок.Объект,
	|	ТаблицаНомеровОшибок.СтарыйНомер,
	|	ТаблицаНомеровОшибок.НовыйНомер
	|ПОМЕСТИТЬ ТаблицаНомеров
	|ИЗ
	|	&ТаблицаНомеровОшибок КАК ТаблицаНомеровОшибок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомментарииНайденныхОшибок.Комментарий,
	|	ТаблицаНомеров.Объект КАК Объект,
	|	ТаблицаНомеров.НовыйНомер КАК Номер
	|ИЗ
	|	ТаблицаНомеров КАК ТаблицаНомеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|		ПО ТаблицаНомеров.СтарыйНомер = КомментарииНайденныхОшибок.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект, Номер";
	
	ТаблицаКомментарииНайденныхОшибок = Запрос.Выполнить().Выгрузить();
	
	ВсегоОбъектов = ТаблицаКомментарииНайденныхОшибок.Количество();
	НомерОбъекта = 0;
	ПроцентОбработанныхОбъектов = 0;
	
	КомментарииНайденныхОшибокНаборЗаписей = РегистрыСведений.КомментарииНайденныхОшибок.СоздатьНаборЗаписей();
	
	Для Каждого КомментарийНайденныхОшибок Из ТаблицаКомментарииНайденныхОшибок Цикл
		
		КомментарииНайденныхОшибокНаборЗаписей.Отбор.Объект.Установить(КомментарийНайденныхОшибок.Объект);
		КомментарииНайденныхОшибокНаборЗаписей.Прочитать();
		
		НоваяЗапись = КомментарииНайденныхОшибокНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, КомментарийНайденныхОшибок);
		
		КомментарииНайденныхОшибокНаборЗаписей.Записать();
		
		#Если Клиент Тогда
		НомерОбъекта = НомерОбъекта + 1;
		
		ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ШаблонаТекстаСостояния, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецФункции

// Меняет состояние ошибки с "Зарегистрирован" на "Особенность".
//
Функция НазначитьОсобенность(НомерОшибки, Причина, Комментарий = "") Экспорт
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерОшибки);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Объект = Результат.Объект;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НайденныеОшибки");
		ЭлементБлокировки.УстановитьЗначение("Объект", Объект);
		ЭлементБлокировки.УстановитьЗначение("Номер", НомерОшибки);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписейНайденныхОшибок = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
		НаборЗаписейНайденныхОшибок.Отбор.Объект.Установить(Объект);
		НаборЗаписейНайденныхОшибок.Отбор.Номер.Установить(НомерОшибки);
		НаборЗаписейНайденныхОшибок.Прочитать();
		СтрокаНабораНайденныхОшибок = НаборЗаписейНайденныхОшибок[0];
		
		Ошибка = СтрокаНабораНайденныхОшибок.Ошибка;
		ПричиныОсобенности = Справочники.ПричиныОсобенности;
		Если Причина = ПричиныОсобенности.НеполныйОрфографическийСловарь Тогда
			ТекстОшибкиОрфографии = НСтр("ru='Ошибки орфографии'");
			Если СтрСравнить((СокрЛП(Ошибка.Родитель.Наименование)), ТекстОшибкиОрфографии) <> 0 Тогда
				ОтменитьТранзакцию();
				Возврат СтрШаблон(НСтр("ru='Ошибка не принадлежит группе <%1>'"), ТекстОшибкиОрфографии);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаНабораНайденныхОшибок.Состояние = Перечисления.СостояниеОшибки.Особенность;
		СтрокаНабораНайденныхОшибок.ПричинаОсобенности = Причина;
		СтрокаНабораНайденныхОшибок.АвторОсобенности = Строка(ТекущийПользователь);
		СтрокаНабораНайденныхОшибок.ДатаПомещенияВОсобенности = ТекущаяДата;
		
		НаборЗаписейНайденныхОшибок.Отбор.Объект.Установить(СтрокаНабораНайденныхОшибок.Объект);
		НаборЗаписейНайденныхОшибок.Отбор.Правило.Установить(СтрокаНабораНайденныхОшибок.Правило);
		НаборЗаписейНайденныхОшибок.Записать();
		
		ЗаписатьКомментарийОшибки(НомерОшибки, Комментарий, Объект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

// Возвращает максимальный номер ошибки в РС "Найденные ошибки".
//
Функция ПолучитьМаксимальныйНомерОшибки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НайденныеОшибки.Номер КАК Номер
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|УПОРЯДОЧИТЬ ПО
	|	НайденныеОшибки.Номер УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Номер, 0);
	
КонецФункции

// Получает список причин особенности указанной конфигурации.
//
Функция ПолучитьПричиныОсобенностиКонфигурации(Конфигурация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонфигурацииПричиныОсобенностей.ПричинаОсобенности
	|ИЗ
	|	Справочник.Конфигурации.ПричиныОсобенностей КАК КонфигурацииПричиныОсобенностей
	|ГДЕ
	|	КонфигурацииПричиныОсобенностей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Конфигурация);
	
	ТаблицаПричин = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПричиныОсобенности.Ссылка
	|ИЗ
	|	Справочник.ПричиныОсобенности КАК ПричиныОсобенности
	|ГДЕ
	|	ПричиныОсобенности.Предопределенный";
	
	ТаблицаПредопределенныхПричин = Запрос.Выполнить().Выгрузить();
	Для Каждого ПредопределеннаяПричина Из ТаблицаПредопределенныхПричин Цикл
		НоваяПричина = ТаблицаПричин.Добавить();
		НоваяПричина.ПричинаОсобенности = ПредопределеннаяПричина.Ссылка;
	КонецЦикла;
	
	ТаблицаПричин.Свернуть("ПричинаОсобенности");
	
	СписокПричин = Новый СписокЗначений;
	СписокПричин.ЗагрузитьЗначения(ТаблицаПричин.ВыгрузитьКолонку("ПричинаОсобенности"));
	
	Возврат СписокПричин;
	
КонецФункции

#КонецОбласти

#Область РаботаСКомментариямиОшибок

Функция ПолучитьСтрокуСАвторомДляКомментария() Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущаяДата = Формат(ТекущаяДата, "ДЛФ=Д");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Возврат Строка(ТекущийПользователь) + ", " + ТекущаяДата + Символы.ПС;
	
КонецФункции

Функция ВставитьСтрокуСАвторомВКомментарий(Комментарий) Экспорт
	
	Комментарий = ПолучитьСтрокуСАвторомДляКомментария() + Комментарий;
	
	Возврат Комментарий;
	
КонецФункции

Функция ВвестиКомментарий() Экспорт
	
	#Если Клиент Тогда
	ФормаВводаКомментария = ПолучитьФорму("ОбщаяФорма.ФормаВводаКомментария");
	
	Если ФормаВводаКомментария.ОткрытьМодально() = Истина Тогда
		Возврат ФормаВводаКомментария.Комментарий;
	КонецЕсли;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбъектПоНомеруОшибки(НомерОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НайденныеОшибки.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер = &НомерОшибки";
	Запрос.УстановитьПараметр("НомерОшибки", НомерОшибки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Объект, Справочники.СтруктураКонфигурации.ПустаяСсылка());
	
КонецФункции

Процедура ЗаписатьКомментарийОшибки(НомерОшибки, Комментарий, Объект = Неопределено) Экспорт
	
	Если ПустаяСтрока(Комментарий) Тогда
		ЗапросКомментария = Новый Запрос;
		ЗапросКомментария.Текст = "
		|ВЫБРАТЬ
		|	КомментарииНайденныхОшибок.Номер
		|ИЗ
		|	РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
		|ГДЕ
		|	КомментарииНайденныхОшибок.Номер = &Номер";
		
		ЗапросКомментария.УстановитьПараметр("Номер", НомерОшибки);
		// Если комментария у ошибки раньше не было, а сейчас добавлен пустой комментарий, то записывать его нет смысла.
		Если ЗапросКомментария.Выполнить().Пустой() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		Объект = ПолучитьОбъектПоНомеруОшибки(НомерОшибки);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КомментарииНайденныхОшибок");
		ЭлементБлокировки.УстановитьЗначение("Номер", НомерОшибки);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписейКомментария = РегистрыСведений.КомментарииНайденныхОшибок.СоздатьНаборЗаписей();
		НаборЗаписейКомментария.Отбор.Номер.Установить(НомерОшибки);
		// Записываем только не пустой комментарий.
		Если НЕ ПустаяСтрока(Комментарий) Тогда
			Запись = НаборЗаписейКомментария.Добавить();
			Запись.Номер = НомерОшибки;
			Запись.Комментарий = Комментарий;
			Запись.Объект = Объект;
		КонецЕсли;
		
		НаборЗаписейКомментария.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьКомментарийОшибки(НомерОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КомментарииНайденныхОшибок.Комментарий
	|ИЗ
	|	РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|ГДЕ
	|	КомментарииНайденныхОшибок.Номер = &НомерОшибки";
	
	Запрос.УстановитьПараметр("НомерОшибки", НомерОшибки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Комментарий, "");
	
КонецФункции

#КонецОбласти

#Область РаботаСТипамиОбъектов

// Создает массив и заполняет его различными типами объектов.
// Возвращаемое значение:
//   Массив, заполненный типами объектов.
//
Функция ТипыОбъектовСоздать() Экспорт
	
	ПеречисленияТипы = Перечисления.ТипыОбъектов;
	
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(ПеречисленияТипы.Корень);
	ТипыОбъектов.Добавить(ПеречисленияТипы.HTTPСервис);
	ТипыОбъектов.Добавить(ПеречисленияТипы.WebСервис);
	ТипыОбъектов.Добавить(ПеречисленияТипы.WSСсылка);
	ТипыОбъектов.Добавить(ПеречисленияТипы.БизнесПроцесс);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ГруппаКоманд);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Документ);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ЖурналДокументов);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Задача);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Интерфейс);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Картинка);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Константа);
	ТипыОбъектов.Добавить(ПеречисленияТипы.КритерийОтбора);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Обработка);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ОбщаяКоманда);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ОбщаяУправляемаяФорма);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ОбщаяФорма);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ОбщийМакет);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ОбщийМодуль);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ОбщийРеквизит);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ОпределяемыйТип);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Отчет);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПакетXDTO);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПараметрСеанса);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Перечисление);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланВидовРасчета);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланВидовХарактеристик);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланОбмена);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланСчетов);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПодпискаНаСобытия);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрБухгалтерии);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрНакопления);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрРасчета);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрСведений);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегламентноеЗадание);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Роль);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Справочник);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Стиль);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ФункциональнаяОпция);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ХранилищеНастроек);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Язык);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ЭлементСтиля);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Подсистема);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Конфигурация);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ВеткаМетаданных);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Форма);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ТабличнаяЧасть);
	ТипыОбъектов.Добавить(ПеречисленияТипы.УправляемаяФорма);
	
	Возврат ТипыОбъектов;
	
КонецФункции

// Возвращает массив всех типов объектов из перечисления "ТипыОбъектов".
//
Функция ПолучитьВсеТипыОбъектов() Экспорт
	
	МассивТипов = Новый Массив;
	
	Для Каждого ЗначениеТиповОбъектов Из Перечисления.ТипыОбъектов Цикл
		МассивТипов.Добавить(ЗначениеТиповОбъектов);
	КонецЦикла;
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает список типов объектов, которые могут входит в подсистемы.
//
Функция ПолучитьТипыОбъектовВходящихВПодсистемы() Экспорт
	
	ПеречисленияТипы = Перечисления.ТипыОбъектов;
	
	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить(ПеречисленияТипы.ОбщийМодуль);
	СписокТипов.Добавить(ПеречисленияТипы.ПараметрСеанса);
	СписокТипов.Добавить(ПеречисленияТипы.Роль);
	СписокТипов.Добавить(ПеречисленияТипы.ОбщийРеквизит);
	СписокТипов.Добавить(ПеречисленияТипы.ОпределяемыйТип);
	СписокТипов.Добавить(ПеречисленияТипы.ПланОбмена);
	СписокТипов.Добавить(ПеречисленияТипы.КритерийОтбора);
	СписокТипов.Добавить(ПеречисленияТипы.ПодпискаНаСобытия);
	СписокТипов.Добавить(ПеречисленияТипы.РегламентноеЗадание);
	СписокТипов.Добавить(ПеречисленияТипы.ФункциональнаяОпция);
	СписокТипов.Добавить(ПеречисленияТипы.ПараметрФункциональнойОпции);
	СписокТипов.Добавить(ПеречисленияТипы.ХранилищеНастроек);
	СписокТипов.Добавить(ПеречисленияТипы.ОбщаяФорма);
	СписокТипов.Добавить(ПеречисленияТипы.ОбщаяУправляемаяФорма);
	СписокТипов.Добавить(ПеречисленияТипы.ОбщаяКоманда);
	СписокТипов.Добавить(ПеречисленияТипы.ГруппаКоманд);
	СписокТипов.Добавить(ПеречисленияТипы.ОбщийМакет);
	СписокТипов.Добавить(ПеречисленияТипы.Картинка);
	СписокТипов.Добавить(ПеречисленияТипы.ПакетXDTO);
	СписокТипов.Добавить(ПеречисленияТипы.WebСервис);
	СписокТипов.Добавить(ПеречисленияТипы.HTTPСервис);
	СписокТипов.Добавить(ПеречисленияТипы.WSСсылка);
	СписокТипов.Добавить(ПеречисленияТипы.Стиль);
	СписокТипов.Добавить(ПеречисленияТипы.ЭлементСтиля);
	СписокТипов.Добавить(ПеречисленияТипы.Константа);
	СписокТипов.Добавить(ПеречисленияТипы.Справочник);
	СписокТипов.Добавить(ПеречисленияТипы.Документ);
	СписокТипов.Добавить(ПеречисленияТипы.ЖурналДокументов);
	СписокТипов.Добавить(ПеречисленияТипы.Перечисление);
	СписокТипов.Добавить(ПеречисленияТипы.Отчет);
	СписокТипов.Добавить(ПеречисленияТипы.Обработка);
	СписокТипов.Добавить(ПеречисленияТипы.ПланВидовХарактеристик);
	СписокТипов.Добавить(ПеречисленияТипы.ПланСчетов);
	СписокТипов.Добавить(ПеречисленияТипы.ПланВидовРасчета);
	СписокТипов.Добавить(ПеречисленияТипы.РегистрСведений);
	СписокТипов.Добавить(ПеречисленияТипы.РегистрНакопления);
	СписокТипов.Добавить(ПеречисленияТипы.РегистрБухгалтерии);
	СписокТипов.Добавить(ПеречисленияТипы.РегистрРасчета);
	СписокТипов.Добавить(ПеречисленияТипы.БизнесПроцесс);
	СписокТипов.Добавить(ПеречисленияТипы.Задача);
	
	Возврат СписокТипов;
	
КонецФункции

// Возвращает массив типов объектов, которые имеют модули.
//
Функция ПолучитьТипыОбъектовИмеющихМодули() Экспорт
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.HTTPСервис);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.WebСервис);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Документ);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ЖурналДокументов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Задача);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Команда);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Константа);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Конфигурация);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.КритерийОтбора);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Обработка);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяКоманда);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщийМодуль);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Отчет);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Перечисление);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланСчетов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрСведений);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Справочник);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.УправляемаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Форма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ХранилищеНастроек);
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает массив типов объектов, которые имеют модуль менеджера.
//
Функция ПолучитьТипыОбъектовИмеющихМодульМенеджера() Экспорт
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Документ);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ЖурналДокументов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Задача);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Обработка);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Отчет);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Перечисление);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланСчетов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрСведений);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Справочник);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ХранилищеНастроек);
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает массив типов объектов, которые имеют справку.
//
Функция ПолучитьТипыОбъектовИмеющихСправку() Экспорт
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Документ);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ЖурналДокументов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Задача);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Конфигурация);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Обработка);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяКоманда);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Отчет);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланСчетов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Подсистема);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрСведений);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Справочник);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.УправляемаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Форма);
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает массив типов объектов на верхнем уровне в дереве метаданных.
//
Функция ПолучитьТипыОбъектовВерхнегоУровня() Экспорт
	
	ПеречисленияТипы = Перечисления.ТипыОбъектов;
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(ПеречисленияТипы.Подсистема);
	МассивТипов.Добавить(ПеречисленияТипы.ОбщийМодуль);
	МассивТипов.Добавить(ПеречисленияТипы.ПараметрСеанса);
	МассивТипов.Добавить(ПеречисленияТипы.Роль);
	МассивТипов.Добавить(ПеречисленияТипы.ОбщийРеквизит);
	МассивТипов.Добавить(ПеречисленияТипы.ПланОбмена);
	МассивТипов.Добавить(ПеречисленияТипы.КритерийОтбора);
	МассивТипов.Добавить(ПеречисленияТипы.ПодпискаНаСобытия);
	МассивТипов.Добавить(ПеречисленияТипы.РегламентноеЗадание);
	МассивТипов.Добавить(ПеречисленияТипы.ФункциональнаяОпция);
	МассивТипов.Добавить(ПеречисленияТипы.ПараметрФункциональнойОпции);
	МассивТипов.Добавить(ПеречисленияТипы.ОпределяемыйТип);
	МассивТипов.Добавить(ПеречисленияТипы.ХранилищеНастроек);
	МассивТипов.Добавить(ПеречисленияТипы.ОбщаяФорма);
	МассивТипов.Добавить(ПеречисленияТипы.ОбщаяУправляемаяФорма);
	МассивТипов.Добавить(ПеречисленияТипы.ОбщаяКоманда);
	МассивТипов.Добавить(ПеречисленияТипы.ГруппаКоманд);
	МассивТипов.Добавить(ПеречисленияТипы.Интерфейс);
	МассивТипов.Добавить(ПеречисленияТипы.ОбщийМакет);
	МассивТипов.Добавить(ПеречисленияТипы.Картинка);
	МассивТипов.Добавить(ПеречисленияТипы.ПакетXDTO);
	МассивТипов.Добавить(ПеречисленияТипы.WebСервис);
	МассивТипов.Добавить(ПеречисленияТипы.HTTPСервис);
	МассивТипов.Добавить(ПеречисленияТипы.WSСсылка);
	МассивТипов.Добавить(ПеречисленияТипы.Стиль);
	МассивТипов.Добавить(ПеречисленияТипы.ЭлементСтиля);
	МассивТипов.Добавить(ПеречисленияТипы.Язык);
	МассивТипов.Добавить(ПеречисленияТипы.Константа);
	МассивТипов.Добавить(ПеречисленияТипы.Справочник);
	МассивТипов.Добавить(ПеречисленияТипы.Документ);
	МассивТипов.Добавить(ПеречисленияТипы.ЖурналДокументов);
	МассивТипов.Добавить(ПеречисленияТипы.Перечисление);
	МассивТипов.Добавить(ПеречисленияТипы.Отчет);
	МассивТипов.Добавить(ПеречисленияТипы.Обработка);
	МассивТипов.Добавить(ПеречисленияТипы.ПланВидовХарактеристик);
	МассивТипов.Добавить(ПеречисленияТипы.ПланСчетов);
	МассивТипов.Добавить(ПеречисленияТипы.ПланВидовРасчета);
	МассивТипов.Добавить(ПеречисленияТипы.РегистрСведений);
	МассивТипов.Добавить(ПеречисленияТипы.РегистрНакопления);
	МассивТипов.Добавить(ПеречисленияТипы.РегистрБухгалтерии);
	МассивТипов.Добавить(ПеречисленияТипы.РегистрРасчета);
	МассивТипов.Добавить(ПеречисленияТипы.БизнесПроцесс);
	МассивТипов.Добавить(ПеречисленияТипы.Задача);
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает массив типов объектов, на которые можно назначить права.
//
Функция ПолучитьТипыОбъектовНаКоторыеНазначаютсяПрава(ТолькоОбъектыВерхнегоУровня = Истина) Экспорт
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Конфигурация);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Подсистема);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПараметрСеанса);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщийРеквизит);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.КритерийОтбора);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ОбщаяКоманда);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.WebСервис);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.HTTPСервис);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Константа);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Справочник);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Документ);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ЖурналДокументов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Перечисление);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Отчет);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Обработка);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланСчетов);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрСведений);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Задача);
	
	Если ТолькоОбъектыВерхнегоУровня Тогда
		Возврат МассивТипов;
	КонецЕсли;
	
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Реквизит);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ТабличнаяЧасть);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.СтандартныйРеквизит);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Команда);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Измерение);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Ресурс);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Операция);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.МетодШаблонаURL);
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает массив типов объектов, которые подчинены другим объектам.
//
Функция ПолучитьТипыПодчиненныхОбъектов() Экспорт
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Подсистема);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Реквизит);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.СтандартныйРеквизит);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ТабличнаяЧасть);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Форма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.УправляемаяФорма);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Команда);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Макет);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Операция);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Параметр);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ШаблонURL);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.МетодШаблонаURL);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Графа);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Значение);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Измерение);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Ресурс);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПредопределенныйЭлемент);
	
	Возврат МассивТипов;
	
КонецФункции

Функция ДобавитьНовыйТип(ТипыОбъектов, ИмяВЕдинственномЧисле, ИмяВоМножественномЧисле, Родитель, Перечисление,
	ИндексКартинки)
	
	НовыйТип = ТипыОбъектов.Добавить();
	НовыйТип.ИмяВЕдинственномЧисле = ИмяВЕдинственномЧисле;
	НовыйТип.ИмяВоМножественномЧисле = ИмяВоМножественномЧисле;
	НовыйТип.Родитель = Родитель;
	НовыйТип.ПеречислениеТип = Перечисление;
	НовыйТип.ИндексКартинки = ИндексКартинки;
	
КонецФункции

// Возвращает таблицу значений с типами объектов.
//
Функция ЗаполнитьТаблицуТиповОбъектов() Экспорт
	
	ПеречисленияТипы = Перечисления.ТипыОбъектов;
	
	ТипыОбъектов = Новый ТаблицаЗначений();
	ТипыОбъектов.Колонки.Добавить("ИмяВЕдинственномЧисле");
	ТипыОбъектов.Колонки.Добавить("ИмяВоМножественномЧисле");
	ТипыОбъектов.Колонки.Добавить("Родитель");
	ТипыОбъектов.Колонки.Добавить("ПеречислениеТип");
	ТипыОбъектов.Колонки.Добавить("ИндексКартинки");
	
	ДобавитьНовыйТип(ТипыОбъектов, "Корень",						"Корень", 						"", 			ПеречисленияТипы.Корень, 						0);
	ДобавитьНовыйТип(ТипыОбъектов, "Конфигурация",					"Конфигурации", 				"Корень", 		ПеречисленияТипы.Конфигурация, 					0);
	ДобавитьНовыйТип(ТипыОбъектов, "Общие",							"Общие", 						"Конфигурация", ПеречисленияТипы.ВеткаМетаданных, 				1);
	ДобавитьНовыйТип(ТипыОбъектов, "Подсистема",					"Подсистемы", 					"Общие", 		ПеречисленияТипы.Подсистема, 					2);
	ДобавитьНовыйТип(ТипыОбъектов, "ОбщийМодуль",					"ОбщиеМодули", 					"Общие", 		ПеречисленияТипы.ОбщийМодуль, 					3);
	ДобавитьНовыйТип(ТипыОбъектов, "ПараметрСеанса",				"ПараметрыСеанса", 				"Общие", 		ПеречисленияТипы.ПараметрСеанса, 				4);
	ДобавитьНовыйТип(ТипыОбъектов, "Роль",							"Роли", 						"Общие", 		ПеречисленияТипы.Роль, 							5);
	ДобавитьНовыйТип(ТипыОбъектов, "ОбщийРеквизит",					"ОбщиеРеквизиты", 				"Общие", 		ПеречисленияТипы.ОбщийРеквизит, 				6);
	ДобавитьНовыйТип(ТипыОбъектов, "ПланОбмена",					"ПланыОбмена", 					"Общие", 		ПеречисленияТипы.ПланОбмена, 					7);
	ДобавитьНовыйТип(ТипыОбъектов, "КритерийОтбора",				"КритерииОтбора", 				"Общие", 		ПеречисленияТипы.КритерийОтбора, 				8);
	ДобавитьНовыйТип(ТипыОбъектов, "ПодпискаНаСобытие",				"ПодпискиНаСобытия",			"Общие",		ПеречисленияТипы.ПодпискаНаСобытия,				9);
	ДобавитьНовыйТип(ТипыОбъектов, "РегламентноеЗадание",			"РегламентныеЗадания", 			"Общие", 		ПеречисленияТипы.РегламентноеЗадание, 			10);
	ДобавитьНовыйТип(ТипыОбъектов, "ФункциональнаяОпция",			"ФункциональныеОпции", 			"Общие", 		ПеречисленияТипы.ФункциональнаяОпция, 			11);
	ДобавитьНовыйТип(ТипыОбъектов, "ПараметрФункциональнойОпции",	"ПараметрыФункциональныхОпций", "Общие", 		ПеречисленияТипы.ПараметрФункциональнойОпции, 	12);
	ДобавитьНовыйТип(ТипыОбъектов, "ОпределяемыйТип", 				"ОпределяемыеТипы", 			"Общие", 		ПеречисленияТипы.ОпределяемыйТип, 				56);
	ДобавитьНовыйТип(ТипыОбъектов, "ХранилищеНастроек", 			"ХранилищаНастроек", 			"Общие", 		ПеречисленияТипы.ХранилищеНастроек, 			13);
	ДобавитьНовыйТип(ТипыОбъектов, "ОбщаяФорма", 					"ОбщиеФормы", 					"Общие", 		ПеречисленияТипы.ОбщаяФорма, 					14);
	ДобавитьНовыйТип(ТипыОбъектов, "ОбщаяУправляемаяФорма", 		"ОбщиеУправляемыеФормы", 		"Общие", 		ПеречисленияТипы.ОбщаяУправляемаяФорма, 		14);
	ДобавитьНовыйТип(ТипыОбъектов, "ОбщаяКоманда", 					"ОбщиеКоманды", 				"Общие", 		ПеречисленияТипы.ОбщаяКоманда, 					15);
	ДобавитьНовыйТип(ТипыОбъектов, "ГруппаКоманд", 					"ГруппыКоманд", 				"Общие", 		ПеречисленияТипы.ГруппаКоманд, 					16);
	ДобавитьНовыйТип(ТипыОбъектов, "Интерфейс", 					"Интерфейсы", 					"Общие", 		ПеречисленияТипы.Интерфейс, 					17);
	ДобавитьНовыйТип(ТипыОбъектов, "ОбщийМакет", 					"ОбщиеМакеты", 					"Общие", 		ПеречисленияТипы.ОбщийМакет, 					58);
	ДобавитьНовыйТип(ТипыОбъектов, "ОбщаяКартинка", 				"ОбщиеКартинки", 				"Общие", 		ПеречисленияТипы.Картинка, 						19);
	ДобавитьНовыйТип(ТипыОбъектов, "ПакетXDTO", 					"ПакетыXDTO", 					"Общие", 		ПеречисленияТипы.ПакетXDTO, 					20);
	ДобавитьНовыйТип(ТипыОбъектов, "WebСервис", 					"WebСервисы", 					"Общие", 		ПеречисленияТипы.WebСервис, 					21);
	ДобавитьНовыйТип(ТипыОбъектов, "HTTPСервис", 					"HTTPСервисы", 					"Общие", 		ПеречисленияТипы.HTTPСервис, 					59);
	ДобавитьНовыйТип(ТипыОбъектов, "WSСсылка", 						"WSСсылки", 					"Общие", 		ПеречисленияТипы.WSСсылка, 						24);
	ДобавитьНовыйТип(ТипыОбъектов, "ЭлементСтиля", 					"ЭлементыСтиля", 				"Общие", 		ПеречисленияТипы.ЭлементСтиля, 					26);
	ДобавитьНовыйТип(ТипыОбъектов, "Стиль", 						"Стили", 						"Общие", 		ПеречисленияТипы.Стиль, 						25);
	ДобавитьНовыйТип(ТипыОбъектов, "Язык", 							"Языки", 						"Общие", 		ПеречисленияТипы.Язык, 							27);
	ДобавитьНовыйТип(ТипыОбъектов, "Константа", 					"Константы", 					"Конфигурация", ПеречисленияТипы.Константа, 					28);
	ДобавитьНовыйТип(ТипыОбъектов, "Справочник", 					"Справочники", 					"Конфигурация", ПеречисленияТипы.Справочник, 					29);
	ДобавитьНовыйТип(ТипыОбъектов, "Документ", 						"Документы", 					"Конфигурация", ПеречисленияТипы.Документ, 						30);
	ДобавитьНовыйТип(ТипыОбъектов, "ЖурналДокументов", 				"ЖурналыДокументов", 			"Конфигурация", ПеречисленияТипы.ЖурналДокументов, 				33);
	ДобавитьНовыйТип(ТипыОбъектов, "Перечисление", 					"Перечисления", 				"Конфигурация", ПеречисленияТипы.Перечисление, 					35);
	ДобавитьНовыйТип(ТипыОбъектов, "Отчет", 						"Отчеты", 						"Конфигурация", ПеречисленияТипы.Отчет, 						37);
	ДобавитьНовыйТип(ТипыОбъектов, "Обработка", 					"Обработки", 					"Конфигурация", ПеречисленияТипы.Обработка, 					38);
	ДобавитьНовыйТип(ТипыОбъектов, "ПланВидовХарактеристик", 		"ПланыВидовХарактеристик", 		"Конфигурация", ПеречисленияТипы.ПланВидовХарактеристик, 		39);
	ДобавитьНовыйТип(ТипыОбъектов, "ПланСчетов", 					"ПланыСчетов", 					"Конфигурация", ПеречисленияТипы.ПланСчетов, 					40);
	ДобавитьНовыйТип(ТипыОбъектов, "ПланВидовРасчета", 				"ПланыВидовРасчета", 			"Конфигурация", ПеречисленияТипы.ПланВидовРасчета, 				43);
	ДобавитьНовыйТип(ТипыОбъектов, "РегистрСведений", 				"РегистрыСведений", 			"Конфигурация", ПеречисленияТипы.РегистрСведений, 				44);
	ДобавитьНовыйТип(ТипыОбъектов, "РегистрНакопления", 			"РегистрыНакопления", 			"Конфигурация", ПеречисленияТипы.РегистрНакопления, 			45);
	ДобавитьНовыйТип(ТипыОбъектов, "РегистрБухгалтерии", 			"РегистрыБухгалтерии", 			"Конфигурация", ПеречисленияТипы.РегистрБухгалтерии, 			46);
	ДобавитьНовыйТип(ТипыОбъектов, "РегистрРасчета", 				"РегистрыРасчета", 				"Конфигурация", ПеречисленияТипы.РегистрРасчета, 				47);
	ДобавитьНовыйТип(ТипыОбъектов, "БизнесПроцесс", 				"БизнесПроцессы", 				"Конфигурация", ПеречисленияТипы.БизнесПроцесс, 				51);
	ДобавитьНовыйТип(ТипыОбъектов, "Задача", 						"Задачи", 						"Конфигурация", ПеречисленияТипы.Задача, 						52);
	ДобавитьНовыйТип(ТипыОбъектов, "ВнешнийИсточникДанных", 		"ВнешниеИсточникиДанных", 		"Конфигурация", ПеречисленияТипы.ПустаяСсылка(), 				54);
	ДобавитьНовыйТип(ТипыОбъектов, "Реквизит", 						"Реквизиты", 					"", 			ПеречисленияТипы.Реквизит, 						56);
	ДобавитьНовыйТип(ТипыОбъектов, "СтандартнаяТабличнаяЧасть",		"СтандартныеТабличныеЧасти", 	"", 			ПеречисленияТипы.СтандартнаяТабличнаяЧасть, 	57);
	ДобавитьНовыйТип(ТипыОбъектов, "СтандартныйРеквизит",			"СтандартныеРеквизиты", 		"", 			ПеречисленияТипы.СтандартныйРеквизит, 			56);
	ДобавитьНовыйТип(ТипыОбъектов, "ТабличнаяЧасть", 				"ТабличныеЧасти", 				"", 			ПеречисленияТипы.ТабличнаяЧасть, 				57);
	ДобавитьНовыйТип(ТипыОбъектов, "Форма", 						"Формы", 						"", 			ПеречисленияТипы.Форма, 						14);
	ДобавитьНовыйТип(ТипыОбъектов, "УправляемаяФорма", 				"УправляемыеФормы", 			"", 			ПеречисленияТипы.УправляемаяФорма, 				14);
	ДобавитьНовыйТип(ТипыОбъектов, "Команда", 						"Команды", 						"", 			ПеречисленияТипы.Команда, 						15);
	ДобавитьНовыйТип(ТипыОбъектов, "Макет", 						"Макеты", 						"", 			ПеречисленияТипы.Макет, 						58);
	ДобавитьНовыйТип(ТипыОбъектов, "Нумератор", 					"Нумераторы", 					"", 			ПеречисленияТипы.ПустаяСсылка(), 				31);
	ДобавитьНовыйТип(ТипыОбъектов, "Последовательность", 			"Последовательности",			"", 			ПеречисленияТипы.ПустаяСсылка(), 				32);
	ДобавитьНовыйТип(ТипыОбъектов, "Графа", 						"Графы", 						"", 			ПеречисленияТипы.Графа, 						34);
	ДобавитьНовыйТип(ТипыОбъектов, "Значение", 						"Значения", 					"", 			ПеречисленияТипы.Значение, 						36);
	ДобавитьНовыйТип(ТипыОбъектов, "ПризнакУчета", 					"ПризнакиУчета", 				"", 			ПеречисленияТипы.ПустаяСсылка(), 				41);
	ДобавитьНовыйТип(ТипыОбъектов, "ПризнакУчетаСубконто", 			"ПризнакиУчетаСубконто", 		"", 			ПеречисленияТипы.ПустаяСсылка(), 				42);
	ДобавитьНовыйТип(ТипыОбъектов, "Измерение", 					"Измерения", 					"", 			ПеречисленияТипы.Измерение, 					48);
	ДобавитьНовыйТип(ТипыОбъектов, "Ресурс", 						"Ресурсы", 						"", 			ПеречисленияТипы.Ресурс, 						49);
	ДобавитьНовыйТип(ТипыОбъектов, "Перерасчет", 					"Перерасчеты", 					"", 			ПеречисленияТипы.ПустаяСсылка(), 				50);
	ДобавитьНовыйТип(ТипыОбъектов, "РеквизитАдресации", 			"РеквизитыАдресации", 			"", 			ПеречисленияТипы.ПустаяСсылка(), 				53);
	ДобавитьНовыйТип(ТипыОбъектов, "ПредопределенныйЭлемент", 		"ПредопределенныеЭлементы", 	"", 			ПеречисленияТипы.ПредопределенныйЭлемент, 		56);
	ДобавитьНовыйТип(ТипыОбъектов, "Операция", 						"Операции", 					"", 			ПеречисленияТипы.Операция, 						22);
	ДобавитьНовыйТип(ТипыОбъектов, "Параметр", 						"Параметры", 					"", 			ПеречисленияТипы.Параметр, 						23);
	ДобавитьНовыйТип(ТипыОбъектов, "ШаблонURL", 					"ШаблоныURL", 					"", 			ПеречисленияТипы.ШаблонURL, 					60);
	ДобавитьНовыйТип(ТипыОбъектов, "МетодШаблонаURL", 				"МетодыШаблонаURL", 			"", 			ПеречисленияТипы.МетодШаблонаURL, 				61);
	
	Возврат ТипыОбъектов;
	
КонецФункции

// Ищет и возвращает значение в таблице типов по заданным условиям.
//
Функция НайтиВТаблицеТиповОбъектов(ТипыОбъектов, ЗначениеДляПоиска, КолонкаВозврата, КолонкаПоиска = "",
	Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипыОбъектов) Тогда
		ТипыОбъектов = ЗаполнитьТаблицуТиповОбъектов();
	КонецЕсли;
	
	Если ТипыОбъектов.Колонки.Найти(КолонкаВозврата) = Неопределено Тогда
		Возврат ЗначениеДляПоиска;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КолонкаПоиска) Тогда
		КолонкаПоиска = СокрЛП(КолонкаПоиска);
		Если ТипыОбъектов.Колонки.Найти(КолонкаПоиска) = Неопределено Тогда
			КолонкаПоиска = "";
		КонецЕсли;
	КонецЕсли;
	
	ТипОбъекта = ТипыОбъектов.Найти(ЗначениеДляПоиска, КолонкаПоиска);
	ЗначениеПоУмолчанию = ?(ЗначениеПоУмолчанию = Неопределено, ЗначениеДляПоиска, ЗначениеПоУмолчанию);
	
	Возврат ?(ТипОбъекта = Неопределено, ЗначениеПоУмолчанию, ТипОбъекта[КолонкаВозврата]);
	
КонецФункции

Функция ПолучитьТипПоЭлементуПутиОбъекта(ЭлементПутиОбъекта)
	
	Если ЭлементПутиОбъекта = "Форма" Тогда
		Результат = Перечисления.ТипыОбъектов.УправляемаяФорма;
	ИначеЕсли ЭлементПутиОбъекта = "Команда" Тогда
		Результат = Перечисления.ТипыОбъектов.Команда;
	ИначеЕсли ЭлементПутиОбъекта = "Макет" Тогда
		Результат = Перечисления.ТипыОбъектов.Макет;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истину, если переданный тип объекта является ссылочным, иначе Ложь.
Функция ЭтоСсылочныйТип(ТипОбъекта) Экспорт
	
	ТипыОбъектов = Перечисления.ТипыОбъектов;
	
	Возврат ТипОбъекта = ТипыОбъектов.ПланОбмена
		ИЛИ ТипОбъекта = ТипыОбъектов.Справочник
		ИЛИ ТипОбъекта = ТипыОбъектов.Документ
		ИЛИ ТипОбъекта = ТипыОбъектов.ПланВидовХарактеристик
		ИЛИ ТипОбъекта = ТипыОбъектов.ПланСчетов
		ИЛИ ТипОбъекта = ТипыОбъектов.ПланВидовРасчета
		ИЛИ ТипОбъекта = ТипыОбъектов.БизнесПроцесс
		ИЛИ ТипОбъекта = ТипыОбъектов.Задача;
	
КонецФункции

#КонецОбласти

#Область РаботаСОтборами

// Устанавливает отбор по пометке удаления.
//
Процедура УстановитьОтборПоПометкеУдаления(Отбор, ПоказыватьПомеченныеНаУдаление = Ложь) Экспорт
	
	ПометкаУдаления = Отбор.ПометкаУдаления;
	ПометкаУдаления.Значение = Ложь;
	ПометкаУдаления.ВидСравнения = ВидСравнения.Равно;
	ПометкаУдаления.Использование = НЕ ПоказыватьПомеченныеНаУдаление;
	
КонецПроцедуры

// Устанавливает отбор по расширениям.
//
Процедура УстановитьОтборПоРасширениям(Отбор, СписокРасширений = Неопределено, Владелец = Неопределено) Экспорт
	
	Если СписокРасширений = Неопределено Тогда
		Если Владелец = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокРасширений = Новый СписокЗначений;
		СписокРасширений.Добавить(Справочники.Расширения.ПустаяСсылка());
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Расширения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Расширения КАК Расширения
		|ГДЕ
		|	Расширения.Владелец = &Владелец
		|	И НЕ Расширения.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		ВыборкаРасширений = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРасширений.Следующий() Цикл
			СписокРасширений.Добавить(ВыборкаРасширений.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Расширение = Отбор.Расширение;
	Если СписокРасширений.Количество() = 1 Тогда
		Расширение.Установить(СписокРасширений[0].Значение);
	Иначе
		Расширение.ВидСравнения = ВидСравнения.ВСписке;
		Расширение.Значение = СписокРасширений;
		Расширение.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по типу объекта.
//
Процедура УстановитьОтборПоТипуОбъекта(Отбор, СписокТиповОтбора, ВидСравнения) Экспорт
	
	Если ТипЗнч(СписокТиповОтбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокТиповОтбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = Отбор.ТипОбъекта;
	ТипОбъекта.ВидСравнения = ВидСравнения;
	ТипОбъекта.Значение = СписокТиповОтбора;
	ТипОбъекта.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеОбъектов

Процедура ВыполнитьУдалениеСвязанныхОбъектовКонфигурации(ОбъектСсылка, ЗначениеПометкиУдаления, СтрокаСчетчик) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПометкиУдаления Тогда
		ТекстСообщения = НСтр("ru='Установка пометки удаления ""%1"" %2 завершена успешно.'");
	Иначе
		ТекстСообщения = НСтр("ru='Снятие пометки удаления ""%1"" %2 завершено успешно.'");
	КонецЕсли;
	ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ОбъектСсылка), СтрокаСчетчик);
	
	Если ОбъектСсылка.ПометкаУдаления = ЗначениеПометкиУдаления Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	ТипПараметра = ТипЗнч(ОбъектСсылка);
	ЭтоКонфигурация = ТипПараметра = Тип("СправочникСсылка.Конфигурации");
	
	СправочникОбъект = ОбъектСсылка.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(ЗначениеПометкиУдаления, НЕ ОбъектСсылка.ЭтоГруппа);
	СправочникОбъект.Записать();
	
	Если ОбъектСсылка.ЭтоГруппа Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПроверкаВерсии.Ссылка
	|ИЗ
	|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
	|ГДЕ " + ?(ЭтоКонфигурация, "
	|	ПроверкаВерсии.Конфигурация = &ПараметрЗапроса", "
	|	ПроверкаВерсии.Версия = &ПараметрЗапроса
	|	ИЛИ ПроверкаВерсии.Эталон = &ПараметрЗапроса") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задание.Ссылка
	|ИЗ
	|	Документ.Задание КАК Задание
	|ГДЕ " + ?(ЭтоКонфигурация, "
	|	Задание.Конфигурация = &ПараметрЗапроса", "
	|	Задание.Версия = &ПараметрЗапроса");
	
	Запрос.УстановитьПараметр("ПараметрЗапроса", ОбъектСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Проведен = НЕ ЗначениеПометкиУдаления;
		ДокументОбъект.ПометкаУдаления = ЗначениеПометкиУдаления;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Если НЕ ЭтоКонфигурация Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	// Удалить варианты проверки конфигурации.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВариантыПроверки.Ссылка
	|ИЗ
	|	Справочник.ВариантыПроверки КАК ВариантыПроверки
	|ГДЕ
	|	ВариантыПроверки.Конфигурация = &Конфигурация";
	Запрос.УстановитьПараметр("Конфигурация", ОбъектСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантПроверкиОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантПроверкиОбъект.ПометкаУдаления = ЗначениеПометкиУдаления;
		ВариантПроверкиОбъект.Записать();
	КонецЦикла;
	
	Сообщить(ТекстСообщения, СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура ИзменитьПометкуУдаленияВФоновомЗадании(ЗапущенныеЗадания, ОбъектСсылка, ЗначениеПометкиУдаления, СтрокаСчетчик)
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ОбъектСсылка);
	ПараметрыЗадания.Добавить(ЗначениеПометкиУдаления);
	ПараметрыЗадания.Добавить(СтрокаСчетчик);
	КлючЗадания = Строка(ОбъектСсылка.УникальныйИдентификатор());
	Если ЗначениеПометкиУдаления Тогда
		НаименованиеЗадания = НСтр("ru='Установка пометки удаления ""%1"" %2'");
	Иначе
		НаименованиеЗадания = НСтр("ru='Снятие пометки удаления ""%1"" %2'");
	КонецЕсли;
	НаименованиеЗадания = СтрШаблон(НаименованиеЗадания, ОбъектСсылка, СтрокаСчетчик);
	
	Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
	СуществующиеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если СуществующиеЗадания.Количество() = 0 Тогда
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			"УдалениеПомеченныхОбъектовСлужебный.ВыполнитьУдалениеСвязанныхОбъектовКонфигурацииВФоновомЗадании",
			ПараметрыЗадания, КлючЗадания, НаименованиеЗадания);
		ЗапущенныеЗадания.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПометкиУдаления Тогда
		ТекстВопроса = НСтр("ru='Установка пометки удаления ""%1"" уже запущена в фоновом задании. Прервать?'");
	Иначе
		ТекстВопроса = НСтр("ru='Снятие пометки удаления ""%1"" уже запущено в фоновом задании. Прервать?'");
	КонецЕсли;
	ТекстВопроса = СтрШаблон(ТекстВопроса, ОбъектСсылка);
	
	#Если Клиент Тогда
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "1С:Предприятие");
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	ФоновоеЗадание = СуществующиеЗадания[0];
	ИндексЗадания = ЗапущенныеЗадания.Найти(ФоновоеЗадание.УникальныйИдентификатор);
	Если ИндексЗадания <> Неопределено Тогда
		ЗапущенныеЗадания.Удалить(ИндексЗадания);
	КонецЕсли;
	ФоновоеЗадание.Отменить();
	
КонецПроцедуры

Функция ПолучитьОбъектыДляИзмененияПометкиУдаления(ВыделенныеОбъекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Конфигурации.Ссылка КАК Ссылка,
	|	Конфигурации.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.Конфигурации КАК Конфигурации
	|ГДЕ
	|	Конфигурации.Ссылка В (&ОбъектыСсылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Версии.Ссылка КАК Ссылка,
	|	Версии.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.Версии КАК Версии
	|ГДЕ
	|	Версии.Ссылка В (&ОбъектыСсылки)";
	
	Запрос.УстановитьПараметр("ОбъектыСсылки", ВыделенныеОбъекты);
	
	ОбъектыСсылки = Запрос.Выполнить().Выгрузить();
	Если ОбъектыСсылки.Количество() = 0 Тогда
		Возврат ОбъектыСсылки;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыСсылки[0].Ссылка) <> Тип("СправочникСсылка.Конфигурации") Тогда
		Возврат ОбъектыСсылки;
	КонецЕсли;
	
	КоличествоОбъектов = ОбъектыСсылки.Количество();
	Для НомерОбъекта = 0 По КоличествоОбъектов - 1 Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Конфигурации.Ссылка КАК Ссылка,
		|	Конфигурации.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Конфигурации КАК Конфигурации
		|ГДЕ
		|	Конфигурации.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И Конфигурации.Ссылка <> &Ссылка
		|	И НЕ Конфигурации.Ссылка В (&ОбъектыСсылки)";
		Запрос.УстановитьПараметр("Ссылка", ОбъектыСсылки[НомерОбъекта].Ссылка);
		Запрос.УстановитьПараметр("ОбъектыСсылки", ОбъектыСсылки.ВыгрузитьКолонку("Ссылка"));
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Для Каждого Объект Из РезультатЗапроса Цикл
			ЗаполнитьЗначенияСвойств(ОбъектыСсылки.Добавить(), Объект);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОбъектыСсылки;
	
КонецФункции

Функция ПолучитьЗначениеПометкиУдаления(ОбъектыСсылки)
	
	ЗначениеПометкиУдаления = ОбъектыСсылки[0].ПометкаУдаления;
	
	Для НомерОбъекта = 1 По ОбъектыСсылки.Количество() - 1 Цикл
		Если ОбъектыСсылки[НомерОбъекта].ПометкаУдаления <> ЗначениеПометкиУдаления Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеПометкиУдаления;
	
КонецФункции

// При пометке удаления конфигурации или версии процедура помечает на удаление все связанные объекты:
//  Документы: Проверка версии, Задание;
//  Справочники: Варианты проверки.
// ВыделенныеОбъекты - массив ссылок на конфигурацию или версию.
//
Процедура УдалитьСвязанныеОбъектыКонфигурации(ЗапущенныеЗадания, ВыделенныеОбъекты, Отказ) Экспорт
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(ВыделенныеОбъекты) Тогда
		Возврат;
	КонецЕсли;
	
	ТипПараметра = ТипЗнч(ВыделенныеОбъекты[0].Ссылка);
	Если ТипПараметра <> Тип("СправочникСсылка.Версии") И ТипПараметра <> Тип("СправочникСсылка.Конфигурации") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСсылки = ПолучитьОбъектыДляИзмененияПометкиУдаления(ВыделенныеОбъекты);
	Если НЕ ЗначениеЗаполнено(ОбъектыСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПометкиУдаления = ПолучитьЗначениеПометкиУдаления(ОбъектыСсылки);
	Если ЗначениеПометкиУдаления = Истина Тогда
		ТекстВопроса = НСтр("ru='Снятие пометки удаления будет выполнено в фоновом задании.
			|
			|Снять с элемента пометку на удаление?'");
		ЗначениеПометкиУдаления = Ложь;
	ИначеЕсли ЗначениеПометкиУдаления = Ложь Тогда
		ТекстВопроса = НСтр("ru='Установка пометки удаления будет выполнена в фоновом задании.
			|
			|Пометить объект на удаление?'");
		ЗначениеПометкиУдаления = Истина;
	Иначе
		ТекстВопроса = НСтр("ru='Изменение пометки удаления будет выполнено в фоновом задании.
			|
			|Среди выделенных объектов имеются различные пометки удаления.
			|Какое действие необходимо выполнить с пометкой удаления?'");
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ЗначениеПометкиУдаления = Неопределено Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Да, "Установить");
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Нет, "Снять");
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		Результат = Вопрос(ТекстВопроса, КнопкиДиалога,, КодВозвратаДиалога.Да, "1С:Предприятие");
		Если Результат = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		ЗначениеПометкиУдаления = Результат = КодВозвратаДиалога.Да;
	Иначе
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "1С:Предприятие");
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	КоличествоОбъектов = ОбъектыСсылки.Количество();
	Для НомерОбъекта = 1 По КоличествоОбъектов Цикл
		ОбъектСсылка = ОбъектыСсылки[НомерОбъекта - 1].Ссылка;
		СтрокаСчетчик = СтрШаблон("(%1/%2)", НомерОбъекта, КоличествоОбъектов);
		ИзменитьПометкуУдаленияВФоновомЗадании(ЗапущенныеЗадания, ОбъектСсылка, ЗначениеПометкиУдаления, СтрокаСчетчик);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузкаОтветственныхExcel

// Возвращает значение ячейки листа Excel по строке и колонке.
//
Функция ПрочитатьЯчейкуExcel(Лист, НомерСтроки, НомерКолонки) Экспорт
	
	ЗначениеЯчейки = Лист.Cells(НомерСтроки, НомерКолонки).Value;
	ЗначениеЯчейки = Строка(ЗначениеЯчейки);
	ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
	
	Возврат ЗначениеЯчейки;
	
КонецФункции

// Возвращает структуру данных, полученных из строки листа Excel.
//
Функция ПрочитатьСтрокуExcel(Лист, НомерСтроки) Экспорт
	
	СтруктураСтроки = Новый Структура("Ответственный, ПутьОбъекта, ТипОбъекта, Расширение");
	
	СтруктураСтроки.Ответственный = ПрочитатьЯчейкуExcel(Лист, НомерСтроки, 1);
	СтруктураСтроки.ПутьОбъекта = ПрочитатьЯчейкуExcel(Лист, НомерСтроки, 2);
	СтруктураСтроки.ТипОбъекта = ПрочитатьЯчейкуExcel(Лист, НомерСтроки, 3);
	СтруктураСтроки.Расширение = ПрочитатьЯчейкуExcel(Лист, НомерСтроки, 4);
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает таблицу всех пользователей.
//
Функция ПолучитьТаблицуОтветственных() Экспорт
	
	ЗапросПоОтветственным = Новый Запрос;
	ЗапросПоОтветственным.Текст = "
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Наименование,
	|	Пользователи.Код
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления";
	
	ТаблицаОтветственных = ЗапросПоОтветственным.Выполнить().Выгрузить();
	
	Для Каждого Ответственный Из ТаблицаОтветственных Цикл
		Ответственный.Наименование = ВРег(СтрЗаменить(Ответственный.Наименование, " ", ""));
		Ответственный.Код = ВРег(СтрЗаменить(Ответственный.Код, " ", ""));
	КонецЦикла;
	
	Возврат ТаблицаОтветственных;
	
КонецФункции

#КонецОбласти

#Область РаботаСТекстом

// Если не указан массив символов, то возвращает текст без значащих символов: пробелов, символов "Таб" и переноса строки.
// Иначе возвращает текст без символов, указанных в параметре "МассивСимволов".
//
Функция УдалитьНезначащиеСимволы(Знач Текст, МассивСимволов = Неопределено) Экспорт
	
	Если МассивСимволов = Неопределено Тогда
		МассивСимволов = Новый Массив;
		МассивСимволов.Добавить(" ");
		МассивСимволов.Добавить(Символы.Таб);
		МассивСимволов.Добавить(Символы.ПС);
		МассивСимволов.Добавить(Символы.ВК);
		МассивСимволов.Добавить(Символы.НПП);
	КонецЕсли;
	
	Для Каждого НезначащийСимвол Из МассивСимволов Цикл
		Текст = СтрЗаменить(Текст, НезначащийСимвол, "");
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Получает синоним по имени.
//
Функция ПолучитьСинонимПоИмени(Знач Имя) Экспорт
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат "";
	КонецЕсли;
	
	Имя = СокрЛП(Имя);
	ДлинаИмени = СтрДлина(Имя);
	Синоним = Лев(Имя, 1);
	
	Для Индекс = 2 По ДлинаИмени Цикл
		Буква = Сред(Имя, Индекс, 1);
		Синоним = Синоним + ?(ВРег(Буква) = Буква, " " + НРег(Буква), Буква);
	КонецЦикла;
	
	Возврат Синоним;
	
КонецФункции

// Возвращает Истину, если слово содержит кириллические буквы, иначе возвращает Ложь.
//
Функция СловоСодержитКириллицу(Знач Слово) Экспорт
	
	Если ПустаяСтрока(Слово) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Алфавит = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	
	Слово = НРег(Слово);
	ВсегоБукв = СтрДлина(Слово);
	Для Счетчик = 1 По ВсегоБукв Цикл
		Буква = Сред(Слово, Счетчик, 1);
		Если СтрНайти(Алфавит, Буква) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истину, если слово содержит латинские буквы, иначе возвращает Ложь.
//
Функция СловоСодержитЛатиницу(Знач Слово) Экспорт
	
	Если ПустаяСтрока(Слово) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Алфавит = "abcdefghijklmnopqrstuvwxyz";
	
	Слово = НРег(Слово);
	ВсегоБукв = СтрДлина(Слово);
	Для Счетчик = 1 По ВсегоБукв Цикл
		Буква = Сред(Слово, Счетчик, 1);
		Если СтрНайти(Алфавит, Буква) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истину, если слово содержит кириллические или латинские буквы.
// Иначе - слово состоит только из цифр, точек, тире и др. знаков пунктуации - возвращает Ложь.
//
Функция СловоСодержитБуквы(Знач Слово) Экспорт
	
	Возврат СловоСодержитКириллицу(Слово) ИЛИ СловоСодержитЛатиницу(Слово);
	
КонецФункции

// Возвращает Истину, если слово содержит цифры, иначе возвращает Ложь.
//
Функция СловоСодержитЦифры(Знач Слово) Экспорт
	
	Если ПустаяСтрока(Слово) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЦифры = "0123456789";
	
	ВсегоСимволов = СтрДлина(Слово);
	Для Счетчик = 1 По ВсегоСимволов Цикл
		Символ = Сред(Слово, Счетчик, 1);
		Если СтрНайти(ТекстЦифры, Символ) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истину, если слово содержит цифры, кириллические или латинские буквы.
// Иначе - слово состоит только из точек, тире и др. знаков пунктуации - возвращает Ложь.
//
Функция СловоСодержитЗначимыеСимволы(Знач Слово) Экспорт
	
	Возврат СловоСодержитБуквы(Слово) ИЛИ СловоСодержитЦифры(Слово) ИЛИ (СтрНайти(Слово, "_") > 0);
	
КонецФункции

// Возвращает Истину, если слово состоит только из кириллических букв,
// иначе (латинские буквы, цифры, любые символы) возвращает Ложь.
//
Функция СловоСодержитТолькоКириллицу(Знач Слово) Экспорт
	
	Если ПустаяСтрока(Слово) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Алфавит = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	
	Слово = НРег(Слово);
	ВсегоБукв = СтрДлина(Слово);
	Для Счетчик = 1 По ВсегоБукв Цикл
		Буква = Сред(Слово, Счетчик, 1);
		Если СтрНайти(Алфавит, Буква) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истину, если слово состоит только из латинских букв
// иначе (кириллические буквы, цифры, любые символы) возвращает Ложь.
//
Функция СловоСодержитТолькоЛатиницу(Знач Слово) Экспорт
	
	Если ПустаяСтрока(Слово) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Алфавит = "abcdefghijklmnopqrstuvwxyz";
	
	Слово = НРег(Слово);
	ВсегоБукв = СтрДлина(Слово);
	Для Счетчик = 1 По ВсегоБукв Цикл
		Буква = Сред(Слово, Счетчик, 1);
		Если СтрНайти(Алфавит, Буква) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм =
		СтрНайти(Параметр1, "%")
		ИЛИ СтрНайти(Параметр2, "%")
		ИЛИ СтрНайти(Параметр3, "%")
		ИЛИ СтрНайти(Параметр4, "%")
		ИЛИ СтрНайти(Параметр5, "%")
		ИЛИ СтрНайти(Параметр6, "%")
		ИЛИ СтрНайти(Параметр7, "%")
		ИЛИ СтрНайти(Параметр8, "%")
		ИЛИ СтрНайти(Параметр9, "%");
	
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
//
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истину, если переданный параметр - Число.
//
Функция ЭтоЧисло(Значение) Экспорт
	
	Если Значение = "." Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Значение = Число(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истину, если переданный параметр - Булево.
//
Функция ЭтоБулево(Значение) Экспорт
	
	Попытка
		Значение = Булево(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

// Получает массив строк из переданной строки по разделителю.
// Действует аналогично функции СтрРазделить(), но если разделитель состоит из нескольких символов,
// то разделение происходит по всему разделителю, а не по отдельным символам разделителя.
//
// Параметры:
//   Строка         - Строка - Переданная строка со значениями.
//   Разделитель    - Строка - Символ или набор символов для разделения строки.
//   ВключатьПустые - Булево - Флаг указывающий, что будут включены пустые строки.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция СтрРазделитьПоСтроке(Знач Строка, Разделитель, ВключатьПустые = Ложь) Экспорт
	
	Если СтрДлина(Разделитель) <= 1 Тогда
		Возврат СтрРазделить(Строка, Разделитель, ВключатьПустые);
	КонецЕсли;
	
	МассивСлов = Новый Массив;
	Если СтрНайти(Строка, Разделитель) = 0 Тогда
		МассивСлов.Добавить(Строка);
		Возврат МассивСлов;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, Разделитель, Символы.ПС);
	ВсегоСтрок = СтрЧислоСтрок(Строка);
	
	Для НомерСтроки = 1 По ВсегоСтрок Цикл
		
		ТекущаяСтрока = СтрПолучитьСтроку(Строка, НомерСтроки);
		Если ПустаяСтрока(ТекущаяСтрока) И (НомерСтроки = ВсегоСтрок) Тогда
			Прервать;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекущаяСтрока) И (НЕ ВключатьПустые) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСлов.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат МассивСлов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает флаг сбора данных.
//
Функция ВерсияПолучитьФлагСбораДанных(Версия, ИмяФлага, Знач Расширение = Неопределено) Экспорт
	
	Расширение = ПолучитьСсылкуРасширения(Расширение);
	ОтборПоСобраннымДанным = Новый Структура("Расширение, ИмяФлага", Расширение, ИмяФлага);
	МассивСобранныхДанных = Версия.СобранныеДанные.НайтиСтроки(ОтборПоСобраннымДанным);
	Возврат ?(ЗначениеЗаполнено(МассивСобранныхДанных), МассивСобранныхДанных[0].ЗначениеФлага, Ложь);
	
КонецФункции

// Устанавливает флаг сбора данных.
//
Процедура ВерсияУстановитьФлагСбораДанных(Версия, ИмяФлага, ЗначениеФлага = Истина, Знач Расширение = Неопределено) Экспорт
	
	Если (НЕ ЗначениеЗаполнено(Версия)) ИЛИ (НЕ ЗначениеЗаполнено(ИмяФлага)) Тогда
		Возврат;
	КонецЕсли;
	
	Расширение = ПолучитьСсылкуРасширения(Расширение);
	
	Попытка
		
		ОбъектВерсии = Версия.ПолучитьОбъект();
		
		ОтборПоСобраннымДанным = Новый Структура("Расширение, ИмяФлага", Расширение, ИмяФлага);
		МассивСобранныхДанных = ОбъектВерсии.СобранныеДанные.НайтиСтроки(ОтборПоСобраннымДанным);
		Если ЗначениеЗаполнено(МассивСобранныхДанных) Тогда
			СтрокаТаблицыДанных = МассивСобранныхДанных[0];
		Иначе
			СтрокаТаблицыДанных = ОбъектВерсии.СобранныеДанные.Добавить();
			СтрокаТаблицыДанных.Расширение = Расширение;
			СтрокаТаблицыДанных.ИмяФлага = ИмяФлага;
		КонецЕсли;
		
		СтрокаТаблицыДанных.ЗначениеФлага = ЗначениеФлага;
		
		ОбъектВерсии.Записать();
		
	Исключение
		
		Событие = НСтр("ru='Установка флага сбора данных для версии'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось установить флаг сбора данных ""%1"" по причине:
			|%2'"), ИмяФлага, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
		
	КонецПопытки;
	
КонецПроцедуры

// Проверяет наличие расширения в информационной базе.
//
Функция ПроверитьНаличиеРасширения(Конфигурация, Расширение, Знач КаталогКонфигурации = Неопределено,
	Знач Пользователь = Неопределено, Знач Пароль = Неопределено) Экспорт
	
	Если КаталогКонфигурации = Неопределено Тогда
		КаталогКонфигурации = Конфигурация.КаталогКонфигурации;
	КонецЕсли;
	Если Пользователь = Неопределено Тогда
		Пользователь = Конфигурация.Пользователь;
	КонецЕсли;
	Если Пароль = Неопределено Тогда
		Пароль = Конфигурация.Пароль;
	КонецЕсли;
	
	КаталогКонфигурацииДляВыгрузкиВФайлыXML = ПолучитьКаталогВременныхФайлов();
	КаталогВыгрузкиФайловXML = ПолучитьКаталогВременныхФайлов();
	
	ТекстОшибки = КопироватьБазу(КаталогКонфигурации, КаталогКонфигурацииДляВыгрузкиВФайлыXML);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ФайлЛогаВыгрузкиФайловXML = ПолучитьИмяВременногоФайла("txt");
	ДоступККонфигуратору.ЗапуститьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, КаталогКонфигурацииДляВыгрузкиВФайлыXML,
		Пользователь, Пароль, КаталогВыгрузкиФайловXML, ФайлЛогаВыгрузкиФайловXML, Расширение.Наименование, Истина);
	МассивВыгруженныхФайлов = НайтиФайлы(КаталогВыгрузкиФайловXML, "*");
	ФайлУдалить(КаталогКонфигурацииДляВыгрузкиВФайлыXML);
	ФайлУдалить(КаталогВыгрузкиФайловXML);
	Возврат МассивВыгруженныхФайлов.Количество() > 0;
	
КонецФункции

// Считывает список расширений из информационной базы и записывает в справочник "Расширения".
//
Процедура ОбновитьСписокРасширений(Конфигурация, Знач КаталогКонфигурации = Неопределено,
	Знач Пользователь = Неопределено, Знач Пароль = Неопределено) Экспорт
	
	Если КаталогКонфигурации = Неопределено Тогда
		КаталогКонфигурации = Конфигурация.КаталогКонфигурации;
	КонецЕсли;
	Если Пользователь = Неопределено Тогда
		Пользователь = Конфигурация.Пользователь;
	КонецЕсли;
	Если Пароль = Неопределено Тогда
		Пароль = Конфигурация.Пароль;
	КонецЕсли;
	
	КаталогКонфигурацииДляВыгрузкиВФайлыXML = ПолучитьКаталогВременныхФайлов();
	КаталогВыгрузкиФайловXML = ПолучитьКаталогВременныхФайлов();
	
	ТекстОшибки = КопироватьБазу(КаталогКонфигурации, КаталогКонфигурацииДляВыгрузкиВФайлыXML);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	УспешнаяОперация = ДоступККонфигуратору.ВыгрузитьРасширенияВФайлыXML(Конфигурация, КаталогКонфигурацииДляВыгрузкиВФайлыXML,
		Пользователь, Пароль, КаталогВыгрузкиФайловXML);
	Если Не УспешнаяОперация Тогда
		Сообщить(НСтр("ru='Выгрузка файлов xml для всех расширений завершилась с ошибкой.'"));
		Возврат;
	КонецЕсли;
	
	МассивАктивныхРасширений = Новый Массив;
	мФайлов = НайтиФайлы(КаталогВыгрузкиФайловXML, "*");
	Для Каждого текФайл Из мФайлов Цикл
		МассивАктивныхРасширений.Добавить(текФайл.Имя);
	КонецЦикла;
	
	ФайлУдалить(КаталогКонфигурацииДляВыгрузкиВФайлыXML);
	ФайлУдалить(КаталогВыгрузкиФайловXML);
	
	Если ТипЗнч(Конфигурация) = Тип("СправочникСсылка.Конфигурации") Тогда
		ОбъектКонфигурация = Конфигурация.ПолучитьОбъект();
		СсылкаКонфигурация = Конфигурация;
		ЗаписыватьОбъект   = Истина;
	Иначе
		ОбъектКонфигурация = Конфигурация;
		СсылкаКонфигурация = Конфигурация.Ссылка;
		ЗаписыватьОбъект   = Ложь;
	КонецЕсли;
	
	ВыборкаПоРасширениям = Справочники.Расширения.Выбрать(, СсылкаКонфигурация);
	Пока ВыборкаПоРасширениям.Следующий() Цикл
		
		Расширение = ВыборкаПоРасширениям.Ссылка;
		ИндексРасширения = МассивАктивныхРасширений.Найти(ВыборкаПоРасширениям.Наименование);
		Если ИндексРасширения = Неопределено Тогда
			
			УстановитьПометкуУдаленияРасширения(Расширение, Истина);
			СтрокаТаблицыРасширений = ОбъектКонфигурация.Расширения.Найти(Расширение, "Расширение");
			Если СтрокаТаблицыРасширений <> Неопределено Тогда
				ОбъектКонфигурация.Расширения.Удалить(СтрокаТаблицыРасширений);
			КонецЕсли;
			
		Иначе
			
			УстановитьПометкуУдаленияРасширения(Расширение, Ложь);
			МассивАктивныхРасширений.Удалить(ИндексРасширения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Расширение Из МассивАктивныхРасширений Цикл
		
		ОбъектРасширение = Справочники.Расширения.СоздатьЭлемент();
		ОбъектРасширение.Владелец = СсылкаКонфигурация;
		ОбъектРасширение.Наименование = Расширение;
		ОбъектРасширение.Записать();
		
		СтрокаТаблицыРасширений = ОбъектКонфигурация.Расширения.Добавить();
		СтрокаТаблицыРасширений.Расширение = ОбъектРасширение.Ссылка;
		
	КонецЦикла;
	
	Если ЗаписыватьОбъект Тогда
		ОбъектКонфигурация.Записать();
	КонецЕсли;
	
	Сообщить(НСтр("ru='Список расширений обновлен.'"));
	
КонецПроцедуры

// Устанавливает пометку на удаление в справочнике "Расширения".
//
Процедура УстановитьПометкуУдаленияРасширения(СсылкаРасширение, ПометкаУдаления)
	
	Если СсылкаРасширение.ПометкаУдаления = ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектРасширение = СсылкаРасширение.ПолучитьОбъект();
	ОбъектРасширение.ПометкаУдаления = ПометкаУдаления;
	ОбъектРасширение.Записать();
	
КонецПроцедуры

// Получает ссылку на справочник "Расширений" в зависимости от переданного параметра.
//
Функция ПолучитьСсылкуРасширения(Расширение = Неопределено) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(Расширение), Расширение, Справочники.Расширения.ПустаяСсылка());
	
КонецФункции

// Получает описание лога для расширения или конфигурации.
//
Функция ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение = Неопределено) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(Расширение), НСтр("ru='расширения'") + " " + Расширение, НСтр("ru='конфигурации'"));
	
КонецФункции

// Получает описание проверки для выбранного сценария
// 0 - Конфигурация, 1 - Расширения, 2 - Конфигурация + Расширения
Функция ПолучитьОписаниеПроверки(Сценарий, СписокРасширений) Экспорт
	
	Если Сценарий = 0 Тогда
		Возврат НСтр("ru='конфигурации'");
	Иначе
		КоличествоРасширений = СписокРасширений.Количество();
		Если Сценарий = 1 Тогда
			ТекстОписания = НСтр("ru='расширений (%1)'");
		Иначе
			ТекстОписания = НСтр("ru='конфигурации и расширений (%1)'");
			КоличествоРасширений = КоличествоРасширений - 1;
		КонецЕсли;
		Возврат СтрШаблон(ТекстОписания, КоличествоРасширений);
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу всех объектов структуры конфигурации по версии.
//
Функция ПолучитьТаблицуОбъектовКонфигурации(Версия, Расширение = Неопределено, ВсеРасширения = Ложь) Экспорт
	
	ЗапросПоОбъектам = Новый Запрос;
	ЗапросПоОбъектам.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Путь КАК ПутьОбъекта,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК ТипОбъекта,
	|	СтруктураКонфигурации.Ответственный КАК Ответственный,
	|	СтруктураКонфигурации.Владелец КАК Версия,
	|	СтруктураКонфигурации.Родитель КАК Родитель,
	|	СтруктураКонфигурации.Расширение КАК Расширение
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Версия
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И 1 = 1";
	
	Если ВсеРасширения Тогда
		ТекстОтбораРасширений = "";
	Иначе
		ТекстОтбораРасширений = "И СтруктураКонфигурации.Расширение = &Расширение";
		ЗапросПоОбъектам.УстановитьПараметр("Расширение", ПолучитьСсылкуРасширения(Расширение));
	КонецЕсли;
	ЗапросПоОбъектам.Текст = СтрЗаменить(ЗапросПоОбъектам.Текст, "И 1 = 1", ТекстОтбораРасширений);
	ЗапросПоОбъектам.УстановитьПараметр("Версия", Версия);
	
	ТаблицаОбъектов = ЗапросПоОбъектам.Выполнить().Выгрузить();
	
	ТаблицаОбъектов.Колонки.Добавить("ПутьОбъектаВРег");
	ТаблицаОбъектов.Колонки.Добавить("НаименованиеВРег");
	ТаблицаОбъектов.Колонки.Добавить("ТипОбъектаВРег");
	
	Для Каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
		СтрокаОбъекта.ПутьОбъектаВРег = ВРег(СтрокаОбъекта.ПутьОбъекта);
		СтрокаОбъекта.НаименованиеВРег = ВРег(СтрокаОбъекта.Наименование);
		СтрокаОбъекта.ТипОбъектаВРег = ВРег(СтрЗаменить(СтрокаОбъекта.ТипОбъекта, " ", ""));
	КонецЦикла;
	
	ТаблицаОбъектов.Индексы.Добавить("ПутьОбъектаВРег");
	ТаблицаОбъектов.Индексы.Добавить("НаименованиеВРег");
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

// Получает объекты всех уровней, входящих в переданную подсистему.
//
Функция ПолучитьСписокОбъектовПодсистемы(Подсистема, Версия, ТаблицаОбъектов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурацииПодсистемы.Ссылка
	|ИЗ
	|	Справочник.СтруктураКонфигурации.Подсистемы КАК СтруктураКонфигурацииПодсистемы
	|ГДЕ
	|	СтруктураКонфигурацииПодсистемы.Ссылка.Владелец = &Владелец
	|	И СтруктураКонфигурацииПодсистемы.Подсистема = &Подсистема" + ?(ТаблицаОбъектов = Неопределено, "", "
	|	И СтруктураКонфигурацииПодсистемы.Ссылка НЕ В(&ТаблицаОбъектов) ");
	
	Запрос.УстановитьПараметр("Владелец", Версия);
	Запрос.УстановитьПараметр("Подсистема", Подсистема);
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает последнюю версию переданной в функцию конфигурации.
//
Функция НайтиПоследнююВерсию(Конфигурация, ДанныеДолжныБытьСобраны = Истина) Экспорт
	
	ТаблицаВерсий = ПолучитьТаблицуВерсий(Конфигурация, ДанныеДолжныБытьСобраны);
	ТаблицаВерсий.Сортировать("КлючВерсии Убыв");
	
	Возврат ?(ТаблицаВерсий.Количество() > 0, ТаблицаВерсий[0].Версия, Справочники.Версии.ПустаяСсылка());
	
КонецФункции

// Возвращает все не помеченные на удаление версии конфигурации.
//
Функция ПолучитьТаблицуВерсий(Конфигурация, ДанныеДолжныБытьСобраны = Истина) Экспорт
	
	ЗапросПоВерсиям = Новый Запрос;
	ЗапросПоВерсиям.Текст = "
	|ВЫБРАТЬ
	|	Версии.Код КАК Код,
	|	Версии.Ссылка КАК Версия
	|ИЗ
	|	Справочник.Версии КАК Версии
	|ГДЕ
	|	Версии.Владелец = &Конфигурация
	|	И 1 = 1
	|	И НЕ Версии.ПометкаУдаления";
	
	ТекстОтбораПоСобраннымДанным = ?(ДанныеДолжныБытьСобраны, "И Версии.СобранныеДанные.ИмяФлага = ""СобраныДанные""
		|	И Версии.СобранныеДанные.ЗначениеФлага = ИСТИНА", "");
	
	ЗапросПоВерсиям.Текст = СтрЗаменить(ЗапросПоВерсиям.Текст, "И 1 = 1", ТекстОтбораПоСобраннымДанным);
	
	ЗапросПоВерсиям.УстановитьПараметр("Конфигурация", Конфигурация);
	
	ТаблицаВерсий = ЗапросПоВерсиям.Выполнить().Выгрузить();
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(30, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаВерсий.Колонки.Добавить("КлючВерсии", ТипЧисло);
	
	Для Каждого СтрокаВерсии Из ТаблицаВерсий Цикл
		
		МассивЧиселВерсии = СтрРазделить(СокрЛП(СтрокаВерсии.Код), ".", Ложь);
		
		ВсегоЧисел = МассивЧиселВерсии.Количество();
		Если ВсегоЧисел = 3 Тогда
			МассивЧиселВерсии.Добавить(999);
			ВсегоЧисел = 4;
		КонецЕсли;
		
		Множитель = 1;
		
		Для Счетчик = 1 По ВсегоЧисел Цикл
			СтрокаВерсии.КлючВерсии = СтрокаВерсии.КлючВерсии + Множитель * МассивЧиселВерсии[ВсегоЧисел - Счетчик];
			Множитель = Множитель * 1000;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВерсий;
	
КонецФункции

// Возвращает "Истина", если ПредыдущийРелиз меньше СледующийРелиз.
//
Функция РелизыПоПорядку(ПредыдущийРелиз, СледующийРелиз) Экспорт
	
	Если ПустаяСтрока(ПредыдущийРелиз) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПредыдущийРелиз = СледующийРелиз Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивЧиселПредыдущегоРелиза = СтрРазделить(ПредыдущийРелиз, ".", Ложь);
	МассивЧиселСледующегоРелиза = СтрРазделить(СледующийРелиз, ".", Ложь);
	
	КоличествоЧиселПредыдущегоРелиза = МассивЧиселПредыдущегоРелиза.Количество();
	Если КоличествоЧиселПредыдущегоРелиза <> МассивЧиселСледующегоРелиза.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерЭлемента = 0 По КоличествоЧиселПредыдущегоРелиза - 1 Цикл
		ЧислоПредыдущего = Число(МассивЧиселПредыдущегоРелиза[НомерЭлемента]);
		ЧислоСледующего = Число(МассивЧиселСледующегоРелиза[НомерЭлемента]);
		Если ЧислоПредыдущего <> ЧислоСледующего Тогда
			Возврат (ЧислоСледующего > ЧислоПредыдущего);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Получает номер версии без номера сборки.
//
Функция ПолучитьНомерВерсииБезСборки(НомерВерсии) Экспорт
	
	МассивЧиселВерсии = СтрРазделить(НомерВерсии, ".", Ложь);
	Если МассивЧиселВерсии.Количество() > 3 Тогда
		
		МассивЧиселВерсииБезСборки = Новый Массив;
		Для НомерЭлементаВерсии = 0 По 2 Цикл
			МассивЧиселВерсииБезСборки.Добавить(МассивЧиселВерсии[НомерЭлементаВерсии]);
		КонецЦикла;
		
		МассивЧиселВерсии = МассивЧиселВерсииБезСборки;
		
	КонецЕсли;
	
	НовыйНомерВерсии = СтрСоединить(МассивЧиселВерсии, ".");
	
	Возврат НовыйНомерВерсии;
	
КонецФункции

// Функция предназначена для того, чтобы получить список значений из строки.
//
// Параметры:
//  Строка   - строка, в которой через разделитель перечислены элементы создаваемого списка.
//  Разделитель  - подстрока, являющаяся разделителем значений в строке.
//  УчитыватьПустые - учитывать пустые.
// Возвращаемое значение:
//  Тип: Строка. Результат замены.
//
Функция СписокИзСтроки(Знач Строка, Разделитель = ",", ВключатьПустые = Ложь) Экспорт
	
	МассивЗначений = СтрРазделить(Строка, Разделитель, ВключатьПустые);
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(МассивЗначений);
	
	Возврат Список;
	
КонецФункции

// Возвращает ссылку на элемент структуры метаданных по пути к нему.
//
Функция ПолучитьЭлементСтруктурыМетаданныхПоПути(Владелец, Путь, Расширение = Неопределено) Экспорт
	
	МассивЭлементовПути = СтрРазделить(Путь, ".", Ложь);
	
	РодительСсылка = Неопределено;
	Для Каждого ЭлементПути Из МассивЭлементовПути Цикл
		Наименование = ЭлементПути;
		ЭлементСсылка = ПолучитьЭлементСтруктурыМетаданных(Владелец, РодительСсылка, Наименование,, Расширение);
		Если Не ЗначениеЗаполнено(ЭлементСсылка) Тогда
			Прервать;
		КонецЕсли;
		РодительСсылка = ЭлементСсылка;
	КонецЦикла;
	
	Возврат ЭлементСсылка;
	
КонецФункции

// Возвращает ссылку на элемент структуры метаданных.
//
Функция ПолучитьЭлементСтруктурыМетаданных(Владелец, Родитель = Неопределено, Наименование = Неопределено,
	ТипОбъекта = Неопределено, Расширение = Неопределено) Экспорт
	
	флагРодительЗаполнен = ЗначениеЗаполнено(Родитель) ИЛИ (Родитель = Справочники.СтруктураКонфигурации.ПустаяСсылка());
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	" + ?(флагРодительЗаполнен, 			"И СтруктураКонфигурации.Родитель = &Родитель", "") + "
	|	" + ?(ЗначениеЗаполнено(Наименование), 	"И СтруктураКонфигурации.Наименование = &Наименование", "") + "
	|	" + ?(ЗначениеЗаполнено(ТипОбъекта), 	"И СтруктураКонфигурации.ТипОбъекта = &ТипОбъекта", "");
	
	ЗапросПоиска.УстановитьПараметр("Расширение", ПолучитьСсылкуРасширения(Расширение));
	ЗапросПоиска.УстановитьПараметр("Владелец", Владелец);
	ЗапросПоиска.УстановитьПараметр("Родитель", Родитель);
	ЗапросПоиска.УстановитьПараметр("Наименование", Наименование);
	ЗапросПоиска.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.СтруктураКонфигурации.ПустаяСсылка());

КонецФункции

// На вход подается путь к объекту, сформированный конфигуратором при проверке конфигурации,
// например Обработка.Обработка1.Форма.Форма.Форма.
// На выходе по этому пути возвращается ссылка на справочник структура конфигурации.
// Путь будет Обработка.Обработка1.Форма.
//
Функция ПолучитьСсылкуНаОбъектПоПути(Версия, Путь, ТипыОбъектов, Расширение = Неопределено) Экспорт
	
	МассивЭлементовПути = СтрРазделить(Путь, ".", Ложь);
	
	КоличествоЭлементов = МассивЭлементовПути.Количество();
	Если КоличествоЭлементов = 0 Тогда
		Возврат Справочники.СтруктураКонфигурации.ПустаяСсылка();
	КонецЕсли;
	
	РодительНаименование = НайтиВТаблицеТиповОбъектов(ТипыОбъектов, МассивЭлементовПути[0], "ИмяВоМножественномЧисле");
	Корень = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Перечисления.ТипыОбъектов.Корень, Расширение);
	
	Если НайтиВТаблицеТиповОбъектов(ТипыОбъектов, РодительНаименование, "Родитель") = "Общие" Тогда
		ОбщиеСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия, Корень, "Общие",, Расширение);
		РодительСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия, ОбщиеСсылка, РодительНаименование,, Расширение);
	Иначе
		РодительСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия, Корень, РодительНаименование,, Расширение);
	КонецЕсли;
	
	Для НомерЭлемента = 1 По КоличествоЭлементов - 1 Цикл
		
		ЗначениеПредыдущегоЭлементаСписка = МассивЭлементовПути[НомерЭлемента - 1];
		
		ЗначениеТекущегоЭлементаСписка = МассивЭлементовПути[НомерЭлемента];
		Если ЗначениеТекущегоЭлементаСписка <> ЗначениеПредыдущегоЭлементаСписка Тогда
			ИмяОбъекта = НайтиВТаблицеТиповОбъектов(ТипыОбъектов, ЗначениеТекущегоЭлементаСписка, "ИмяВоМножественномЧисле");
		Иначе
			ИмяОбъекта = ЗначениеТекущегоЭлементаСписка;
		КонецЕсли;
		
		ТипЭлемента = ПолучитьТипПоЭлементуПутиОбъекта(ЗначениеПредыдущегоЭлементаСписка);
		Если ЗначениеЗаполнено(ТипЭлемента) Тогда
			ОбъектСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия, РодительСсылка, ИмяОбъекта, ТипЭлемента, Расширение);
		Иначе
			ОбъектСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия, РодительСсылка, ИмяОбъекта,, Расширение);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РодительСсылка = ОбъектСсылка;
		
	КонецЦикла;
	
	Возврат РодительСсылка;
	
КонецФункции

// Ищет значение поиска в таблице типов объектов по колонке поиска.
// Если значение найдено, то возвращает значение из колонки имени,
// иначе возвращается значение по умолчанию, если оно заполнено.
// Если значение по умолчанию не заполнено, возвращается значение поиска.
//
Функция ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ЗначениеПоиска, КолонкаПоиска = "ИмяАнгл",
	КолонкаИмени = "ИмяМнФормы", ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Найти(ЗначениеПоиска, КолонкаПоиска);
	Если СтрокаТипаОбъекта <> Неопределено Тогда
		Возврат СтрокаТипаОбъекта[КолонкаИмени];
	КонецЕсли;
	
	Возврат ?(ЗначениеПоУмолчанию = Неопределено, ЗначениеПоиска, ЗначениеПоУмолчанию);
	
КонецФункции

Функция ПолучитьТаблицуТиповОбъектов() Экспорт
	
	ТаблицаТиповОбъектов = Новый ТаблицаЗначений;
	ТаблицаТиповОбъектов.Колонки.Добавить("Группа");
	ТаблицаТиповОбъектов.Колонки.Добавить("Имя");
	ТаблицаТиповОбъектов.Колонки.Добавить("ИмяМнФормы");
	ТаблицаТиповОбъектов.Колонки.Добавить("ИмяАнгл");
	ТаблицаТиповОбъектов.Колонки.Добавить("ИмяАнглМнФормы");
	ТаблицаТиповОбъектов.Колонки.Добавить("ТипОбъекта");
	
	Типы = Перечисления.ТипыОбъектов;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Constant";
	СтрокаТипаОбъекта.Имя = "Константа";
	СтрокаТипаОбъекта.ИмяМнФормы = "Константы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Constants";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Константа;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Catalog";
	СтрокаТипаОбъекта.Имя = "Справочник";
	СтрокаТипаОбъекта.ИмяМнФормы = "Справочники";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Catalogs";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Справочник;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Document";
	СтрокаТипаОбъекта.Имя = "Документ";
	СтрокаТипаОбъекта.ИмяМнФормы = "Документы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Documents";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Документ;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DocumentJournal";
	СтрокаТипаОбъекта.Имя = "ЖурналДокументов";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЖурналыДокументов";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DocumentJournals";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ЖурналДокументов;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Enum";
	СтрокаТипаОбъекта.Имя = "Перечисление";
	СтрокаТипаОбъекта.ИмяМнФормы = "Перечисления";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Enums";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Перечисление;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Report";
	СтрокаТипаОбъекта.Имя = "Отчет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Отчеты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Reports";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Отчет;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DataProcessor";
	СтрокаТипаОбъекта.Имя = "Обработка";
	СтрокаТипаОбъекта.ИмяМнФормы = "Обработки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DataProcessors";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Обработка;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ChartOfCharacteristicTypes";
	СтрокаТипаОбъекта.Имя = "ПланВидовХарактеристик";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыВидовХарактеристик";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ChartsOfCharacteristicTypes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПланВидовХарактеристик;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ChartOfAccounts";
	СтрокаТипаОбъекта.Имя = "ПланСчетов";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыСчетов";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ChartsOfAccounts";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПланСчетов;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ChartOfCalculationTypes";
	СтрокаТипаОбъекта.Имя = "ПланВидовРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыВидовРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ChartsOfCalculationTypes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПланВидовРасчета;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "InformationRegister";
	СтрокаТипаОбъекта.Имя = "РегистрСведений";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыСведений";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "InformationRegisters";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.РегистрСведений;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AccumulationRegister";
	СтрокаТипаОбъекта.Имя = "РегистрНакопления";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыНакопления";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "AccumulationRegisters";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.РегистрНакопления;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AccountingRegister";
	СтрокаТипаОбъекта.Имя = "РегистрБухгалтерии";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыБухгалтерии";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "AccountingRegisters";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.РегистрБухгалтерии;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "CalculationRegister";
	СтрокаТипаОбъекта.Имя = "РегистрРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CalculationRegisters";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.РегистрРасчета;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BusinessProcess";
	СтрокаТипаОбъекта.Имя = "БизнесПроцесс";
	СтрокаТипаОбъекта.ИмяМнФормы = "БизнесПроцессы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "BusinessProcesses";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.БизнесПроцесс;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Task";
	СтрокаТипаОбъекта.Имя = "Задача";
	СтрокаТипаОбъекта.ИмяМнФормы = "Задачи";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Tasks";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Задача;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Form";
	СтрокаТипаОбъекта.Имя = "Форма";
	СтрокаТипаОбъекта.ИмяМнФормы = "Формы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Forms";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.УправляемаяФорма;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Attribute";
	СтрокаТипаОбъекта.Имя = "Реквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "Реквизиты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Attributes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Реквизит;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "ExchangePlan";
	СтрокаТипаОбъекта.Имя = "ПланОбмена";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыОбмена";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExchangePlans";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПланОбмена;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Characteristic";
	СтрокаТипаОбъекта.Имя = "Характеристика";
	СтрокаТипаОбъекта.ИмяМнФормы = "Характеристика";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Characteristics";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Sequence";
	СтрокаТипаОбъекта.Имя = "Последовательность";
	СтрокаТипаОбъекта.ИмяМнФормы = "Последовательности";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Sequences";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Recalculation";
	СтрокаТипаОбъекта.Имя = "Перерасчет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Перерасчеты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Recalculations";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Dimension";
	СтрокаТипаОбъекта.Имя = "Измерение";
	СтрокаТипаОбъекта.ИмяМнФормы = "Измерения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Dimensions";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Измерение;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Resource";
	СтрокаТипаОбъекта.Имя = "Ресурс";
	СтрокаТипаОбъекта.ИмяМнФормы = "Ресурсы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Resources";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Ресурс;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "TabularSection";
	СтрокаТипаОбъекта.Имя = "ТабличнаяЧасть";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТабличныеЧасти";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "TabularSections";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ТабличнаяЧасть;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Attribute";
	СтрокаТипаОбъекта.Имя = "Реквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "РеквизитыТабличнойЧасти";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "AttributesTabularSections";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Реквизит;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Command";
	СтрокаТипаОбъекта.Имя = "Команда";
	СтрокаТипаОбъекта.ИмяМнФормы = "Команды";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Commands";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Команда;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Role";
	СтрокаТипаОбъекта.Имя = "Роль";
	СтрокаТипаОбъекта.ИмяМнФормы = "Роли";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Roles";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Роль;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "SessionParameter";
	СтрокаТипаОбъекта.Имя = "ПараметрСеанса";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПараметрыСеанса";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "SessionParameters";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПараметрСеанса;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonModule";
	СтрокаТипаОбъекта.Имя = "ОбщийМодуль";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеМодули";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonModules";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ОбщийМодуль;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "FilterCriterion";
	СтрокаТипаОбъекта.Имя = "КритерийОтбора";
	СтрокаТипаОбъекта.ИмяМнФормы = "КритерииОтбора";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "FilterCriteria";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.КритерийОтбора;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "EventSubscription";
	СтрокаТипаОбъекта.Имя = "ПодпискаНаСобытие";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПодпискиНаСобытия";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "EventSubscriptions";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПодпискаНаСобытия;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "ScheduledJob";
	СтрокаТипаОбъекта.Имя = "РегламентноеЗадание";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегламентныеЗадания";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ScheduledJobs";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.РегламентноеЗадание;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "SettingsStorage";
	СтрокаТипаОбъекта.Имя = "ХранилищеНастроек";
	СтрокаТипаОбъекта.ИмяМнФормы = "ХранилищаНастроек";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "SettingsStorages";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ХранилищеНастроек;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonForm";
	СтрокаТипаОбъекта.Имя = "ОбщаяФорма";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеФормы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonForms";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ОбщаяУправляемаяФорма;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonCommand";
	СтрокаТипаОбъекта.Имя = "ОбщаяКоманда";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеКоманды";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonCommands";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ОбщаяКоманда;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommandGroup";
	СтрокаТипаОбъекта.Имя = "ГруппаКоманд";
	СтрокаТипаОбъекта.ИмяМнФормы = "ГруппыКоманд";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommandGroups";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ГруппаКоманд;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Interface";
	СтрокаТипаОбъекта.Имя = "Интерфейс";
	СтрокаТипаОбъекта.ИмяМнФормы = "Интерфейсы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Interfaces";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Интерфейс;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonTemplate";
	СтрокаТипаОбъекта.Имя = "ОбщийМакет";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеМакеты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonTemplates";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ОбщийМакет;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonPicture";
	СтрокаТипаОбъекта.Имя = "ОбщаяКартинка";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеКартинки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonPictures";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Картинка;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "XDTOPackage";
	СтрокаТипаОбъекта.Имя = "ПакетXDTO";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПакетыXDTO";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "XDTOPackages";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПакетXDTO;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "WebService";
	СтрокаТипаОбъекта.Имя = "WebСервис";
	СтрокаТипаОбъекта.ИмяМнФормы = "WebСервисы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "WebServices";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.WebСервис;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "HTTPService";
	СтрокаТипаОбъекта.Имя = "HTTPСервис";
	СтрокаТипаОбъекта.ИмяМнФормы = "HTTPСервисы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "HTTPServices";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.HTTPСервис;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Style";
	СтрокаТипаОбъекта.Имя = "Стиль";
	СтрокаТипаОбъекта.ИмяМнФормы = "Стили";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Styles";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Стиль;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "StyleItem";
	СтрокаТипаОбъекта.Имя = "ЭлементСтиля";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЭлементыСтиля";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "StyleItems";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ЭлементСтиля;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DocumentNumerator";
	СтрокаТипаОбъекта.Имя = "НумераторДокументов";
	СтрокаТипаОбъекта.ИмяМнФормы = "НумераторыДокументов";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DocumentNumerators";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AddressingAttribute";
	СтрокаТипаОбъекта.Имя = "РеквизитАдресации";
	СтрокаТипаОбъекта.ИмяМнФормы = "РеквизитыАдресации";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "AddressingAttributes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AccountingFlag";
	СтрокаТипаОбъекта.Имя = "ПризнакУчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПризнакиУчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "AccountingFlags";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExtDimensionAccountingFlag";
	СтрокаТипаОбъекта.Имя = "ПризнакУчетаСубконто";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПризнакиУчетаСубконто";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExtDimensionsAccountingFlags";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Subsystem";
	СтрокаТипаОбъекта.Имя = "Подсистема";
	СтрокаТипаОбъекта.ИмяМнФормы = "Подсистемы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Subsystems";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Подсистема;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "WSReference";
	СтрокаТипаОбъекта.Имя = "WSСсылка";
	СтрокаТипаОбъекта.ИмяМнФормы = "WSСсылки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "WSReferences";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.WSСсылка;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "FunctionalOptionsParameter";
	СтрокаТипаОбъекта.Имя = "ПараметрФункциональныхОпций";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПараметрыФункциональныхОпций";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "FunctionalOptionsParameters";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПараметрФункциональнойОпции;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "FunctionalOption";
	СтрокаТипаОбъекта.Имя = "ФункциональнаяОпция";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "FunctionalOptions";
	СтрокаТипаОбъекта.ИмяМнФормы = "ФункциональныеОпции";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ФункциональнаяОпция;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonAttribute";
	СтрокаТипаОбъекта.Имя = "ОбщийРеквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеРеквизиты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonAttributes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ОбщийРеквизит;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Template";
	СтрокаТипаОбъекта.Имя = "Макет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Макеты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Templates";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Макет;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Predefined";
	СтрокаТипаОбъекта.Имя = "Предопределенный";
	СтрокаТипаОбъекта.ИмяМнФормы = "Предопределенные";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Predefineds";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПредопределенныйЭлемент;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Configuration";
	СтрокаТипаОбъекта.Имя = "Конфигурация";
	СтрокаТипаОбъекта.ИмяМнФормы = "Конфигурация";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Configurations";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Конфигурация;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Language";
	СтрокаТипаОбъекта.Имя = "Язык";
	СтрокаТипаОбъекта.ИмяМнФормы = "Языки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Languages";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Язык;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "EnumValue";
	СтрокаТипаОбъекта.Имя = "ЗначениеПеречисления";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЗначенияПеречисления";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "EnumValues";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Значение;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Column";
	СтрокаТипаОбъекта.Имя = "Графа";
	СтрокаТипаОбъекта.ИмяМнФормы = "Графы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Columns";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Графа;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExternalDataSource";
	СтрокаТипаОбъекта.Имя = "ВнешнийИсточникДанных";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВнешниеИсточникиДанных";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExternalDataSources";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Table";
	СтрокаТипаОбъекта.Имя = "Таблица";
	СтрокаТипаОбъекта.ИмяМнФормы = "Таблицы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Tables";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Field";
	СтрокаТипаОбъекта.Имя = "Поле";
	СтрокаТипаОбъекта.ИмяМнФормы = "Поля";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Fields";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Operation";
	СтрокаТипаОбъекта.Имя = "Операция";
	СтрокаТипаОбъекта.ИмяМнФормы = "Операции";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Operations";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Операция; // Операция Web-сервиса.
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Parameter";
	СтрокаТипаОбъекта.Имя = "Параметр";
	СтрокаТипаОбъекта.ИмяМнФормы = "Параметры";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Parameters";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.Параметр; // Параметр операции Web-сервиса.
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "URLTemplate";
	СтрокаТипаОбъекта.Имя = "ШаблонURL";
	СтрокаТипаОбъекта.ИмяМнФормы = "ШаблоныURL";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "URLTemplates";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ШаблонURL; // Шаблон URL для HTTP-сервиса.
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Method";
	СтрокаТипаОбъекта.Имя = "МетодШаблонаURL";
	СтрокаТипаОбъекта.ИмяМнФормы = "МетодыШаблонаURL";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Methods";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.МетодШаблонаURL; // Метод шаблона URL для HTTP-сервиса.
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Aggregate";
	СтрокаТипаОбъекта.Имя = "Агрегат";
	СтрокаТипаОбъекта.ИмяМнФормы = "Агрегаты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Aggregates";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "DefinedType";
	СтрокаТипаОбъекта.Имя = "ОпределяемыйТип";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОпределяемыеТипы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DefinedTypes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ОпределяемыйТип;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "StandardTabularSection";
	СтрокаТипаОбъекта.Имя = "СтандартнаяТабличнаяЧасть";
	СтрокаТипаОбъекта.ИмяМнФормы = "СтандартныеТабличныеЧасти";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "StandardTabularSections";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.СтандартнаяТабличнаяЧасть;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "StandardAttribute";
	СтрокаТипаОбъекта.Имя = "СтандартныйРеквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "СтандартныеРеквизиты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "StandardAttributes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.СтандартныйРеквизит;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Ref";
	СтрокаТипаОбъекта.Имя = "Ссылка";
	СтрокаТипаОбъекта.ИмяМнФормы = "Ссылка";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Ref";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DeletionMark";
	СтрокаТипаОбъекта.Имя = "ПометкаУдаления";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПометкаУдаления";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DeletionMark";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Predefined";
	СтрокаТипаОбъекта.Имя = "Предопределенный";
	СтрокаТипаОбъекта.ИмяМнФормы = "Предопределенные";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Predefineds";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПредопределенныйЭлемент;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "PredefinedDataName";
	СтрокаТипаОбъекта.Имя = "ИмяПредопределенныхДанных";
	СтрокаТипаОбъекта.ИмяМнФормы = "ИмяПредопределенныхДанных";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "PredefinedDataName";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Date";
	СтрокаТипаОбъекта.Имя = "Дата";
	СтрокаТипаОбъекта.ИмяМнФормы = "Дата";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Date";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Number";
	СтрокаТипаОбъекта.Имя = "Номер";
	СтрокаТипаОбъекта.ИмяМнФормы = "Номер";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Number";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Posted";
	СтрокаТипаОбъекта.Имя = "Проведен";
	СтрокаТипаОбъекта.ИмяМнФормы = "Проведен";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Posted";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "LineNumber";
	СтрокаТипаОбъекта.Имя = "НомерСтроки";
	СтрокаТипаОбъекта.ИмяМнФормы = "НомерСтроки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "LineNumber";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Code";
	СтрокаТипаОбъекта.Имя = "Код";
	СтрокаТипаОбъекта.ИмяМнФормы = "Код";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Code";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Description";
	СтрокаТипаОбъекта.Имя = "Наименование";
	СтрокаТипаОбъекта.ИмяМнФормы = "Наименование";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Description";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Parent";
	СтрокаТипаОбъекта.Имя = "Родитель";
	СтрокаТипаОбъекта.ИмяМнФормы = "Родитель";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Parent";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Owner";
	СтрокаТипаОбъекта.Имя = "Владелец";
	СтрокаТипаОбъекта.ИмяМнФормы = "Владелец";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Owner";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "IsFolder";
	СтрокаТипаОбъекта.Имя = "ЭтоГруппа";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЭтоГруппа";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "IsFolder";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Order";
	СтрокаТипаОбъекта.Имя = "Порядок";
	СтрокаТипаОбъекта.ИмяМнФормы = "Порядок";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Order";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ThisNode";
	СтрокаТипаОбъекта.Имя = "ЭтотУзел";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЭтотУзел";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ThisNode";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "OffBalance";
	СтрокаТипаОбъекта.Имя = "Забалансовый";
	СтрокаТипаОбъекта.ИмяМнФормы = "Забалансовый";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "OffBalance";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Executed";
	СтрокаТипаОбъекта.Имя = "Выполнена";
	СтрокаТипаОбъекта.ИмяМнФормы = "Выполнена";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Executed";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RoutePoint";
	СтрокаТипаОбъекта.Имя = "ТочкаМаршрута";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТочкаМаршрута";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "RoutePoint";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Recorder";
	СтрокаТипаОбъекта.Имя = "Регистратор";
	СтрокаТипаОбъекта.ИмяМнФормы = "Регистратор";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Recorder";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "CalculationType";
	СтрокаТипаОбъекта.Имя = "ВидРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CalculationType";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ActionPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодДействия";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействия";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ActionPeriod";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BegOfActionPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодДействияНачало";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействияНачало";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "BegOfActionPeriod";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "EndOfActionPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодДействияКонец";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействияКонец";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "EndOfActionPeriod";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BegOfBasePeriod";
	СтрокаТипаОбъекта.Имя = "БазовыйПериодНачало";
	СтрокаТипаОбъекта.ИмяМнФормы = "БазовыйПериодНачало";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "BegOfBasePeriod";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "EndOfBasePeriod";
	СтрокаТипаОбъекта.Имя = "БазовыйПериодКонец";
	СтрокаТипаОбъекта.ИмяМнФормы = "БазовыйПериодКонец";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "EndOfBasePeriod";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Active";
	СтрокаТипаОбъекта.Имя = "Активность";
	СтрокаТипаОбъекта.ИмяМнФормы = "Активность";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Active";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	Для НомерСубконто = 1 По 10 Цикл
		СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
		СтрокаТипаОбъекта.Группа = "";
		СтрокаТипаОбъекта.ИмяАнгл = "ExtDimension" + НомерСубконто;
		СтрокаТипаОбъекта.Имя = "Субконто" + НомерСубконто;
		СтрокаТипаОбъекта.ИмяМнФормы = "Субконто" + НомерСубконто;
		СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExtDimension" + НомерСубконто;
		СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
		
		СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
		СтрокаТипаОбъекта.Группа = "";
		СтрокаТипаОбъекта.ИмяАнгл = "ExtDimensionType" + НомерСубконто;
		СтрокаТипаОбъекта.Имя = "ВидСубконто" + НомерСубконто;
		СтрокаТипаОбъекта.ИмяМнФормы = "ВидСубконто" + НомерСубконто;
		СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExtDimensionType" + НомерСубконто;
		СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	КонецЦикла;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ReversingEntry";
	СтрокаТипаОбъекта.Имя = "Сторно";
	СтрокаТипаОбъекта.ИмяМнФормы = "Сторно";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ReversingEntry";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RegistrationPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодРегистрации";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодРегистрации";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "RegistrationPeriod";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "SentNo";
	СтрокаТипаОбъекта.Имя = "НомерОтправленного";
	СтрокаТипаОбъекта.ИмяМнФормы = "НомерОтправленного";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "SentNo";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ReceivedNo";
	СтрокаТипаОбъекта.Имя = "НомерПринятого";
	СтрокаТипаОбъекта.ИмяМнФормы = "НомерПринятого";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ReceivedNo";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Account";
	СтрокаТипаОбъекта.Имя = "Счет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Счет";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Account";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RecordType";
	СтрокаТипаОбъекта.Имя = "ВидДвижения";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидДвижения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "RecordType";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Period";
	СтрокаТипаОбъекта.Имя = "Период";
	СтрокаТипаОбъекта.ИмяМнФормы = "Период";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Period";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Started";
	СтрокаТипаОбъекта.Имя = "Стартован";
	СтрокаТипаОбъекта.ИмяМнФормы = "Стартован";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Started";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "HeadTask";
	СтрокаТипаОбъекта.Имя = "ВедущаяЗадача";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВедущаяЗадача";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "HeadTask";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Completed";
	СтрокаТипаОбъекта.Имя = "Завершен";
	СтрокаТипаОбъекта.ИмяМнФормы = "Завершен";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Completed";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ActionPeriodIsBasic";
	СтрокаТипаОбъекта.Имя = "ПериодДействияБазовый";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействияБазовый";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ActionPeriodIsBasic";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ValueType";
	СтрокаТипаОбъекта.Имя = "ТипЗначения";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТипЗначения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ValueType";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Type";
	СтрокаТипаОбъекта.Имя = "Тип";
	СтрокаТипаОбъекта.ИмяМнФормы = "Тип";// - ЖурналДокументов
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Type";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Type";
	СтрокаТипаОбъекта.Имя = "Вид";
	СтрокаТипаОбъекта.ИмяМнФормы = "Вид";// - ПланСчетов
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Type";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExtDimensionTypes";
	СтрокаТипаОбъекта.Имя = "ВидыСубконто";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидыСубконто";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExtDimensionTypes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "TurnoversOnly";
	СтрокаТипаОбъекта.Имя = "ТолькоОбороты";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТолькоОбороты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "TurnoversOnly";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExtDimensionType";
	СтрокаТипаОбъекта.Имя = "ВидСубконто";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидСубконто";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExtDimensionType";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BaseCalculationTypes";
	СтрокаТипаОбъекта.Имя = "БазовыеВидыРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "БазовыеВидыРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "BaseCalculationTypes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DisplacingCalculationTypes";
	СтрокаТипаОбъекта.Имя = "ВытесняющиеВидыРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВытесняющиеВидыРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DisplacingCalculationTypes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "LeadingCalculationTypes";
	СтрокаТипаОбъекта.Имя = "ВедущиеВидыРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВедущиеВидыРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "LeadingCalculationTypes";
	СтрокаТипаОбъекта.ТипОбъекта = Типы.ПустаяСсылка();
	
	// Модули
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Module";
	СтрокаТипаОбъекта.Имя = "Модуль";
	СтрокаТипаОбъекта.ИмяМнФормы = "Модуль";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Module";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.Модуль;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "CommandModule";
	СтрокаТипаОбъекта.Имя = "МодульКоманды";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульКоманды";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommandModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульКоманды;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ObjectModule";
	СтрокаТипаОбъекта.Имя = "МодульОбъекта";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульОбъекта";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ObjectModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульОбъекта;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ManagerModule";
	СтрокаТипаОбъекта.Имя = "МодульМенеджера";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульМенеджера";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ManagerModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульМенеджера;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RecordSetModule";
	СтрокаТипаОбъекта.Имя = "МодульНабораЗаписей";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульНабораЗаписей";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "RecordSetModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульНабораЗаписей;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ValueManagerModule";
	СтрокаТипаОбъекта.Имя = "МодульМенеджераЗначения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульМенеджераЗначения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ValueManagerModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульМенеджераЗначения;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ApplicationModule";
	СтрокаТипаОбъекта.Имя = "МодульПриложения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульПриложения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ApplicationModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульПриложения;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ManagedApplicationModule";
	СтрокаТипаОбъекта.Имя = "МодульУправляемогоПриложения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульУправляемогоПриложения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ManagedApplicationModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульУправляемогоПриложения;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "SessionModule";
	СтрокаТипаОбъекта.Имя = "МодульСеанса";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульСеанса";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "SessionModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульСеанса;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExternalConnectionModule";
	СтрокаТипаОбъекта.Имя = "МодульВнешнегоСоединения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульВнешнегоСоединения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExternalConnectionModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульВнешнегоСоединения;
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "OrdinaryApplicationModule";
	СтрокаТипаОбъекта.Имя = "МодульОбычногоПриложения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульОбычногоПриложения";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "OrdinaryApplicationModule";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.МодульОбычногоПриложения;
	
	// Права
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Right";
	СтрокаТипаОбъекта.Имя = "Право";
	СтрокаТипаОбъекта.ИмяМнФормы = "Права";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Rights";
	СтрокаТипаОбъекта.ТипОбъекта = Перечисления.ИдентификаторыСодержанияОбъектов.Права;
	
	ТаблицаТиповОбъектов.Индексы.Добавить("ИмяАнгл");
	ТаблицаТиповОбъектов.Индексы.Добавить("Имя");
	ТаблицаТиповОбъектов.Индексы.Добавить("ИмяМнФормы");
	ТаблицаТиповОбъектов.Индексы.Добавить("ТипОбъекта");
	
	Возврат ТаблицаТиповОбъектов;
	
КонецФункции

Функция ПолучитьТипОбъектаИзПутиОбъекта(ПутьОбъекта)
	
	МассивЭлементовПути = СтрРазделить(ПутьОбъекта, ".");
	
	Возврат МассивЭлементовПути[0];
	
КонецФункции

Функция ПолучитьПутьОбъектаПоИмениИзФайлаВыгрузки(ТаблицаТиповОбъектов, ИмяОбъектаАнгл, КолонкаИмени = "ИмяМнФормы",
	ДобавитьТипОбъектаВПуть = Ложь) Экспорт
	
	Если ИмяОбъектаАнгл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяОбъектаАнгл) Тогда
		Возврат "";
	КонецЕсли;
	
	ТипОбъектаАнгл = ПолучитьТипОбъектаИзПутиОбъекта(ИмяОбъектаАнгл);
	Если ТипОбъектаАнгл = "Configuration" Тогда
		Возврат "Конфигурация";
	КонецЕсли;
	
	ПутьФактический = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипОбъектаАнгл,, КолонкаИмени) + ".";
	
	МассивПуть = СтрРазделить(ИмяОбъектаАнгл, ".", Ложь);
	Для Счетчик = 0 По МассивПуть.ВГраница() Цикл
		
		Если Счетчик % 2 = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИмя = МассивПуть[Счетчик];
		Если (МассивПуть[Счетчик - 1] = "StandardTabularSection")
		 ИЛИ (МассивПуть[Счетчик - 1] = "StandardAttribute") Тогда
			
			СтрокаИмя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, СтрокаИмя,, "Имя");
		КонецЕсли;
		
		ПутьФактический = ПутьФактический + СтрокаИмя + ".";
		
	КонецЦикла;
	
	ПутьФактический = Лев(ПутьФактический, СтрДлина(ПутьФактический) - 1);
	
	Группа = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипОбъектаАнгл,, "Группа", "");
	ПутьФактический = ?(Группа = "", "", Группа + ".") + ПутьФактический;
	
	Если ДобавитьТипОбъектаВПуть Тогда
		ТипОбъекта = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивПуть[МассивПуть.ВГраница() - 1],,
			"ТипОбъекта", "");
		ПутьФактический = ПутьФактический + " " + ТипОбъекта;
	КонецЕсли;
	
	Возврат ПутьФактический;
	
КонецФункции

Функция ПолучитьТаблицуТиповКоманд() Экспорт
	
	ТаблицаТиповКоманд = Новый ТаблицаЗначений;
	ТаблицаТиповКоманд.Колонки.Добавить("ИмяАнгл");
	ТаблицаТиповКоманд.Колонки.Добавить("Имя");
	
	СтрокаТипаКоманды = ТаблицаТиповКоманд.Добавить();
	СтрокаТипаКоманды.ИмяАнгл = "OpenList";
	СтрокаТипаКоманды.Имя = "ОткрытьСписок";
	
	СтрокаТипаКоманды = ТаблицаТиповКоманд.Добавить();
	СтрокаТипаКоманды.ИмяАнгл = "Create";
	СтрокаТипаКоманды.Имя = "Создать";
	
	СтрокаТипаКоманды = ТаблицаТиповКоманд.Добавить();
	СтрокаТипаКоманды.ИмяАнгл = "Open";
	СтрокаТипаКоманды.Имя = "Открыть";
	
	Возврат ТаблицаТиповКоманд;
	
КонецФункции

// Получает дату и номер документа "Проверка версии" последней проверки конфигурации.
//
Функция ПолучитьСведенияОПоследнейПроверкеКонфигурации(Конфигурация) Экспорт
	
	СтруктураСведенияОПоследнейПроверке = Новый Структура("Дата, Номер");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроверкаВерсии.Ссылка КАК Ссылка,
	|	ПроверкаВерсии.Номер КАК Номер,
	|	ПроверкаВерсии.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
	|ГДЕ
	|	ПроверкаВерсии.Проведен
	|	И ПроверкаВерсии.Конфигурация = &Конфигурация
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ";
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПерваяСтрокаТаблицы = Выборка.Выгрузить()[0];
	СтруктураСведенияОПоследнейПроверке.Дата = ПерваяСтрокаТаблицы.ДатаДокумента;
	СтруктураСведенияОПоследнейПроверке.Номер = ПерваяСтрокаТаблицы.Номер;
	
	Возврат СтруктураСведенияОПоследнейПроверке;
	
КонецФункции

// Получает дату последней проверки конфигурации.
//
Функция ВычислитьДатуПоследнейПроверкиКонфигурации(Конфигурация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПроверкаВерсии.Конфигурация КАК Конфигурация,
	|	МАКСИМУМ(ПроверкаВерсии.Дата) КАК ДатаПоследнейПроверки
	|ИЗ
	|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
	|ГДЕ
	|	ПроверкаВерсии.Проведен
	|	И ПроверкаВерсии.Конфигурация = &Конфигурация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверкаВерсии.Конфигурация";
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Выборка.Выгрузить()[0].ДатаПоследнейПроверки;
	
КонецФункции

// Возвращает таблицу значений со сводкой ошибок для отправки писем ответственным за ошибки.
//
Функция СформироватьОтчетОшибок(Конфигурация, ТабДокумент, ТаблицаЗначенийОтчет) Экспорт
	
	Версия = НайтиПоследнююВерсию(Конфигурация);
	ПараметрыНастроек = Новый Соответствие;
	ПараметрыНастроек.Вставить("Версия", Версия);
	ПараметрыНастроек.Вставить("МинимальнаяКритичность", 2);
	
	ПараметрыНастроек.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	ПараметрыНастроек.Вставить("НеОтбиратьПоОтветственному", Истина);
	ПараметрыНастроек.Вставить("Ошибка", Справочники.ОбнаруживаемыеОшибки.ПустаяСсылка());
	ПараметрыНастроек.Вставить("НеОтбиратьПоОшибке", Истина);
	ПараметрыНастроек.Вставить("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	ПараметрыНастроек.Вставить("НеОтбиратьПоСостоянию", Ложь);
	
	ОшибкиТекущийОтчет = "ОшибкиСводка";
	ОтчетОшибки = Отчеты.НайденныеОшибки.Создать();
	СхемаОтчета = ОтчетОшибки.ПолучитьМакет(ОшибкиТекущийОтчет);
	
	НастройкиОтчета = Новый КомпоновщикНастроекКомпоновкиДанных();
	НастройкиОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтчета));
	НастройкиОтчета.ЗагрузитьНастройки(СхемаОтчета.НастройкиПоУмолчанию);
	
	ТаблицаЗначенийОтчет = Новый ТаблицаЗначений;
	ТабДокумент = ОтчетОшибки.СформироватьТабличныйДокумент(ОшибкиТекущийОтчет, ПараметрыНастроек,
		НастройкиОтчета.Настройки, ТаблицаЗначенийОтчет);
	
	Возврат ТаблицаЗначенийОтчет;
	
КонецФункции

// Функция возвращает список ссылок подсистем, в которые входит объект,
// с учетом их родительских подсистем.
Функция ПолучитьСписокПодсистемОбъекта(Знач ОбъектСсылка, УчитыватьРодительскиеПодсистемы = Истина) Экспорт
	
	СписокПодсистем = Новый СписокЗначений;
	
	Если ТипЗнч(ОбъектСсылка) <> Тип("СправочникСсылка.СтруктураКонфигурации")
		И ТипЗнч(ОбъектСсылка) <> Тип("СправочникОбъект.СтруктураКонфигурации") Тогда
		Возврат СписокПодсистем;
	КонецЕсли;
	
	Пока Истина Цикл
		
		Если (ОбъектСсылка.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных)
			ИЛИ (ОбъектСсылка.Родитель = Справочники.СтруктураКонфигурации.ПустаяСсылка()) Тогда
			
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из ОбъектСсылка.Подсистемы Цикл
			
			ПодсистемаСсылка = СтрокаТабличнойЧасти.Подсистема;
			
			Если СписокПодсистем.НайтиПоЗначению(ПодсистемаСсылка) = Неопределено Тогда
				СписокПодсистем.Добавить(ПодсистемаСсылка);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектСсылка = ОбъектСсылка.Родитель;
		
	КонецЦикла;
	
	Если УчитыватьРодительскиеПодсистемы Тогда
		
		КоличествоПодсистем = СписокПодсистем.Количество();
		
		Для НомерПодсистемы = 0 По КоличествоПодсистем - 1 Цикл
			
			ПодсистемаСсылка = СписокПодсистем[НомерПодсистемы].Значение;
			РодительСсылка = ПодсистемаСсылка.Родитель;
			
			Пока Истина Цикл
				
				Если (РодительСсылка.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных)
					ИЛИ (РодительСсылка.Родитель = Справочники.СтруктураКонфигурации.ПустаяСсылка()) Тогда
					
					Прервать;
				КонецЕсли;
				
				Если СписокПодсистем.НайтиПоЗначению(РодительСсылка) = Неопределено Тогда
					СписокПодсистем.Добавить(РодительСсылка);
				КонецЕсли;
				
				РодительСсылка = РодительСсылка.Родитель;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокПодсистем;
	
КонецФункции

// Функция возвращает Истину, если объект принадлежит указанной подсистеме или одной из ее дочерних,
// иначе возвращает Ложь.
Функция ОбъектВходитВПодсистему(ОбъектСсылка, Подсистема, УчитыватьДочерниеПодсистемы = Истина, СоответствияПодсистем = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) <> Тип("СправочникСсылка.СтруктураКонфигурации")
		И ТипЗнч(ОбъектСсылка) <> Тип("СправочникОбъект.СтруктураКонфигурации") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Подсистема) = Тип("СправочникСсылка.СтруктураКонфигурации") Тогда
		ПодсистемаСсылка = Подсистема;
	ИначеЕсли ТипЗнч(Подсистема) = Тип("Строка") Тогда
		
		Версия = ОбъектСсылка.Владелец;
		ТекстПутиПодсистемы = "Общие.Подсистемы.";
		Если НЕ СтрНачинаетсяС(Подсистема, ТекстПутиПодсистемы) Тогда
			Подсистема = ТекстПутиПодсистемы + Подсистема;
		КонецЕсли;
		
		Если ОбъектСсылка.ТипОбъекта = Перечисления.ТипыОбъектов.Подсистема
			И ОбъектСсылка.Родитель.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных Тогда
			НаименованиеПодсистемы = ОбъектСсылка.Наименование;
			Если НЕ СтрНачинаетсяС(НаименованиеПодсистемы, ТекстПутиПодсистемы) Тогда
				НаименованиеПодсистемы = ТекстПутиПодсистемы + НаименованиеПодсистемы;
			КонецЕсли;
			Возврат НаименованиеПодсистемы = Подсистема;
		КонецЕсли;
		
		ПодсистемаСсылка = Неопределено;
		Если СоответствияПодсистем <> Неопределено Тогда
			ПодсистемаСсылка = СоответствияПодсистем.Получить(Подсистема);
		КонецЕсли;
		
		Если ПодсистемаСсылка = Неопределено Тогда
			ПодсистемаСсылка = ПолучитьЭлементСтруктурыМетаданныхПоПути(Версия, Подсистема, ОбъектСсылка.Расширение);
			
			Если НЕ ЗначениеЗаполнено(ПодсистемаСсылка) Тогда
				
				ПодсистемаСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия,, Подсистема, Перечисления.ТипыОбъектов.Подсистема, ОбъектСсылка.Расширение);
				Если НЕ ЗначениеЗаполнено(ПодсистемаСсылка) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СоответствияПодсистем <> Неопределено Тогда
				СоответствияПодсистем.Вставить(Подсистема, ПодсистемаСсылка);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	СписокПодсистем = ПолучитьСписокПодсистемОбъекта(ОбъектСсылка, УчитыватьДочерниеПодсистемы);
	
	Возврат СписокПодсистем.НайтиПоЗначению(ПодсистемаСсылка) <> Неопределено;
	
КонецФункции

// Функция получает ближайшую подсистему с явно назначенным ответственным, в которую входит объект.
//
Функция ПолучитьПодсистемуПоНаследству(ОбъектСсылка)
	
	ТаблицаПодсистем = Новый ТаблицаЗначений();
	ТаблицаПодсистем.Колонки.Добавить("Подсистема");
	ТаблицаПодсистем.Колонки.Добавить("Ответственный");
	ТаблицаПодсистем.Колонки.Добавить("УровеньВложенности");
	ТаблицаПодсистем.Колонки.Добавить("НомерОбъекта");
	
	Для Каждого ПодсистемаОбъекта Из ОбъектСсылка.Подсистемы Цикл
	
		Подсистема = ПодсистемаОбъекта.Подсистема;
		Уровень = 0;
		Пока Истина Цикл
			
			Если Подсистема.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных Тогда
				Прервать;
			КонецЕсли;
			
			ОтветственныйЗаПодсистему = Подсистема.Ответственный;
			Если ЗначениеЗаполнено(ОтветственныйЗаПодсистему) Тогда
				НоваяСтрока = ТаблицаПодсистем.Добавить();
				НоваяСтрока.Подсистема = Подсистема;
				НоваяСтрока.Ответственный = ОтветственныйЗаПодсистему;
				НоваяСтрока.УровеньВложенности = Уровень;
				НоваяСтрока.НомерОбъекта = Подсистема.НомерПоПорядку;
				Прервать;
			КонецЕсли;
			
			Подсистема = Подсистема.Родитель;
			Уровень = Уровень + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаПодсистем.Количество() = 0 Тогда
		Возврат ПолучитьЭлементСтруктурыМетаданных(ОбъектСсылка.Владелец,,,
			Перечисления.ТипыОбъектов.Конфигурация, ОбъектСсылка.Расширение);
	КонецЕсли;
	
	ТаблицаПодсистем.Сортировать("УровеньВложенности, НомерОбъекта");
	
	Возврат ТаблицаПодсистем[0].Подсистема;
	
КонецФункции

// Возвращает объект по наследству, которому явно назначен ответственный.
// Если данная функция вызывается в цикле по объектам, то для ускорения лучше передать ссылку на корень конфигурации.
//
Функция ПолучитьОбъектПоНаследству(ОбъектСсылка, КореньКонфигурацииСсылка = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектСсылка.Ответственный) Тогда
		Возврат ОбъектСсылка;
	КонецЕсли;
	
	Если КореньКонфигурацииСсылка = Неопределено Тогда
		КореньКонфигурацииСсылка = ПолучитьЭлементСтруктурыМетаданных(ОбъектСсылка.Владелец,,,
			Перечисления.ТипыОбъектов.Конфигурация, ОбъектСсылка.Расширение);
	КонецЕсли;
	
	ОбъектСсылкаКопия = ОбъектСсылка;
	
	Пока Истина Цикл
		
		РодительСсылка = ОбъектСсылкаКопия.Родитель;
		
		Если НЕ ЗначениеЗаполнено(РодительСсылка) Тогда
			ОбъектПоНаследству = КореньКонфигурацииСсылка;
			Прервать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РодительСсылка.Ответственный) Тогда
			ОбъектПоНаследству = РодительСсылка;
			Прервать;
		КонецЕсли;
		
		Если РодительСсылка.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных Тогда
			
			КоличествоПодсистемОбъекта = ОбъектСсылкаКопия.Подсистемы.Количество();
			Если КоличествоПодсистемОбъекта = 0 Тогда
				ОбъектПоНаследству = КореньКонфигурацииСсылка;
			ИначеЕсли КоличествоПодсистемОбъекта = 1 Тогда
				ПодсистемаОбъекта = ОбъектСсылкаКопия.Подсистемы[0].Подсистема;
				ОбъектПоНаследству = ПолучитьОбъектПоНаследству(ПодсистемаОбъекта, КореньКонфигурацииСсылка);
			Иначе
				ОбъектПоНаследству = ПолучитьПодсистемуПоНаследству(ОбъектСсылкаКопия);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
		ОбъектСсылкаКопия = РодительСсылка;
		
	КонецЦикла;
	
	Возврат ОбъектПоНаследству;
	
КонецФункции

// Функция получает описание унаследованного ответственного объекта.
//
Функция ПолучитьОписаниеОбъекта(ОбъектСсылка) Экспорт
	
	Если ОбъектСсылка.ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация Тогда
		Возврат НСтр("ru='ответственный за конфигурацию'");
	КонецЕсли;
	
	ТаблицаТиповОбъектов = ЗаполнитьТаблицуТиповОбъектов();
	
	ТипОбъектаИмя = НайтиВТаблицеТиповОбъектов(ТаблицаТиповОбъектов, ОбъектСсылка.ТипОбъекта, "ИмяВЕдинственномЧисле");
	ТипОбъектаОписание = НРег(ПолучитьСинонимПоИмени(ТипОбъектаИмя));
	ОбъектОписание = ТипОбъектаОписание + " " + ОбъектСсылка.Наименование;
	
	Возврат ОбъектОписание;
	
КонецФункции

// Функция переводит время в секундах в формат типа: "чч:мм:сс", либо "дд:чч:мм:сс".
//
Функция ПолучитьВремяВФормате(Знач ОбщееВремя, ДобавитьДни = Ложь, Разделитель = ":") Экспорт
	
	КоличествоДней = ?(ДобавитьДни, Цел(ОбщееВремя / (24 * 3600)), 0);
	КоличествоЧасов = Цел(ОбщееВремя / 3600) - КоличествоДней * 24;
	КоличествоМинут = Цел(ОбщееВремя / 60) - КоличествоЧасов * 60 - КоличествоДней * 60 * 24;
	КоличествоСекунд = ОбщееВремя - КоличествоМинут * 60 - КоличествоЧасов * 3600 - КоличествоДней * 3600 * 24;
	
	Результат = "" + ?(ДобавитьДни, Формат(КоличествоДней, "ЧН=00; ЧГ=0") + Разделитель, "")
		+ ?(КоличествоЧасов < 10, Формат(КоличествоЧасов, "ЧЦ=2; ЧВН=; ЧН=00; ЧГ=0"), Формат(КоличествоЧасов, "ЧГ=0"))
		+ Разделитель + Формат(КоличествоМинут, "ЧЦ=2; ЧВН=; ЧН=00")
		+ Разделитель + Формат(КоличествоСекунд, "ЧЦ=2; ЧВН=; ЧН=00");
	
	Возврат Результат;
	
КонецФункции

// Передача параметра расширения не нужна
Функция ПолучитьСписокПодсистем(Версия) Экспорт
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.ТипОбъекта = &ТипОбъекта
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления";
	
	ЗапросПоиска.УстановитьПараметр("Владелец", Версия);
	ЗапросПоиска.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектов.Подсистема);
	
	ТаблицаПодсистем = ЗапросПоиска.Выполнить().Выгрузить();
	
	СписокПодсистем = Новый СписокЗначений;
	СписокПодсистем.ЗагрузитьЗначения(ТаблицаПодсистем.ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокПодсистем;
	
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения,
//  ТолькоУникальныеЗначения - булево, необязательный, если истина,
//    то в массив будут включены только те значения, которых в нем еще нет, причем единожды.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Для Каждого Значение Из МассивИсточник Цикл
		Если (НЕ ТолькоУникальныеЗначения) ИЛИ (МассивПриемник.Найти(Значение) = Неопределено) Тогда
			МассивПриемник.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает общее количество ошибок по версии после проверки.
//
Функция ПолучитьОбщееКоличествоОшибокПослеПроверки(Версия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(НайденныеОшибки.Номер) КАК КоличествоОшибок
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец = &Владелец
	|	И НайденныеОшибки.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("Владелец", Версия);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоОшибок;
	
КонецФункции

// Получает общее количество объектов конфигурации.
//
Функция ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация, СобраныСведения = Неопределено,
	Расширение = Неопределено, ВсеОбъекты = Ложь, Исключен = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СтруктураКонфигурации.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И НЕ СтруктураКонфигурации.ТипОбъекта В(&МассивТипов)
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Версия);
	
	// Не включаем следующие типы объектов в общее количество объектов.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Корень);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ВеткаМетаданных);
	Запрос.УстановитьПараметр("МассивТипов", МассивТипов);
	
	Если СобраныСведения <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СтруктураКонфигурации.СобраныСведения = &СобраныСведения";
		Запрос.УстановитьПараметр("СобраныСведения", СобраныСведения);
	КонецЕсли;
	
	Если Исключен <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СтруктураКонфигурации.Исключен = &Исключен";
		Запрос.УстановитьПараметр("Исключен", Исключен);
	КонецЕсли;
	
	Если Расширение = Неопределено Тогда
		Расширение = Справочники.Расширения.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ВсеОбъекты Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СтруктураКонфигурации.Расширение = &Расширение";
		Запрос.УстановитьПараметр("Расширение", Расширение);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.КоличествоОбъектов;
	
КонецФункции

// Получает представление конфигурации вида:
// "<Краткое имя конфигурации> <Полный номер> от <Дата публикации>".
//
Функция ПолучитьПредставлениеКонфигурацииПоследнейВерсии(Конфигурация) Экспорт
	
	ПоследняяВерсия = НайтиПоследнююВерсию(Конфигурация, Истина);
	
	Если ЗначениеЗаполнено(ПоследняяВерсия.ПолныйНомер) Тогда
		Представление = СтрШаблон("%1 %2 от %3",
			Конфигурация.Наименование,
			СокрЛП(ПоследняяВерсия.ПолныйНомер),
			Формат(ПоследняяВерсия.ДатаПубликации, "ДЛФ = Д"));
		
		Возврат Представление;
	КонецЕсли;
	
	Возврат Конфигурация.Наименование;
	
КонецФункции

// Возвращает Истину, если проверяемая база существует по указанному пути, иначе Ложь.
//
Функция ДемоБазаСуществует(Знач КаталогКонфигурации) Экспорт
	
	Если ПустаяСтрока(КаталогКонфигурации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтрЗаканчиваетсяНа(КаталогКонфигурации, "\") Тогда
		КаталогКонфигурации = КаталогКонфигурации + "\";
	КонецЕсли;
	
	Возврат ФайлСуществует(КаталогКонфигурации + "1CV8.1CD");
	
КонецФункции

// Получает количество ошибок переданной версии конфигурации по указанному ответственному.
//
Функция ПолучитьТаблицуОшибокПоОтветственному(Версия, Ответственный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Отчеты.НайденныеОшибки.ПолучитьМакет("Ошибки").НаборыДанных.Ошибки.Запрос;
	
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("МинимальнаяКритичность", 2);
	Запрос.УстановитьПараметр("НеОтбиратьПоОтветственному", Ложь);
	Запрос.УстановитьПараметр("НеОтбиратьПоОшибке", Истина);
	Запрос.УстановитьПараметр("НеОтбиратьПоСостоянию", Ложь);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Запрос.УстановитьПараметр("Ошибка", Справочники.ОбнаруживаемыеОшибки.ПустаяСсылка());
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	Запрос.УстановитьПараметр("СостояниеОсобенность", Перечисления.СостояниеОшибки.Особенность);
	Запрос.УстановитьПараметр("ЗнакКомментария", "^");
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("НеОтбиратьПоРасширению", Истина);
	Запрос.УстановитьПараметр("Расширение", Справочники.Расширения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаРегистрацииОшибкиНачало", '0001-01-01');
	Запрос.УстановитьПараметр("ДатаРегистрацииОшибкиОкончание", '0001-01-01');
	
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	ТаблицаОшибок.Свернуть("Объект", "Счетчик");
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// Добавляет запись в регистр сведений "УведомленияОтветственных" при условиях:
// - до перенаправления у ответственного нет ошибок по указанной версии конфигурации,
// - после перенаправления у ответственного появились ошибки.
//
Процедура ДобавитьУведомлениеОтветственномуОПеренаправленныхОшибках(Версия, Ответственный,
	ТаблицаОшибокДоПеренаправления) Экспорт
	
	Если ТипЗнч(Версия) <> Тип("СправочникСсылка.Версии") Тогда
		Возврат;
	КонецЕсли;
	
	Если Версия.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Не добавляем уведомление ответственному, если до изменения у него были ошибки.
	Если ТаблицаОшибокДоПеренаправления.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибокПослеПеренаправления = ПолучитьТаблицуОшибокПоОтветственному(Версия, Ответственный);
	
	// Если после перенаправления у ответственного нет ошибок, то уведомления не нужно, выходим.
	Если ТаблицаОшибокПослеПеренаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = ТаблицаОшибокПослеПеренаправления.ВыгрузитьКолонку("Объект");
	ТаблицаОшибокПослеПеренаправления.Свернуть("", "Счетчик");
	КоличествоОшибок = ТаблицаОшибокПослеПеренаправления[0].Счетчик;
	
	ДобавитьУведомлениеОтветственному(Версия.Владелец, Ответственный, КоличествоОшибок, МассивОбъектов);
	
КонецПроцедуры

Процедура ДобавитьУведомлениеОтветственному(Конфигурация, Получатель, КоличествоОшибок, МассивОбъектов)
	
	Если ПустаяСтрока(Получатель.АдресЭлектроннойПочты)
	 ИЛИ (НЕ Получатель.ФлагРассылки)
	 ИЛИ (НЕ ЗаполненыОсновныеПараметрыСистемнойЭлектроннойПочты()) Тогда
		Возврат;
	КонецЕсли;
	
	Отправитель = ПараметрыСеанса.ТекущийПользователь;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УведомленияОтветственных");
		ЭлементБлокировки.УстановитьЗначение("Конфигурация", Конфигурация);
		ЭлементБлокировки.УстановитьЗначение("Получатель", Получатель);
		ЭлементБлокировки.УстановитьЗначение("Отправитель", Отправитель);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.УведомленияОтветственных.СоздатьНаборЗаписей();
		ОтборНабораЗаписей = НаборЗаписей.Отбор;
		
		ОтборНабораЗаписей.Конфигурация.Установить(Конфигурация);
		ОтборНабораЗаписей.Получатель.Установить(Получатель);
		ОтборНабораЗаписей.Отправитель.Установить(Отправитель);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Конфигурация = Конфигурация;
			Запись.Получатель = Получатель;
			Запись.Отправитель = Отправитель;
			Запись.ОбъектыМетаданных = ВернутьХранилищеЗначения(МассивОбъектов);
			Запись.КоличествоОшибок = КоличествоОшибок;
		Иначе
			Запись = НаборЗаписей[0];
			Запись.КоличествоОшибок = Запись.КоличествоОшибок + КоличествоОшибок;
			
			МассивОбъектовРегистра = Запись.ОбъектыМетаданных.Получить();
			Если ЗначениеЗаполнено(МассивОбъектовРегистра) Тогда
				// Если в РС уже есть массив объектов, то объединим их.
				ДополнитьМассив(МассивОбъектовРегистра, МассивОбъектов, Истина);
			Иначе
				// Иначе запишем новый массив объектов.
				МассивОбъектовРегистра = МассивОбъектов;
			КонецЕсли;
			
			Запись.ОбъектыМетаданных = ВернутьХранилищеЗначения(МассивОбъектовРегистра);
		КонецЕсли;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru='Не удалось записать уведомление ответственному по причине:'");
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Сообщить(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Удаляет записи в регистре сведений "УведомленияОтветственных".
//
Процедура УдалитьЗаписиВРегистреУведомленияОтветственных(МассивПолучателей) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УведомленияОтветственных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Для Каждого Получатель Из МассивПолучателей Цикл
			Набор = РегистрыСведений.УведомленияОтветственных.СоздатьНаборЗаписей();
			Набор.Отбор.Получатель.Установить(Получатель);
			Набор.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Проверяет заполнение основных параметров системной электронной почты.
//
Функция ЗаполненыОсновныеПараметрыСистемнойЭлектроннойПочты() Экспорт
	
	Возврат ЗначениеЗаполнено(Константы.АдресЭлектроннойПочты.Получить())
		  И ЗначениеЗаполнено(Константы.СерверИсходящейПочтыSMTP.Получить())
		  И ЗначениеЗаполнено(Константы.ПортSMTP.Получить());
	
КонецФункции

Функция ПолучитьВнутренниеТребования(ВключаяНовыеТребования = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Ссылка В ИЕРАРХИИ(&СистемаСтандартов)
	|	И Требования.СсылкаНаСтандарт = &ПустаяСтрока
	|	И НЕ Требования.ЭтоГруппа
	|	И НЕ Требования.ПометкаУдаления
	|	%1";
	
	УсловиеПоНовым = "";
	Если НЕ ВключаяНовыеТребования Тогда
		УсловиеПоНовым = "И Требования.Статус <> &Статус";
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыТребований.Новое);
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, УсловиеПоНовым);
	
	Запрос.УстановитьПараметр("СистемаСтандартов", Справочники.Требования.СистемаСтандартов);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ТаблицаСтандартов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСтандартов.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает версию платформы из строки запуска платформы.
//
Функция ПолучитьВерсиюПлатформыДляЗапуска(СтрокаЗапускаПлатформы) Экспорт
	
	// Получим номер версии платформы из пути к файлу запуска платформы.
	СтрокаЗапуска = СтрЗаменить(СтрокаЗапускаПлатформы, "/", "\");
	МассивПути = СтрРазделить(СтрокаЗапуска, "\", Ложь);
	
	ВерсияПлатформы = "";
	Для Каждого ЭлементПути Из МассивПути Цикл
		Если СтрЧислоВхождений(ЭлементПути, ".") >= 2 Тогда
			ВерсияПлатформы = ЭлементПути;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВерсияПлатформы;
	
КонецФункции

Функция ПроверитьПлатформуДляПроверкиКонфигурации(СтрокаЗапускаПлатформы) Экспорт
	
	СтрокаЗапускаПлатформы = СокрЛП(СтрокаЗапускаПлатформы);
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		Возврат НСтр("ru='Не указан файл запуска платформы.'");
	КонецЕсли;
	
	Если НЕ ФайлСуществует(СтрокаЗапускаПлатформы) Тогда
		Возврат СтрШаблон(НСтр("ru='Не удалось найти файл запуска платформы по пути: %1'"), СтрокаЗапускаПлатформы);
	КонецЕсли;
	
	Если НЕ СтрЗаканчиваетсяНа(НРег(СтрокаЗапускаПлатформы), "1cv8.exe") Тогда
		Возврат НСтр("ru='Для запуска платформы рекомендуется указывать приложение ""1cv8.exe"".'");
	КонецЕсли;
	
	// Получим номер версии платформы из пути к файлу запуска платформы.
	ВерсияПлатформы = ПолучитьВерсиюПлатформыДляЗапуска(СтрокаЗапускаПлатформы);
	
	Если ПустаяСтрока(ВерсияПлатформы) Тогда
		Возврат НСтр("ru='Не удалось определить номер версии платформы по пути запуска платформы.
			|Текущая версия программы предназначена для проверки конфигураций на платформе не ниже 8.3.6.'");
	КонецЕсли;
	
	// Сравниваем версию платформы с 8.3.6.
	МассивВерсий = СтрРазделить(ВерсияПлатформы, ".", Ложь);
	Если МассивВерсий.Количество() = 3 Тогда
		ВерсияПлатформыНиже836 = РелизыПоПорядку(ВерсияПлатформы, "8.3.6");
	ИначеЕсли МассивВерсий.Количество() = 4 Тогда
		ВерсияПлатформыНиже836 = РелизыПоПорядку(ВерсияПлатформы, "8.3.6.0");
	Иначе
		Возврат НСтр("ru='Не удалось определить номер версии платформы по пути запуска платформы.
			|Текущая версия программы предназначена для проверки конфигураций на платформе не ниже 8.3.6.'");
	КонецЕсли;
	
	Если ВерсияПлатформыНиже836 Тогда
		Возврат СтрШаблон(НСтр("ru='Для проверки конфигурации указана версия платформы %1.
			|Текущая версия программы предназначена для проверки конфигураций на платформе не ниже 8.3.6.'"),
			ВерсияПлатформы);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает хранилище значения с помещенным в него переданным значением.
//
// Параметры:
//   Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//   ХранилищеЗначения.
//
Функция ВернутьХранилищеЗначения(Значение) Экспорт
	
	Возврат Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
	
КонецФункции

// Возвращает истину, если массив содержит переданный элемент, иначе ложь.
//
Функция МассивСодержитЭлемент(Массив, ЭлементМассива) Экспорт
	
	Возврат Массив.Найти(ЭлементМассива) <> Неопределено;
	
КонецФункции

// Возвращает структуру, содержащую список правил и ошибок. Данные списки формируются либо на основании
// списка требований, либо на основании КэшаУстановленныхТребований,
// либо загружаются из РС ТребованияККонфигурации на основании параметров (ВариантПроверки, Конфигурация).
//
// Параметры:
//   СписокТребований - СписокЗначений или Массив - список требований.
//   КэшУстановленныхТребований - ДеревоЗначений - на 1 уровне коллекция требований, на 2-ом подчиненные ошибки.
//   Параметры - Структура - состоит из ключей:
//        Конфигурации - СправочникСсылка.Конфигурация
//        ВариантПроверки - СправочникСсылка.ВариантыПроверки
//
// Возвращаемое значение:
//   Структура:
//      СписокПравил - список правил, входящих в переданные требования.
//      СписокОшибок - список ошибок, входящих в переданные требования.
//      ТаблицаТребований - таблица, с требованиями и ошибками проверки.
//
Функция ПолучитьСоставПроверкиПоСпискуТребований(СписокТребований, КэшУстановленныхТребований = Неопределено,
	Параметры = Неопределено) Экспорт
	
	ТаблицаТребований = Новый ТаблицаЗначений;
	ТаблицаТребований.Колонки.Добавить("Требование");
	ТаблицаТребований.Колонки.Добавить("Ошибка");
	
	СписокПравил = Новый СписокЗначений;
	СписокОшибок = Новый СписокЗначений;
	
	// 1. Передан КэшУстановленныхФлажков, который содержит перечень требований и ошибок.
	Если КэшУстановленныхТребований <> Неопределено Тогда
		
		МассивОшибок = Новый Массив;
		
		Для Каждого СтрокаТребования Из КэшУстановленныхТребований.Строки Цикл
			
			Если СписокТребований.НайтиПоЗначению(СтрокаТребования.Ссылка) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТекущихОшибок = СтрокаТребования.Строки.ВыгрузитьКолонку("Ссылка");
			Для Каждого ТекущаяОшибка Из МассивТекущихОшибок Цикл
				Если МассивОшибок.Найти(ТекущаяОшибка) = Неопределено Тогда
					МассивОшибок.Добавить(ТекущаяОшибка);
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТребований.Добавить();
				НоваяСтрока.Требование = СтрокаТребования.Ссылка;
				НоваяСтрока.Ошибка = ТекущаяОшибка.Ссылка;
				
			КонецЦикла;
		КонецЦикла;
		
		СписокОшибок.ЗагрузитьЗначения(МассивОшибок);
		
	// 2. Для проверки выбраны все требования.
	ИначеЕсли СписокТребований <> Неопределено И Параметры = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТребованияРеализацияТребования.Ссылка КАК Требование,
		|	ПравилаОбнаруживаемыеОшибки.Ошибка КАК Ошибка
		|ИЗ
		|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Правила.ОбнаруживаемыеОшибки КАК ПравилаОбнаруживаемыеОшибки
		|		ПО ТребованияРеализацияТребования.ПравилоПроверки = ПравилаОбнаруживаемыеОшибки.Ссылка
		|ГДЕ
		|	ТребованияРеализацияТребования.Ссылка В (&СписокТребований)
		|	И ПравилаОбнаруживаемыеОшибки.Ссылка.ИспользуетсяПриПроверке
		|	И НЕ ПравилаОбнаруживаемыеОшибки.Ссылка.ПолуавтоматическаяПроверка
		|	И НЕ ПравилаОбнаруживаемыеОшибки.Ссылка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("СписокТребований", СписокТребований);
		
		ТаблицаТребований = Запрос.Выполнить().Выгрузить();
		
		ТаблицаОшибок = ТаблицаТребований.Скопировать(, "Ошибка");
		ТаблицаОшибок.Свернуть("Ошибка");
		МассивОшибок = ТаблицаТребований.ВыгрузитьКолонку("Ошибка");
		СписокОшибок.ЗагрузитьЗначения(МассивОшибок);
		
	// 3. Получение списка ошибок из РС "ТребованияККонфигурации".
	ИначеЕсли Параметры <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТребованияККонфигурации.Требование КАК Требование,
		|	ТребованияККонфигурации.Ошибка КАК Ошибка
		|ИЗ
		|	РегистрСведений.ТребованияККонфигурации КАК ТребованияККонфигурации
		|ГДЕ
		|	ТребованияККонфигурации.Конфигурация = &Конфигурация
		|	И ТребованияККонфигурации.ВариантПроверки = &ВариантПроверки
		|	" + ?(СписокТребований = Неопределено, "", "И ТребованияККонфигурации.Требование В (&СписокТребований)");
		
		Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
		Запрос.УстановитьПараметр("ВариантПроверки", Параметры.ВариантПроверки);
		Запрос.УстановитьПараметр("СписокТребований", СписокТребований);
		
		ТаблицаТребований = Запрос.Выполнить().Выгрузить();
		
		ТаблицаОшибок = ТаблицаТребований.Скопировать(, "Ошибка");
		ТаблицаОшибок.Свернуть("Ошибка");
		МассивПравил = ТаблицаОшибок.ВыгрузитьКолонку("Ошибка");
		СписокОшибок.ЗагрузитьЗначения(МассивПравил);
		
	КонецЕсли;
	
	МассивПравил = ПолучитьПравилаПоСпискуТребований(СписокТребований);
	СписокПравил.ЗагрузитьЗначения(МассивПравил);
	
	Результат = Новый Структура;
	Результат.Вставить("СписокПравил", СписокПравил);
	Результат.Вставить("СписокОшибок", СписокОшибок);
	Результат.Вставить("ТаблицаТребований", ТаблицаТребований);
	
	Возврат Результат;
	
КонецФункции

// Формирует массив правил по списку требований.
// Параметры:
//   - Требования - СписокЗначений или Массив.
//
Функция ПолучитьПравилаПоСпискуТребований(Требования) Экспорт
	
	ЗапросПоПравилам = Новый Запрос;
	ЗапросПоПравилам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТребованияРеализацияТребования.ПравилоПроверки КАК Правило
	|ИЗ
	|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
	|ГДЕ
	|	ТребованияРеализацияТребования.Ссылка В(&Требования)
	|	И НЕ ТребованияРеализацияТребования.ПравилоПроверки.РучнаяПроверка
	|	И НЕ ТребованияРеализацияТребования.ПравилоПроверки.ПолуавтоматическаяПроверка
	|	И НЕ ТребованияРеализацияТребования.ПравилоПроверки.ПометкаУдаления
	|	И ТребованияРеализацияТребования.ПравилоПроверки.ИспользуетсяПриПроверке";
	
	ЗапросПоПравилам.УстановитьПараметр("Требования", Требования);
	Возврат ЗапросПоПравилам.Выполнить().Выгрузить().ВыгрузитьКолонку("Правило");
	
КонецФункции

// Изменяет состав записей РС "ТребованияККонфигурации" при записи правила или требования.
//
Процедура ОбновитьСоставТребованийККонфигурации(МассивТребований, ИсходныйМассивОшибок, ТекущийМассивОшибок) Экспорт
	
	МассивыРавны = Истина;
	Если ИсходныйМассивОшибок.Количество() <> ТекущийМассивОшибок.Количество() Тогда
		МассивыРавны = Ложь;
	КонецЕсли;
	
	Если МассивыРавны Тогда
		
		Для Каждого ИсходнаяОшибка Из ИсходныйМассивОшибок Цикл
			Если ТекущийМассивОшибок.Найти(ИсходнаяОшибка) = Неопределено Тогда
				МассивыРавны = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивыРавны Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивУдаляемыхОшибок = Новый Массив;
	Для Каждого ИсходнаяОшибка Из ИсходныйМассивОшибок Цикл
		Если ТекущийМассивОшибок.Найти(ИсходнаяОшибка) = Неопределено Тогда
			МассивУдаляемыхОшибок.Добавить(ИсходнаяОшибка);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхОшибок = Новый Массив;
	Для Каждого ТекущаяОшибка Из ТекущийМассивОшибок Цикл
		Если ИсходныйМассивОшибок.Найти(ТекущаяОшибка) = Неопределено Тогда
			МассивДобавляемыхОшибок.Добавить(ТекущаяОшибка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Требование Из МассивТребований Цикл
		
		НаборЗаписей = РегистрыСведений.ТребованияККонфигурации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Требование.Установить(Требование);
		НаборЗаписей.Прочитать();
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		ТаблицаЗаписей.Свернуть("Конфигурация, ВариантПроверки, Требование");
		
		Для Каждого СтрокаТаблицы Из ТаблицаЗаписей Цикл
			Для Каждого ДобавляемаяОшибка Из МассивДобавляемыхОшибок Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
				НоваяЗапись.Ошибка = ДобавляемаяОшибка;
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Для Каждого УдаляемаяОшибка Из МассивУдаляемыхОшибок Цикл
			НаборЗаписей = РегистрыСведений.ТребованияККонфигурации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Требование.Установить(Требование);
			НаборЗаписей.Отбор.Ошибка.Установить(УдаляемаяОшибка);
			НаборЗаписей.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение перечисления на основании имени перечисления и синонима искомого значения.
//
Функция ПолучитьЗначениеПеречисленияПоСинониму(ИмяПеречисления, ЗначениеСинонимаТекст) Экспорт
	
	ЭлементПеречисления = Неопределено;
	Для каждого Элемент Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Элемент.Синоним = ЗначениеСинонимаТекст Тогда
			ЭлементПеречисления = Перечисления[ИмяПеречисления][Элемент.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭлементПеречисления;
	
КонецФункции

#КонецОбласти

