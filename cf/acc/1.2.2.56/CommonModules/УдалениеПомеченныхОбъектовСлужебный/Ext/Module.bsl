#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Точка входа регламентного задания.
//
Процедура УдалениеПомеченныхПоРасписанию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьПомеченныеОбъектыИзРегламентногоЗадания();
	
КонецПроцедуры

#Область ИнтерактивноеУдалениеПомеченных

// Удаляет помеченные объекты, используется при интерактивном удалении в фоновом задании.
//
// Параметры:
//   ПараметрыВыполнения - Структура - Параметры, необходимые для удаления.
//   АдресХранилища - Строка - Адрес временного хранилища.
//
Процедура УдалитьПомеченныеОбъектыИнтерактивно(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	УдалитьПомеченныеОбъекты(ПараметрыВыполнения);
	ПоместитьВоВременноеХранилище(ИзвлечьРезультат(ПараметрыВыполнения), АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеПомеченныхИзРегламентногоЗадания

// Удаляет помеченные объекты из регламентного задания.
//
Процедура УдалитьПомеченныеОбъектыИзРегламентногоЗадания()
	
	ПараметрыВыполнения = Новый Структура;
	УдалитьПомеченныеОбъекты(ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияИЗапуск

// Основная механика удаления помеченных объектов.
//
Процедура УдалитьПомеченныеОбъекты(ПараметрыВыполнения)
	
	Если НЕ ВыбранаРольПолныеПрава() Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для выполнения операции.'");
	КонецЕсли;
	
	ИнициализироватьПараметры(ПараметрыВыполнения);
	
	Если ПараметрыВыполнения.ИскатьПомеченные Тогда
		ПолучитьПомеченныеНаУдаление(ПараметрыВыполнения);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.УдалятьПомеченные Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.Интерактивное
		И ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Количество() = 0 Тогда
		Возврат; // Не удалять технологические объекты при интерактивном запуске если нет пользовательских объектов.
	КонецЕсли;
	
	Если ПараметрыВыполнения.Монопольно Тогда
		УдалитьПомеченныеОбъектыМонопольно(ПараметрыВыполнения);
	Иначе // Не монопольно.
		УдалитьПомеченныеОбъектыКонкурентно(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонкурентноеУдалениеПомеченных

// Основная механика.
//
Процедура УдалитьПомеченныеОбъектыКонкурентно(ПараметрыВыполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаление технологических объектов (которые создавались и помечались на удаление без участия пользователя).
	Если ПараметрыВыполнения.ТехнологическиеОбъекты <> Неопределено Тогда
		КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "ТехнологическиеОбъекты");
		Для Каждого Ссылка Из ПараметрыВыполнения.ТехнологическиеОбъекты Цикл
			УдалитьСсылку(ПараметрыВыполнения, Ссылка); // Для технологических объектов результат не выводится.
			КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ТехнологическиеОбъекты");
		КонецЦикла;
	КонецЕсли;
	
	// Удаление помеченных на удаление.
	КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "ПользовательскиеОбъекты");
	Для Каждого Ссылка Из ПараметрыВыполнения.ПользовательскиеОбъекты Цикл
		Результат = УдалитьСсылку(ПараметрыВыполнения, Ссылка);
		ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, "ПользовательскиеОбъекты");
		КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПользовательскиеОбъекты");
	КонецЦикла;
	
	// Удаление цепочек (линейно связанных объектов).
	КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "ПовторноУдаляемые");
	Пока ПараметрыВыполнения.ПовторноУдаляемые.Количество() > 0 Цикл
		Ссылка = ПараметрыВыполнения.ПовторноУдаляемые[0];
		ПараметрыВыполнения.ПовторноУдаляемые.Удалить(0);
		
		Результат = УдалитьСсылку(ПараметрыВыполнения, Ссылка);
		
		ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, "ПовторноУдаляемые");
		КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПовторноУдаляемые");
	КонецЦикла;
	
	// Удаление циклов (кольцевых связей объектов).
	УдалитьОставшиесяОбъектыВОднойТранзакции(ПараметрыВыполнения);
	
КонецПроцедуры

// Удаление одиночного объекта с контролем результата и откатом транзакции в случае неудачи.
//
Функция УдалитьСсылку(ПараметрыВыполнения, Ссылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", Неопределено);
	Результат.Вставить("ПрепятствующиеУдалению", Неопределено);
	Результат.Вставить("ВложенныеИПодчиненныеОбъекты", Новый Массив);
	Результат.Вставить("Количество", 0);
	
	Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
	
	НачатьТранзакцию();
	Попытка
		ПопробоватьУдалитьСсылку(ПараметрыВыполнения, Ссылка, Информация, Результат);
	Исключение
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Если Результат.Успех Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписатьПредупреждение(Ссылка, Результат.ИнформацияОбОшибке);
	КонецЕсли;
	
	Если ТипЗнч(Результат.ПрепятствующиеУдалению) = Тип("ТаблицаЗначений") Тогда
		Результат.ПрепятствующиеУдалению.Колонки[0].Имя = "УдаляемыйСсылка";
		Результат.ПрепятствующиеУдалению.Колонки[1].Имя = "ОбнаруженныйСсылка";
		Результат.ПрепятствующиеУдалению.Колонки[2].Имя = "ОбнаруженныйМетаданные";
		Для Каждого ОбнаруженныйСсылка Из Результат.ВложенныеИПодчиненныеОбъекты Цикл
			СтрокаТаблицы = Результат.ПрепятствующиеУдалению.Добавить();
			СтрокаТаблицы.УдаляемыйСсылка        = Ссылка;
			СтрокаТаблицы.ОбнаруженныйСсылка     = ОбнаруженныйСсылка;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Механика удаления объекта и поиска ссылок.
//
Процедура ПопробоватьУдалитьСсылку(ПараметрыВыполнения, Ссылка, Информация, Результат)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Информация.ПолноеИмя);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	Блокировка.Заблокировать();
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Результат.Успех = Истина; // Объект уже удален.
		Возврат;
	КонецЕсли;
	Если Объект.ПометкаУдаления <> Истина Тогда
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru='Объект не помечен на удаление.'");
		Возврат;
	КонецЕсли;
	
	НайтиВложенныеИПодчиненныеОбъекты(ПараметрыВыполнения, Ссылка, Информация, Результат);
	
	Объект.Удалить();
	
	НайтиПрепятствующиеУдалению(ПараметрыВыполнения, Ссылка, Информация, Результат);
	
	Если Результат.Количество = 0 Тогда
		Результат.Успех = Истина;
	Иначе
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru='Объект используется в других объектах программы.'");
	КонецЕсли;
	
КонецПроцедуры

// Поиск ссылок вложенных и подчиненных (иерархия и связь по владельцу). Выполняется до удаления.
//
Процедура НайтиВложенныеИПодчиненныеОбъекты(ПараметрыВыполнения, Ссылка, Информация, Результат)
	
	Если Информация.Иерархический Тогда
		Запрос = Новый Запрос(Информация.ТекстЗапросаПоИерархии);
		Запрос.УстановитьПараметр("УдаляемыйСсылка", Ссылка);
		ВложенныеОбъекты = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из ВложенныеОбъекты Цикл
			Результат.ВложенныеИПодчиненныеОбъекты.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
		Результат.Количество = Результат.Количество + ВложенныеОбъекты.Количество();
	КонецЕсли;
	
	Если Информация.ЕстьПодчиненные Тогда
		Запрос = Новый Запрос(Информация.ТекстЗапросаПоПодчиненным);
		Запрос.УстановитьПараметр("УдаляемыйСсылка", Ссылка);
		ПодчиненныеОбъекты = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из ПодчиненныеОбъекты Цикл
			Результат.ВложенныеИПодчиненныеОбъекты.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
		Результат.Количество = Результат.Количество + ПодчиненныеОбъекты.Количество();
	КонецЕсли;
	
КонецПроцедуры

// Поиск ссылок путем сканирования всех таблиц. Выполняется после удаления.
//
Процедура НайтиПрепятствующиеУдалению(ПараметрыВыполнения, Ссылка, Информация, Результат)
	
	ПоискСсылок = Новый Массив;
	ПоискСсылок.Добавить(Ссылка);
	
	ПрепятствующиеУдалению = НайтиПоСсылкам(ПоискСсылок);
	
	// Пропуск ссылок из границ последовательности.
	Количество = ПрепятствующиеУдалению.Количество();
	ИмяКолонки = ПрепятствующиеУдалению.Колонки[1].Имя;
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		СтрокаТаблицы = ПрепятствующиеУдалению[ОбратныйИндекс];
		ПрепятствующийСсылка = СтрокаТаблицы[ИмяКолонки];
		Если ПрепятствующийСсылка = Ссылка
			ИЛИ ДокументУжеУдален(ПараметрыВыполнения, ПрепятствующийСсылка) Тогда
			ПрепятствующиеУдалению.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	// Регистрация результата.
	Результат.ПрепятствующиеУдалению = ПрепятствующиеУдалению;
	Результат.Количество = Результат.Количество + Результат.ПрепятствующиеУдалению.Количество();
	
КонецПроцедуры

// Поиск ссылки документа в базе данных.
//
Функция ДокументУжеУдален(ПараметрыВыполнения, Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Ложь; // Не документ.
	КонецЕсли;
	
	Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
	Если Информация.Вид <> "ДОКУМЕНТ" Тогда
		Возврат Ложь; // Не документ.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	" + Информация.ПолноеИмя + "
	|ГДЕ
	|	Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Удаление циклов (кольцевых связей объектов).
//
Процедура УдалитьОставшиесяОбъектыВОднойТранзакции(ПараметрыВыполнения)
	
	Перем Ссылка;
	
	// 1. Объекты, которые невозможно удалить.
	//    Получаются путем определения неразрешимых связей.
	ОбъектыКоторыеНевозможноУдалить = Новый Массив;
	ВложенныеНеразрешимыеСвязи = Новый Массив;
	
	// 1.1. Первичным критерием для определения неразрешимых связей
	//      является тот факт, что объект, препятствующий удалению, не отмечен для удаления.
	Для Каждого СтрокаТаблицы Из ПараметрыВыполнения.ПрепятствующиеУдалению Цикл
		Если ПараметрыВыполнения.НеУдаленные.Найти(СтрокаТаблицы.ОбнаруженныйСсылка) = Неопределено
			И ОбъектыКоторыеНевозможноУдалить.Найти(СтрокаТаблицы.УдаляемыйСсылка) = Неопределено Тогда
			ОбъектыКоторыеНевозможноУдалить.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", СтрокаТаблицы.УдаляемыйСсылка));
			ВложенныеНеразрешимыеСвязи.Добавить(Найденные);
		КонецЕсли;
	КонецЦикла;
	
	// 1.2. Далее при помощи массива ВложенныеНеразрешимыеСвязи
	//      получаются неразрешимые подчиненные - "связи связей", "связи связей связей" и т.д...
	Индекс = 0;
	Пока Индекс < ВложенныеНеразрешимыеСвязи.Количество() Цикл
		Найденные = ВложенныеНеразрешимыеСвязи[Индекс];
		Индекс = Индекс + 1;
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			Если ОбъектыКоторыеНевозможноУдалить.Найти(СтрокаТаблицы.УдаляемыйСсылка) = Неопределено Тогда
				ОбъектыКоторыеНевозможноУдалить.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
				Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", СтрокаТаблицы.УдаляемыйСсылка));
				ВложенныеНеразрешимыеСвязи.Добавить(Найденные);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// 2. Объекты, которые можно попробовать удалить в одной транзакции.
	//    = Массив удаляемых - Массив объектов, которые невозможно удалить.
	МассивСсылок = Новый Массив;
	Для Каждого Ссылка Из ПараметрыВыполнения.НеУдаленные Цикл
		Если ОбъектыКоторыеНевозможноУдалить.Найти(Ссылка) = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Количество = МассивСсылок.Количество();
	Если Количество = 0 Тогда
		Возврат; // Нет объектов для удаления.
	КонецЕсли;
	
	// 3. Включение всех объектов в одну транзакцию и попытка удалить.
	Успех = Ложь;
	НачатьТранзакцию();
	Попытка
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Ссылка = МассивСсылок[ОбратныйИндекс];
			
			Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Информация.ПолноеИмя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда // Объект уже удален.
				Продолжить;
			КонецЕсли;
			Если Объект.ПометкаУдаления <> Истина Тогда
				МассивСсылок.Удалить(ОбратныйИндекс); // Объект уже не помечен на удаление.
				Продолжить;
			КонецЕсли;
			
			Объект.Удалить();
		КонецЦикла;
		
		Ссылка = Неопределено;
		
		Если МассивСсылок.Количество() > 0 Тогда
			ПрепятствующиеУдалению = НайтиПоСсылкам(МассивСсылок);
			
			ИмяКолонки = ПрепятствующиеУдалению.Колонки[1].Имя;
			Для Каждого Ссылка Из МассивСсылок Цикл
				ПоискНеПрепятствующих = Новый Структура(ИмяКолонки, Ссылка);
				НеПрепятствующие = ПрепятствующиеУдалению.НайтиСтроки(ПоискНеПрепятствующих);
				Для Каждого СтрокаТаблицы Из НеПрепятствующие Цикл
					ПрепятствующиеУдалению.Удалить(СтрокаТаблицы);
				КонецЦикла;
			КонецЦикла;
			
			Если ПрепятствующиеУдалению.Количество() = 0 Тогда
				Успех = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ЗаписатьПредупреждение(Ссылка, ИнформацияОбОшибке());
	КонецПопытки;
	
	// 4. Регистрация результата (если успех).
	Если Успех Тогда
		ЗафиксироватьТранзакцию();
		
		Для Каждого Ссылка Из МассивСсылок Цикл
			// Регистрация ссылки в коллекции удаленных.
			Если ПараметрыВыполнения.Удаленные.Найти(Ссылка) = Неопределено Тогда
				ПараметрыВыполнения.Удаленные.Добавить(Ссылка);
			КонецЕсли;
			
			// Удаление ссылки из коллекции не удаленных.
			Индекс = ПараметрыВыполнения.НеУдаленные.Найти(Ссылка);
			Если Индекс <> Неопределено Тогда
				ПараметрыВыполнения.НеУдаленные.Удалить(Индекс);
			КонецЕсли;
			
			// Очистка информации о связях "от" удаленных объектов.
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("УдаляемыйСсылка", Ссылка));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				ПараметрыВыполнения.ПрепятствующиеУдалению.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
			// Очистка информации о связях "к" удаленным объектам.
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", Ссылка));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				ПараметрыВыполнения.ПрепятствующиеУдалению.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Регистрация результата удаления и заполнение коллекции ПовторноУдаляемые.
//
Процедура ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, ИмяКоллекции)
	
	Если Результат.Успех Тогда
		// Регистрация ссылки в коллекции удаленных.
		ПараметрыВыполнения.Удаленные.Добавить(Ссылка);
		
		// Исключение удаленного объекта из причин неудаления других объектов. Поиск.
		НеактуальныеПричины = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", Ссылка));
		Для Каждого Причина Из НеактуальныеПричины Цикл
			// Удаление причины неудаления другого объекта.
			УдаляемыйСсылка = Причина.УдаляемыйСсылка;
			ПараметрыВыполнения.ПрепятствующиеУдалению.Удалить(Причина);
			// Поиск других причин неудаления другого объекта.
			Если ПараметрыВыполнения.ПрепятствующиеУдалению.Найти(УдаляемыйСсылка, "УдаляемыйСсылка") = Неопределено Тогда
				// Устранены все причины неудаления другого объекта.
				// Регистрация другого объекта для повторного удаления.
				ПараметрыВыполнения.ПовторноУдаляемые.Добавить(УдаляемыйСсылка);
				Если ИмяКоллекции = "ПовторноУдаляемые" И ПараметрыВыполнения.Интерактивное Тогда
					ПараметрыВыполнения.Всего = ПараметрыВыполнения.Всего + 1;
				КонецЕсли;
				// Очистка записи о другом объекте из коллекции "НеУдаленные".
				Индекс = ПараметрыВыполнения.НеУдаленные.Найти(УдаляемыйСсылка);
				Если Индекс <> Неопределено Тогда
					ПараметрыВыполнения.НеУдаленные.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // Не успешно.
		
		ПараметрыВыполнения.НеУдаленные.Добавить(Ссылка);
		
		Если ТипЗнч(Результат.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке")
			ИЛИ Результат.ПрепятствующиеУдалению = Неопределено Тогда // Текст ошибки
			Если ТипЗнч(Результат.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
				ТекстОшибки = КраткоеПредставлениеОшибки(Результат.ИнформацияОбОшибке);
			Иначе
				ТекстОшибки = Результат.ИнформацияОбОшибке;
			КонецЕсли;
			Причина = ПараметрыВыполнения.ПрепятствующиеУдалению.Добавить();
			Причина.УдаляемыйСсылка    = Ссылка;
			Причина.УдаляемыйТип       = ТипЗнч(Причина.УдаляемыйСсылка);
			Причина.ОбнаруженныйСсылка = ТекстОшибки;
			Причина.ОбнаруженныйТип    = Тип("Строка");
			СформироватьИнформациюОТипах(ПараметрыВыполнения, Причина.УдаляемыйТип);
		Иначе // Регистрация связей (причин не удаления) для вывода пользователю.
			Для Каждого СтрокаТаблицы Из Результат.ПрепятствующиеУдалению Цикл
				ЗаписатьПричинуВРезультат(ПараметрыВыполнения, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли; // Результат.Успех.
	
КонецПроцедуры

#КонецОбласти

#Область МонопольноеУдалениеПомеченных

// Формирует соответствие для удаления объектов.
//
Функция ПолучитьОбщийСписокИсключенийПоискаСсылок()
	
	ИсключенияПоискаСсылок = Новый Соответствие;
	
	Возврат ИсключенияПоискаСсылок;
	
КонецФункции

// Основная механика удаления помеченных объектов.
//
Процедура УдалитьПомеченныеОбъектыМонопольно(ПараметрыВыполнения)
	
	Если Не ПараметрыВыполнения.Свойство("ИсключенияПоискаСсылок") Тогда
		ПараметрыВыполнения.Вставить("ИсключенияПоискаСсылок", ПолучитьОбщийСписокИсключенийПоискаСсылок());
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("ИсключающиеПравила") Тогда
		ПараметрыВыполнения.Вставить("ИсключающиеПравила", Новый Соответствие); // Кэш правил исключений поиска.
	КонецЕсли;
	
	УдаляемыеОбъекты = ПараметрыВыполнения.ВсеПомеченныеНаУдаление;
	
	Пока УдаляемыеОбъекты.Количество() > 0 Цикл
		
		КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "МонопольноеУдаление");
		
		ПрепятствующиеУдалению = Новый ТаблицаЗначений;
		
		// Попытка удалить с контролем ссылочной целостности.
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			УдалитьОбъекты(УдаляемыеОбъекты, Истина, ПрепятствующиеУдалению);
			УстановитьПривилегированныйРежим(Ложь);
		Исключение
			ЗаписатьПредупреждение(Неопределено, ИнформацияОбОшибке());
		КонецПопытки;
		
		// Назначение имен колонок для таблицы конфликтов, возникших при удалении.
		ПрепятствующиеУдалению.Колонки[0].Имя = "УдаляемыйСсылка";
		ПрепятствующиеУдалению.Колонки[1].Имя = "ОбнаруженныйСсылка";
		ПрепятствующиеУдалению.Колонки[2].Имя = "ОбнаруженныйМетаданные";
		
		ВсеСвязиВИсключениях = Истина;
		
		// Анализ причин не удаления (мест использования помеченных на удаление).
		КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "ПрепятствующиеУдалению", ПрепятствующиеУдалению);
		Для Каждого СтрокаТаблицы Из ПрепятствующиеУдалению Цикл
			КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПрепятствующиеУдалению");
			
			// Проверка исключающих правил.
			Если СвязьВИсключенияхПоискаСсылок(ПараметрыВыполнения, СтрокаТаблицы) Тогда
				Продолжить; // Связь не препятствует удалению.
			КонецЕсли;
			
			// Невозможно удалить объект (мешает обнаруженная ссылка или запись регистра).
			ВсеСвязиВИсключениях = Ложь;
			
			// Сокращение удаляемых объектов.
			Индекс = УдаляемыеОбъекты.Найти(СтрокаТаблицы.УдаляемыйСсылка);
			Если Индекс <> Неопределено Тогда
				УдаляемыеОбъекты.Удалить(Индекс);
			КонецЕсли;
			
			// Регистрация связи для вывода пользователю.
			ЗаписатьПричинуВРезультат(ПараметрыВыполнения, СтрокаТаблицы);
		КонецЦикла;
		
		// Удаление без контроля, если все связи в исключениях поиска ссылок.
		Если ВсеСвязиВИсключениях Тогда
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				УдалитьОбъекты(УдаляемыеОбъекты, Ложь);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				ЗаписатьПредупреждение(Неопределено, ИнформацияОбОшибке());
			КонецПопытки;
			Прервать; // Выход из цикла.
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыполнения.Вставить("Удаленные", УдаляемыеОбъекты);
	ПараметрыВыполнения.Удалить("ИсключенияПоискаСсылок");
	ПараметрыВыполнения.Удалить("ИсключающиеПравила");
	
КонецПроцедуры

// Проверяет, что связь в исключениях.
//
Функция СвязьВИсключенияхПоискаСсылок(ПараметрыВыполнения, СтрокаТаблицы)
	
	// Определение исключающего правила для объекта метаданных, препятствующего удалению:
	// Для регистров (т.н. "необъектных таблиц") - массива реквизитов для поиска в записи регистра.
	// Для ссылочных типов (т.н. "объектных таблиц") - готового запроса для поиска в реквизитах.
	Правило = ПараметрыВыполнения.ИсключающиеПравила[СтрокаТаблицы.ОбнаруженныйМетаданные]; // Кэш.
	Если Правило = Неопределено Тогда
		Правило = СформироватьИсключающееПравило(ПараметрыВыполнения, СтрокаТаблицы);
		ПараметрыВыполнения.ИсключающиеПравила.Вставить(СтрокаТаблицы.ОбнаруженныйМетаданные, Правило);
	КонецЕсли;
	
	// Проверка исключающего правила.
	Если Правило = "*" Тогда
		Возврат Истина; // Можно удалять (обнаруженный объект метаданных не мешает).
	ИначеЕсли ТипЗнч(Правило) = Тип("Массив") Тогда // Имена измерений регистра.
		Для Каждого ИмяРеквизита Из Правило Цикл
			Если СтрокаТаблицы.ОбнаруженныйСсылка[ИмяРеквизита] = СтрокаТаблицы.УдаляемыйСсылка Тогда
				Возврат Истина; // Можно удалять (обнаруженная запись регистра не мешает).
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Правило) = Тип("Запрос") Тогда // Запрос к ссылочному объекту.
		Правило.УстановитьПараметр("УдаляемыйСсылка", СтрокаТаблицы.УдаляемыйСсылка);
		Правило.УстановитьПараметр("ОбнаруженныйСсылка", СтрокаТаблицы.ОбнаруженныйСсылка);
		Если НЕ Правило.Выполнить().Пустой() Тогда
			Возврат Истина; // Можно удалять (обнаруженная ссылка не мешает).
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Компонует правило оптимально для проверки.
//
Функция СформироватьИсключающееПравило(ПараметрыВыполнения, СтрокаТаблицы)
	
	ИсключениеПоиска = ПараметрыВыполнения.ИсключенияПоискаСсылок[СтрокаТаблицы.ОбнаруженныйМетаданные];
	Если ИсключениеПоиска = "*" Тогда
		Возврат "*"; // Можно удалять (обнаруженный объект метаданных не мешает).
	КонецЕсли;
	
	// Формирование исключающего правила.
	ЭтоРегистрСведений = Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные);
	Если ЭтоРегистрСведений
		ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные) // ЭтоРегистрБухгалтерии
		ИЛИ Метаданные.РегистрыНакопления.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные) Тогда // ЭтоРегистрНакопления
		
		Правило = Новый Массив;
		Если ЭтоРегистрСведений Тогда
			Для Каждого Измерение Из СтрокаТаблицы.ОбнаруженныйМетаданные.Измерения Цикл
				Если Измерение.Ведущее Тогда
					Правило.Добавить(Измерение.Имя);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого Измерение Из СтрокаТаблицы.ОбнаруженныйМетаданные.Измерения Цикл
				Правило.Добавить(Измерение.Имя);
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ИсключениеПоиска) = Тип("Массив") Тогда
			Для Каждого ИмяРеквизита Из ИсключениеПоиска Цикл
				Если Правило.Найти(ИмяРеквизита) = Неопределено Тогда
					Правило.Добавить(ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсключениеПоиска) = Тип("Массив") Тогда
		
		ТекстыЗапросов = Новый Соответствие;
		ИмяКорневойТаблицы = СтрокаТаблицы.ОбнаруженныйМетаданные.ПолноеИмя();
		
		Для Каждого ПутьКРеквизиту Из ИсключениеПоиска Цикл
			ПозицияТочки = СтрНайти(ПутьКРеквизиту, ".");
			Если ПозицияТочки = 0 Тогда
				ПолноеИмяТаблицы = ИмяКорневойТаблицы;
				ИмяРеквизита = ПутьКРеквизиту;
			Иначе
				ПолноеИмяТаблицы = ИмяКорневойТаблицы + "." + Лев(ПутьКРеквизиту, ПозицияТочки - 1);
				ИмяРеквизита = Сред(ПутьКРеквизиту, ПозицияТочки + 1);
			КонецЕсли;
			
			ТекстВложенногоЗапроса = ТекстыЗапросов.Получить(ПолноеИмяТаблицы);
			Если ТекстВложенногоЗапроса = Неопределено Тогда
				ТекстВложенногоЗапроса = "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	1
				|ИЗ
				|	"+ ПолноеИмяТаблицы +" КАК Таблица
				|ГДЕ
				|	Таблица.Ссылка = &ОбнаруженныйСсылка
				|	И (";
			Иначе
				ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + Символы.ПС + Символы.Таб + Символы.Таб + "ИЛИ ";
			КонецЕсли;
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "Таблица." + ИмяРеквизита + " = &УдаляемыйСсылка";
			
			ТекстыЗапросов.Вставить(ПолноеИмяТаблицы, ТекстВложенногоЗапроса);
		КонецЦикла;
		
		ТекстЗапроса = "";
		Для Каждого КлючИЗначение Из ТекстыЗапросов Цикл
			Если ТекстЗапроса <> "" Тогда
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + КлючИЗначение.Значение + ")";
		КонецЦикла;
		
		Правило = Новый Запрос;
		Правило.Текст = ТекстЗапроса;
		
	Иначе
		
		Правило = "";
		
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции

#КонецОбласти

#Область ОбщаяМеханика

// Возвращает признак того, что объект метаданных используется в общих реквизитах-разделителях.
//
// Параметры:
//  ОбъектМетаданных - Строка, ОбъектМетаданных - Если объект метаданных задан строкой, происходит обращение к модулю
//                     повторного использования.
//  Разделитель      - Строка - имя общего реквизита-разделителя, на разделение которыми проверяется объект метаданных.
//
// Возвращаемое значение:
//  Булево - Истина, если объект метаданных используется хотя бы в одном общем разделителе.
//
Функция ЭтоРазделенныйОбъектМетаданных(Знач ОбъектМетаданных, Знач Разделитель)
	
	Возврат Ложь;
	
КонецФункции

// Инициализирует структуру параметров, необходимых для выполнения других служебных методов.
//
Процедура ИнициализироватьПараметры(ПараметрыВыполнения)
	
	// Определение параметров работы программы.
	Если Не ПараметрыВыполнения.Свойство("ИскатьПомеченные") Тогда
		ПараметрыВыполнения.Вставить("ИскатьПомеченные", Истина);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("УдалятьПомеченные") Тогда
		ПараметрыВыполнения.Вставить("УдалятьПомеченные", Истина);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("Монопольно") Тогда
		ПараметрыВыполнения.Вставить("Монопольно", Ложь);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("ТехнологическиеОбъекты") Тогда
		ПараметрыВыполнения.Вставить("ТехнологическиеОбъекты", Новый Массив);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("ПользовательскиеОбъекты") Тогда
		ПараметрыВыполнения.Вставить("ПользовательскиеОбъекты", Новый Массив);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("ВсеПомеченныеНаУдаление") Тогда
		ПараметрыВыполнения.Вставить("ВсеПомеченныеНаУдаление", Новый Массив);
		ДополнитьМассив(ПараметрыВыполнения.ВсеПомеченныеНаУдаление, ПараметрыВыполнения.ТехнологическиеОбъекты);
		ДополнитьМассив(ПараметрыВыполнения.ВсеПомеченныеНаУдаление, ПараметрыВыполнения.ПользовательскиеОбъекты);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("МодельСервиса") Тогда
		ПараметрыВыполнения.Вставить("МодельСервиса", Ложь);
		Если ПараметрыВыполнения.МодельСервиса Тогда
			ПараметрыВыполнения.Вставить("ВОбластиДанных", Ложь);
			ПараметрыВыполнения.Вставить("РазделительОсновныхДанных",        Неопределено);
			ПараметрыВыполнения.Вставить("РазделительВспомогательныхДанных", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("ИнформацияОТипах") Тогда
		ПараметрыВыполнения.Вставить("ИнформацияОТипах", Новый Соответствие);
	КонецЕсли;
	
	ПрепятствующиеУдалению = Новый ТаблицаЗначений;
	ПрепятствующиеУдалению.Колонки.Добавить("УдаляемыйСсылка");
	ПрепятствующиеУдалению.Колонки.Добавить("УдаляемыйТип", Новый ОписаниеТипов("Тип"));
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйСсылка");
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйТип", Новый ОписаниеТипов("Тип"));
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	ПараметрыВыполнения.Вставить("Удаленные",              Новый Массив);
	ПараметрыВыполнения.Вставить("НеУдаленные",            Новый Массив);
	ПараметрыВыполнения.Вставить("ПрепятствующиеУдалению", ПрепятствующиеУдалению);
	ПараметрыВыполнения.Вставить("ПовторноУдаляемые",      Новый Массив);
	ПараметрыВыполнения.Вставить("Интерактивное",          ПараметрыВыполнения.Свойство("ПериодЗаписи"));
	
	КлиентИнициализироватьПараметры(ПараметрыВыполнения);
	
КонецПроцедуры

// Формирует массив помеченных на удаление с учетом разделения.
//
Процедура ПолучитьПомеченныеНаУдаление(ПараметрыВыполнения)
	
	КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "ПередПоискомПомеченныхНаУдаление");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение списка помеченных на удаление.
	КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "ПоискПомеченныхНаУдаление");
	ПараметрыВыполнения.ВсеПомеченныеНаУдаление = НайтиПомеченныеНаУдаление();
	
	// Распределение помеченных на удаление по коллекциям.
	КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, "ВсеПомеченныеНаУдаление");
	Количество = ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Количество();
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		Ссылка = ПараметрыВыполнения.ВсеПомеченныеНаУдаление[ОбратныйИндекс];
		
		Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
		КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ВсеПомеченныеНаУдаление");
		
		Если ПараметрыВыполнения.МодельСервиса
			И ПараметрыВыполнения.ВОбластиДанных
			И Не Информация.Разделенный Тогда
			ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Удалить(ОбратныйИндекс);
			Продолжить; // Неразделенные объекты запрещено изменять из области данных.
		КонецЕсли;
		
		Если Информация.ЕстьПредопределенные И Информация.Предопределенные.Найти(Ссылка) <> Неопределено Тогда
			ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Удалить(ОбратныйИндекс);
			Продолжить; // Предопределенные элементы создаются и удаляются только автоматически.
		КонецЕсли;
		
		Если Информация.Технический = Истина Тогда
			ПараметрыВыполнения.ТехнологическиеОбъекты.Добавить(Ссылка);
		Иначе
			ПараметрыВыполнения.ПользовательскиеОбъекты.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует информацию о типе объекта метаданных, как то: полное имя, представления, вид и т.п.
//
Функция СформироватьИнформациюОТипах(ПараметрыВыполнения, Тип)
	
	Информация = ПараметрыВыполнения.ИнформацияОТипах.Получить(Тип); // Кэш.
	Если Информация <> Неопределено Тогда
		Возврат Информация;
	КонецЕсли;
	
	Информация = Новый Структура("ПолноеИмя, ПредставлениеЭлемента, ПредставлениеСписка,
	|Вид, Ссылочный, Технический, Разделенный,
	|Иерархический, ТекстЗапросаПоИерархии,
	|ЕстьПодчиненные, ТекстЗапросаПоПодчиненным,
	|ЕстьПредопределенные, Предопределенные");
	
	// Поиск объекта метаданных.
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	
	// Заполнение базовой информации.
	Информация.ПолноеИмя = ВРег(ОбъектМетаданных.ПолноеИмя());
	
	// Представления: элемента и списка.
	СтандартныеСвойства = Новый Структура("ПредставлениеОбъекта, РасширенноеПредставлениеОбъекта, ПредставлениеСписка, РасширенноеПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(СтандартныеСвойства, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеОбъекта) Тогда
		Информация.ПредставлениеЭлемента = СтандартныеСвойства.ПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеОбъекта) Тогда
		Информация.ПредставлениеЭлемента = СтандартныеСвойства.РасширенноеПредставлениеОбъекта;
	Иначе
		Информация.ПредставлениеЭлемента = ОбъектМетаданных.Представление();
	КонецЕсли;
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеСписка) Тогда
		Информация.ПредставлениеСписка = СтандартныеСвойства.ПредставлениеСписка;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеСписка) Тогда
		Информация.ПредставлениеСписка = СтандартныеСвойства.РасширенноеПредставлениеСписка;
	Иначе
		Информация.ПредставлениеСписка = ОбъектМетаданных.Представление();
	КонецЕсли;
	
	// Вид и его свойства.
	Информация.Вид = Лев(Информация.ПолноеИмя, СтрНайти(Информация.ПолноеИмя, ".") - 1);
	Если Информация.Вид = "СПРАВОЧНИК"
	 ИЛИ Информация.Вид = "ДОКУМЕНТ"
	 ИЛИ Информация.Вид = "ПЕРЕЧИСЛЕНИЕ"
	 ИЛИ Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	 ИЛИ Информация.Вид = "ПЛАНСЧЕТОВ"
	 ИЛИ Информация.Вид = "ПЛАНВИДОВРАСЧЕТА"
	 ИЛИ Информация.Вид = "БИЗНЕСПРОЦЕСС"
	 ИЛИ Информация.Вид = "ЗАДАЧА"
	 ИЛИ Информация.Вид = "ПЛАНОБМЕНА" Тогда
		Информация.Ссылочный = Истина;
	Иначе
		Информация.Ссылочный = Ложь;
	КонецЕсли;
	
	Если Информация.Вид = "СПРАВОЧНИК"
	 ИЛИ Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Информация.Иерархический = ОбъектМетаданных.Иерархический;
	ИначеЕсли Информация.Вид = "ПЛАНСЧЕТОВ" Тогда
		Информация.Иерархический = Истина;
	Иначе
		Информация.Иерархический = Ложь;
	КонецЕсли;
	Если Информация.Иерархический Тогда
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	&ПолноеИмя
		|ГДЕ
		|	Родитель = &УдаляемыйСсылка";
		Информация.ТекстЗапросаПоИерархии = СтрЗаменить(ШаблонЗапроса, "&ПолноеИмя", Информация.ПолноеИмя);
	КонецЕсли;
	
	Информация.ЕстьПодчиненные = Ложь;
	Информация.ТекстЗапросаПоПодчиненным = "";
	Если Информация.Вид = "СПРАВОЧНИК"
	 ИЛИ Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	 ИЛИ Информация.Вид = "ПЛАНОБМЕНА"
	 ИЛИ Информация.Вид = "ПЛАНСЧЕТОВ"
	 ИЛИ Информация.Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.&Имя
		|ГДЕ
		|	Владелец = &УдаляемыйСсылка";
		
		ТекстЗапроса = "";
		
		Для Каждого Справочник Из Метаданные.Справочники Цикл
			Если Справочник.Владельцы.Содержит(ОбъектМетаданных) Тогда
				Если Информация.ЕстьПодчиненные = Ложь Тогда
					Информация.ЕстьПодчиненные = Истина;
				Иначе
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "&Имя", Справочник.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Информация.ТекстЗапросаПоПодчиненным = ТекстЗапроса;
	КонецЕсли;
	
	Если Информация.ПолноеИмя = "СПРАВОЧНИК.ИДЕНТИФИКАТОРЫОБЪЕКТОВМЕТАДАННЫХ"
	 ИЛИ Информация.ПолноеИмя = "СПРАВОЧНИК.ПРЕДОПРЕДЕЛЕННЫЕВАРИАНТЫОТЧЕТОВ" Тогда
		Информация.Технический = Истина;
		Информация.Разделенный = Ложь;
	Иначе
		Информация.Технический = Ложь;
		Если ПараметрыВыполнения.МодельСервиса Тогда
			Информация.Разделенный = ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных, ПараметрыВыполнения.РазделительОсновныхДанных)
				ИЛИ ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных, ПараметрыВыполнения.РазделительВспомогательныхДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если Информация.Вид = "СПРАВОЧНИК"
	 ИЛИ Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	 ИЛИ Информация.Вид = "ПЛАНСЧЕТОВ"
	 ИЛИ Информация.Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	" + Информация.ПолноеИмя + "
		|ГДЕ
		|	Предопределенный
		|	И ПометкаУдаления";
		
		Информация.Предопределенные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Информация.ЕстьПредопределенные = Информация.Предопределенные.Количество() > 0;
	Иначе
		Информация.ЕстьПредопределенные = Ложь;
	КонецЕсли;
	
	ПараметрыВыполнения.ИнформацияОТипах.Вставить(Тип, Информация);
	
	Возврат Информация;
	
КонецФункции

// Регистрирует предупреждение в журнале регистрации.
//
Процедура ЗаписатьПредупреждение(Ссылка, ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ТекстДляЖурнала = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ТекстДляЖурнала = ИнформацияОбОшибке;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Удаление помеченных'", Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Ошибка,,
		Ссылка,
		ТекстДляЖурнала);
	
КонецПроцедуры

// Регистрация причины неудаления.
//
Процедура ЗаписатьПричинуВРезультат(ПараметрыВыполнения, СтрокаТаблицы)
	
	УдаляемыйТип        = ТипЗнч(СтрокаТаблицы.УдаляемыйСсылка);
	УдаляемыйИнформация = СформироватьИнформациюОТипах(ПараметрыВыполнения, УдаляемыйТип);
	Если УдаляемыйИнформация.Технический Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление не удаленных объектов.
	Если ПараметрыВыполнения.НеУдаленные.Найти(СтрокаТаблицы.УдаляемыйСсылка) = Неопределено Тогда
		ПараметрыВыполнения.НеУдаленные.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
	КонецЕсли;
	
	Причина = ПараметрыВыполнения.ПрепятствующиеУдалению.Добавить();
	ЗаполнитьЗначенияСвойств(Причина, СтрокаТаблицы);
	Причина.УдаляемыйТип    = УдаляемыйТип;
	Причина.ОбнаруженныйТип = ТипЗнч(Причина.ОбнаруженныйСсылка);
	
	Если СтрокаТаблицы.ОбнаруженныйСсылка = Неопределено Тогда
		Если Метаданные.Константы.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные) Тогда
			Причина.ОбнаруженныйТип = Тип("КонстантаМенеджерЗначения." + СтрокаТаблицы.ОбнаруженныйМетаданные.Имя);
		Иначе
			Причина.ОбнаруженныйСсылка = ПодставитьПараметрыВСтроку(
				НСтр("ru='Обнаружены неразрешимые ссылки (%1)'"),
				СтрокаТаблицы.ОбнаруженныйМетаданные.Представление());
			Причина.ОбнаруженныйТип = Тип("Строка");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация информации об объектах метаданных (если требуется).
	ОбнаруженныйИнформация = СформироватьИнформациюОТипах(ПараметрыВыполнения, Причина.ОбнаруженныйТип);
	
	// Заполнение подчиненных полей.
	Если ОбнаруженныйИнформация.Ссылочный Тогда
		Причина.ОбнаруженныйПометкаУдаления = Причина.ОбнаруженныйСсылка.ПометкаУдаления;
	Иначе
		Причина.ОбнаруженныйПометкаУдаления = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Основная механика удаления помеченных объектов.
//
Функция ИзвлечьРезультат(ПараметрыВыполнения)
	
	РезультатУдаления = ПараметрыВыполнения;
	РезультатУдаления.Удалить("ВсеПомеченныеНаУдаление");
	РезультатУдаления.Удалить("ВсеПомеченныеНаУдаление");
	
	Возврат РезультатУдаления;
	
КонецФункции

#КонецОбласти

#Область ПередачаИнформацииНаКлиент

// Инициализирует структуру параметров, необходимых для передачи на клиент.
//
Процедура КлиентИнициализироватьПараметры(ПараметрыВыполнения)
	
	Если Не ПараметрыВыполнения.Интерактивное Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ДостигнутыйПроцент", 0);
	ПараметрыВыполнения.Вставить("Диапазон", 0);
	ПараметрыВыполнения.Вставить("Всего", 0);
	ПараметрыВыполнения.Вставить("Номер", 0);
	ПараметрыВыполнения.Вставить("Время", ТекущаяДатаСеанса() - 0.1);
	
	ПараметрыВыполнения.Вставить("Диапазоны", Новый Соответствие);
	
	ОбщийВес = 0;
	Если ПараметрыВыполнения.ИскатьПомеченные Тогда
		ПараметрыВыполнения.Диапазоны.Вставить("ПередПоискомПомеченныхНаУдаление", 5);
		ПараметрыВыполнения.Диапазоны.Вставить("ПоискПомеченныхНаУдаление", 4);
		ПараметрыВыполнения.Диапазоны.Вставить("ВсеПомеченныеНаУдаление", 1);
		ОбщийВес = ОбщийВес + 10;
	КонецЕсли;
	
	Если ПараметрыВыполнения.УдалятьПомеченные Тогда
		Если ПараметрыВыполнения.Монопольно Тогда
			ПараметрыВыполнения.Диапазоны.Вставить("МонопольноеУдаление", 80);
			ПараметрыВыполнения.Диапазоны.Вставить("ПрепятствующиеУдалению", 10);
		Иначе // Не монопольно.
			ПараметрыВыполнения.Диапазоны.Вставить("ТехнологическиеОбъекты", 10);
			ПараметрыВыполнения.Диапазоны.Вставить("ПользовательскиеОбъекты", 70);
			ПараметрыВыполнения.Диапазоны.Вставить("ПовторноУдаляемые", 10);
		КонецЕсли;
		ОбщийВес = ОбщийВес + 90;
	КонецЕсли;
	
	Если ОбщийВес <> 0 И ОбщийВес <> 100 Тогда
		Коэффициент = 100 / ОбщийВес;
		Для Каждого КлючИЗначение Из ПараметрыВыполнения.Диапазоны Цикл
			ПараметрыВыполнения.Диапазоны.Вставить(КлючИЗначение.Ключ, Окр(КлючИЗначение.Значение*Коэффициент, 0));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует начало процесса.
//
Процедура КлиентОтметитьНачалоОбхода(ПараметрыВыполнения, ИмяКоллекции, Коллекция = Неопределено)
	
	Если НЕ ПараметрыВыполнения.Интерактивное Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.ДостигнутыйПроцент = ПараметрыВыполнения.ДостигнутыйПроцент + ПараметрыВыполнения.Диапазон;
	ПараметрыВыполнения.Диапазон = ПараметрыВыполнения.Диапазоны[ИмяКоллекции];
	Если (Коллекция <> Неопределено) ИЛИ ПараметрыВыполнения.Свойство(ИмяКоллекции, Коллекция) Тогда
		ПараметрыВыполнения.Всего = Коллекция.Количество();
		ПараметрыВыполнения.Номер = 0;
	Иначе
		ПараметрыВыполнения.Всего = 1;
		ПараметрыВыполнения.Номер = 0;
		КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, ИмяКоллекции);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует прогресс.
//
Процедура КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, ИмяКоллекции)
	
	Если НЕ ПараметрыВыполнения.Интерактивное Тогда
		Возврат;
	КонецЕсли;
	
	// Регистрация прогресса.
	ПараметрыВыполнения.Номер = ПараметрыВыполнения.Номер + 1;
	
	// Проверка что подошло время передачи информации на клиент.
	Если ТекущаяДатаСеанса() >= ПараметрыВыполнения.Время Тогда
		// Установка следующего времени передачи информации на клиент.
		ПараметрыВыполнения.Время = ПараметрыВыполнения.Время + ПараметрыВыполнения.ПериодЗаписи;
	ИначеЕсли ПараметрыВыполнения.Номер = ПараметрыВыполнения.Всего Тогда
		// Вывод последнего.
	Иначе
		Возврат;
	КонецЕсли;
	
	Процент = ПараметрыВыполнения.ДостигнутыйПроцент
		+ ПараметрыВыполнения.Диапазон*ПараметрыВыполнения.Номер/ПараметрыВыполнения.Всего;
	
	// Подготовка передаваемых параметров.
	Если ИмяКоллекции = "ПередПоискомПомеченныхНаУдаление" Тогда
		
		Текст = НСтр("ru='Подготовка к поиску объектов, помеченных на удаление.'");
		
	ИначеЕсли ИмяКоллекции = "НайтиПомеченныеНаУдаление" Тогда
		
		Текст = НСтр("ru='Поиск объектов, помеченных на удаление.'");
		
	ИначеЕсли ИмяКоллекции = "ВсеПомеченныеНаУдаление" Тогда
		
		Текст = НСтр("ru='Анализ помеченных на удаление.'");
		
	ИначеЕсли ИмяКоллекции = "ТехнологическиеОбъекты" Тогда
		
		Текст = НСтр("ru='Подготовка к удалению.'");
		
	ИначеЕсли ИмяКоллекции = "МонопольноеУдаление" Тогда
		
		Текст = НСтр("ru='Выполняется удаление объектов.'");
		
	ИначеЕсли ИмяКоллекции = "ПользовательскиеОбъекты" Тогда
		
		НеУдалено = ПараметрыВыполнения.НеУдаленные.Количество();
		Если НеУдалено = 0 Тогда
			Шаблон = НСтр("ru='Удалено: %1 из %2 объектов.'");
		Иначе
			Шаблон = НСтр("ru='Обработано: %1 из %2 объектов, из них не удалено: %3.'");
		КонецЕсли;
		Текст = ПодставитьПараметрыВСтроку(
			Шаблон,
			Формат(ПараметрыВыполнения.Номер, "ЧН=0; ЧГ="),
			Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="),
			Формат(НеУдалено, "ЧН=0; ЧГ="));
		
	ИначеЕсли ИмяКоллекции = "ПовторноУдаляемые" Тогда
		
		Текст = ПодставитьПараметрыВСтроку(
			НСтр("ru='Повторная проверка не удаленных объектов: %1 из %2.'"),
			Формат(ПараметрыВыполнения.Номер, "ЧН=0; ЧГ="),
			Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="));
		
	ИначеЕсли ИмяКоллекции = "ПрепятствующиеУдалению" Тогда
		
		Текст = ПодставитьПараметрыВСтроку(
			НСтр("ru='Анализ объектов, препятствующих удалению: %1 из %2.'"),
			Формат(ПараметрыВыполнения.Номер, "ЧН=0; ЧГ="),
			Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="));
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Регистрация сообщения для чтения из клиентского сеанса.
	СообщитьПрогресс(Процент, Текст);
	
КонецПроцедуры

// Возвращает значение в виде XML-строки.
// Преобразованы в XML-строку (сериализованы) могут быть только те объекты,
// для которых в описании указано, что они сериализуются.
//
// Параметры:
//   Значение - Произвольный. Значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//   Строка - XML-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуXML(Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом
// управления формы.
//
// Параметры:
//   ТекстСообщенияПользователю - Строка - текст сообщения.
//   КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                                Ссылка на объект информационной базы, к которому это сообщение относится,
//                                или ключ записи.
//   Поле                       - Строка - наименование реквизита формы.
//   ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//   Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"),,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//  Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"),,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"),,
//		"ИмяРеквизитаФормы");
//
//  3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"), Ссылка,,, Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = Ложь)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Регистрирует в сообщениях информацию о ходе выполнения фонового задания.
//   В дальнейшем эту информацию можно считать с клиента при помощи функции ПрочитатьПрогресс.
//
// Параметры:
//  Процент - Число  - Необязательный. Процент выполнения.
//  Текст   - Строка - Необязательный. Информация о текущей операции.
//  ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация,
//      которую необходимо передать на клиент. Значение должно быть простым (сериализуемым в XML строку).
//
Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено,
	Знач ДополнительныеПараметры = Неопределено)
	
	ПередаваемоеЗначение = Новый Структура;
	Если Процент <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Процент", Процент);
	КонецЕсли;
	Если Текст <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Текст", Текст);
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;
	
	ПередаваемыйТекст = ЗначениеВСтрокуXML(ПередаваемоеЗначение);
	
	Текст = ПередаваемыйТекст;
	СообщитьПользователю(Текст);
	
	ПолучитьСообщенияПользователю(Истина); // Удаление предыдущих сообщений.
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаПометкиУдаления

// Запускает установку пометки удаления для конфигурации или версии и связанных с ними объектов.
//
Процедура ВыполнитьУдалениеСвязанныхОбъектовКонфигурацииВФоновомЗадании(ОбъектСсылка, ЗначениеПометкиУдаления,
	СтрокаСчетчик) Экспорт
	
	Попытка
		ВыполнитьУдалениеСвязанныхОбъектовКонфигурации(ОбъектСсылка, ЗначениеПометкиУдаления, СтрокаСчетчик);
	Исключение
		
		ИмяСобытия = ?(ЗначениеПометкиУдаления, НСтр("ru='Установка пометки удаления.'", Метаданные.ОсновнойЯзык.КодЯзыка),
			НСтр("ru='Снятие пометки удаления.'", Метаданные.ОсновнойЯзык.КодЯзыка)) + " " + Строка(ОбъектСсылка);
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
