#Область ПрограммныйИнтерфейс

// Проверят установленность безопасного режима, игнорируя безопасный режим профиля безопасности,
//  использующегося в качестве профиля безопасности с уровнем привилегий конфигурации.
//
// Возвращаемое значение:
//   Булево - Истина, если установлен, иначе Ложь.
//
Функция УстановленБезопасныйРежим() Экспорт
	
	ТекущийБезопасныйРежим = БезопасныйРежим();
	
	Если ТипЗнч(ТекущийБезопасныйРежим) = Тип("Строка") Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ТекущийБезопасныйРежим) = Тип("Булево") Тогда
		
		Возврат ТекущийБезопасныйРежим;
		
	КонецЕсли;
	
КонецФункции

// Выполнить экспортную процедуру по имени с уровнем привилегий конфигурации.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате <имя объекта>.<имя процедуры>,
//                        где <имя объекта> - это общий модуль или модуль менеджера объекта.
//  Параметры  - Массив - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
//                        в порядке расположения элементов массива.
//
// Пример:
//  Параметры = Новый Массив();
//  Параметры.Добавить("1");
//  РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("МойОбщийМодуль.МояПроцедура", Параметры);
//
Процедура ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	
	ПроверитьИмяМетодаКонфигурации(ИмяМетода);
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
	
КонецПроцедуры

// Проверяет, что переданное имя является именем экспортной процедуры конфигурации.
// Может использоваться для проверки, что переданная строка не содержит произвольного алгоритма
// на встроенном языке 1С:Предприятия перед использованием его в операторах Выполнить() и Вычислить()
// при их использовании для динамического вызова методов код конфигурации.
//
// В случае, если переданная строка не соответствует имени метода конфигурации - генерируется ошибка.
//
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате <имя объекта>.<имя процедуры>,
//                        где <имя объекта> - это общий модуль или модуль менеджера объекта.
//
Процедура ПроверитьИмяМетодаКонфигурации(Знач ИмяМетода) Экспорт
	
	// Проверка предусловий на формат ИмяЭкспортнойПроцедуры.
	ЧастиИмени = СтрРазделить(ИмяМетода, ".");
	Если (ЧастиИмени.Количество() <> 2) И (ЧастиИмени.Количество() <> 3) Тогда
		ТекстИсключения = НСтр("ru='Неправильный формат параметра ИмяМетода (передано значение: ""%1"")
			|в процедуре РаботаВБезопасномРежиме.ПроверитьИмяМетодаКонфигурации'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ИмяМетода);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ИмяОбъекта = ЧастиИмени[0];
	Если (ЧастиИмени.Количество() = 2) И (Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено) Тогда
		ТекстИсключения = НСтр("ru='Неправильный формат параметра ИмяМетода (передано значение: ""%1"")
			|в процедуре РаботаВБезопасномРежиме.ПроверитьИмяМетодаКонфигурации:
			|Не найден общий модуль ""%2"".'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ИмяМетода, ИмяОбъекта);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ЧастиИмени.Количество() = 3 Тогда
		ПолноеИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
		Попытка
			Менеджер = МенеджерОбъектаПоИмени(ПолноеИмяОбъекта);
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
		Если Менеджер = Неопределено Тогда
			ТекстИсключения = НСтр("ru='Неправильный формат параметра ИмяМетода (передано значение: ""%1"")
				|в процедуре РаботаВБезопасномРежиме.ПроверитьИмяМетодаКонфигурации:
				|Не найден менеджер объекта ""%2"".'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, ИмяМетода, ПолноеИмяОбъекта);
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМетодаОбъекта = ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура = Новый Структура;
	Попытка
		// Проверка того, что ИмяМетодаОбъекта является допустимым идентификатором.
		// Например: МояПроцедура.
		ВременнаяСтруктура.Вставить(ИмяМетодаОбъекта);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Безопасное выполнение метода'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстИсключения = НСтр("ru='Неправильный формат параметра ИмяМетода (передано значение: ""%1"")
			|в процедуре РаботаВБезопасномРежиме.ПроверитьИмяМетодаКонфигурации:
			|Имя метода ""%2"" не соответствует требованиям образования имен процедур и функций.'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ИмяМетода, ИмяМетодаОбъекта);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает менеджер объекта по имени.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Имя - Строка - имя например, "Справочник", "Справочники", "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникиМенеджер, СправочникМенеджер, ДокументыМенеджер, ДокументМенеджер, ...
//
Функция МенеджерОбъектаПоИмени(Имя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(Имя, ".");
	
	Если ЧастиИмени.Количество() > 0 Тогда
		КлассОМ = ВРег(ЧастиИмени[0]);
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;
	
	Если      КлассОМ = "ПЛАНОБМЕНА"
	 ИЛИ      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
	      ИЛИ КлассОМ = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
	      ИЛИ КлассОМ = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
	      ИЛИ КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
	      ИЛИ КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли КлассОМ = "ОТЧЕТ"
	      ИЛИ КлассОМ = "ОТЧЕТЫ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли КлассОМ = "ОБРАБОТКА"
	      ИЛИ КлассОМ = "ОБРАБОТКИ" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	      ИЛИ КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
	      ИЛИ КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
	      ИЛИ КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
	      ИЛИ КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
	      ИЛИ КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
	      ИЛИ КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
	      ИЛИ КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда
		
		Если ЧастиИмени.Количество() < 3 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
			Если ЧастиИмени.Количество() > 3 Тогда
				ИмяПодчиненногоОМ = ЧастиИмени[3];
			КонецЕсли;
			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
			 ИЛИ КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
				// Перерасчет
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОМ = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
	      ИЛИ КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли КлассОМ = "ЗАДАЧА"
	      ИЛИ КлассОМ = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли КлассОМ = "КОНСТАНТА"
	      ИЛИ КлассОМ = "КОНСТАНТЫ" Тогда
		Менеджер = Константы;
		
	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
	      ИЛИ КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОМ) Тогда
			Попытка
				Возврат Менеджер[ИмяОМ];
			Исключение
				Менеджер = Неопределено;
			КонецПопытки;
		Иначе
			Возврат Менеджер;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось получить менеджер для объекта ""%1""'"), Имя);
	
КонецФункции

#КонецОбласти

