
#Область ПрограммныйИнтерфейс

// Создает прокси веб-сервиса СППР. В случае ошибки при создании вызывается исключение.
//
// Возвращаемое значение:
//	WSПрокси - Прокси веб-сервиса.
//
Функция ПолучитьПрокси() Экспорт
	
	МестоположениеWSDL = Константы.АдресВебСервисаСППР.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL)
		И (НЕ СтрЗаканчиваетсяНа(МестоположениеWSDL, "/")) И (НЕ СтрЗаканчиваетсяНа(МестоположениеWSDL, "\")) Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	МестоположениеWSDL = МестоположениеWSDL + "ws/ErrorsExchange.1cws?wsdl";
	
	ПараметрыАвторизации = Константы.ПараметрыПодключенияСППР.СоздатьМенеджерЗначения().ПолучитьПараметры();
	
	Если НЕ ЗначениеЗаполнено(ПараметрыАвторизации.ИмяПользователя) Тогда
		ВызватьИсключение
			НСтр("ru='Ошибка подключения к СППР: не заполнены параметры подключения.
				|Обратитесь к администратору системы.'");
	КонецЕсли;
	
	Попытка
		Определение = Новый WSОпределения(
			МестоположениеWSDL,
			ПараметрыАвторизации.ИмяПользователя,
			ПараметрыАвторизации.ПарольПользователя);
		
		Прокси = Новый WSПрокси(
			Определение,
			"http://www.1c.ru/modeling",
			"ErrorsExchange",
			"ErrorsExchangeSoap");
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Интеграция с СППР'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ВызватьИсключение НСтр("ru='Ошибка подключения к СППР.
			|Возможно не прошла авторизация, указан неверный адрес веб-сервиса или база СППР не опубликована на веб-сервере.
			|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		
	КонецПопытки;
	
	Прокси.Пользователь = ПараметрыАвторизации.ИмяПользователя;
	Прокси.Пароль 		= ПараметрыАвторизации.ПарольПользователя;
	
	Возврат Прокси;
	
КонецФункции

// Проверяет результат, возвращенный операцией WEB-сервиса.
// В случае возврата объекта типа Структура с свойством ОшибкаСервиса вызывается исключение.
//
// Параметры:
//	Ответ - Произвольный - возвращаемое значение web-сервиса.
//	Действие - Строка - описание текущей операции web-сервиса.
//
Процедура ПроверитьРезультатОперацииВебСервиса(Ответ, Действие) Экспорт
	
	Если ТипЗнч(Ответ) = Тип("ХранилищеЗначения") Тогда
		
		Значение = Ответ.Получить();
		Если ТипЗнч(Значение) = Тип("Структура") И Значение.Свойство("ОшибкаСервиса") Тогда
			
			ТекстОшибки = Значение.Описание;
			Пока СтрНайти(ТекстОшибки, "}") > 0 Цикл
				ТекстОшибки = Сред(ТекстОшибки, СтрНайти(ТекстОшибки, "}") + 3);
			КонецЦикла;
			
			ПозицияТекстаПоПричине = СтрНайти(ТекстОшибки, Символы.ПС + НСтр("ru='по причине:'"));
			Если ПозицияТекстаПоПричине > 0 Тогда
				ТекстОшибки = Сред(ТекстОшибки, ПозицияТекстаПоПричине + 13);
			КонецЕсли;
			
			Если СтрНайти(ТекстОшибки, "ВызватьИсключение") Тогда
				ТекстОшибки = Сред(ТекстОшибки, 1, СтрНайти(ТекстОшибки, "ВызватьИсключение") - 1);
			КонецЕсли;
			
			ТекстОшибки = Действие + ":" + Символы.ПС + Значение.Заголовок + ":" + Символы.ПС + ТекстОшибки;
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Интеграция с СППР'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет таблицу ошибок соответствующими правилам стандартами
Процедура ДополнитьОшибкиСсылкамиНаСтандартыИСрочностью(ТаблицаОшибок)
	
	Если ТаблицаОшибок.Колонки.Найти("СсылкаНаСтандарт") = Неопределено Тогда
		ТаблицаОшибок.Колонки.Добавить("СсылкаНаСтандарт", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Если ТаблицаОшибок.Колонки.Найти("СрочностьИсправления") = Неопределено Тогда
		ТаблицаОшибок.Колонки.Добавить("СрочностьИсправления", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	ВременныйМассивПравил = ТаблицаОшибок.ВыгрузитьКолонку("Правило");
	МассивПравил = Новый Массив;
	
	Для Каждого Правило Из ВременныйМассивПравил Цикл
		Если МассивПравил.Найти(Правило) = Неопределено Тогда
			МассивПравил.Добавить(Правило);
		КонецЕсли;
	КонецЦикла;
	
	ВременныйМассивПравил.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТребованияРеализацияТребования.Ссылка.СсылкаНаСтандарт КАК СсылкаНаСтандарт,
	|	ТребованияРеализацияТребования.ПравилоПроверки КАК Правило
	|ИЗ
	|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
	|ГДЕ
	|	ТребованияРеализацияТребования.ПравилоПроверки В(&ПравилаПроверки)
	|	И ТребованияРеализацияТребования.Ссылка.СсылкаНаСтандарт <> """"
	|	И ТребованияРеализацияТребования.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Требования.СистемаСтандартов))";
	
	Запрос.УстановитьПараметр("ПравилаПроверки", МассивПравил);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СтрокаСоСтандартом = РезультатЗапроса.Найти(СтрокаОшибки.Правило);
		Если СтрокаСоСтандартом <> Неопределено Тогда
			СтрокаОшибки.СсылкаНаСтандарт = СтрокаСоСтандартом.СсылкаНаСтандарт;
		КонецЕсли;
		
		КритичностьОшибки = СтрокаОшибки.Ошибка.Критичность;
		
		Если КритичностьОшибки = Перечисления.УровниКритичностиОшибок.Обязательно Тогда
			СтрокаОшибки.СрочностьИсправления = "Немедленно";
		ИначеЕсли КритичностьОшибки = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
			СтрокаОшибки.СрочностьИсправления = "ЖелательноБыстрее";
		Иначе
			СтрокаОшибки.СрочностьИсправления = "ВПлановомПорядке";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание ошибки сервиса.
//
// Параметры:
//	Заголовок - Строка - заголовок ошибки.
//	Описание - Строка - описание ошибки.
//
// Возвращаемое значение:
//	Структура - описание ошибки.
//
Функция ВернутьОшибкуСервиса(Заголовок, Описание) Экспорт
	
	ОписаниеОшибки = Новый Структура("ОшибкаСервиса, Заголовок, Описание", Истина, Заголовок, Описание);
	
	Возврат ВернутьХранилищеЗначения(ОписаниеОшибки);
	
КонецФункции

// Возвращает строковое представление идентификатора объекта ИБ, полученного по ссылке.
//
// Параметры:
//	Ссылка - ЛюбаяСсылка - произвольная ссылка.
//
// Возвращаемое значение:
//	Строка - строковое представление идентификатора объекта с этой ссылкой или пустая строка для пустой ссылки.
//
Функция ИдентификаторПоСсылке(Ссылка) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат СокрЛП(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает строковое представление идентификатора объекта ИБ, полученного по ссылке.
//
// Параметры:
//	МенеджерОбъекта - Менеджер - менеджер объекта.
//	Идентификатор   - Строка - уникальный идентификатор.
//
// Возвращаемое значение:
//	ЛюбаяСсылка - ссылка на объект с указанным идентификатором.
//
Функция СсылкаПоИдентификатору(МенеджерОбъекта, Идентификатор) Экспорт
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	КонецЕсли;
	
	Возврат МенеджерОбъекта.ПустаяСсылка();
	
КонецФункции

// Возвращает соответствие значений перечисления и их имен.
//
// Параметры:
//	ИмяПеречисления - Строка - имя перечисления в метаданных конфигурации.
//
// Возвращаемое значение:
//	Соответствие - Ключ: значение перечисления, Значение: имя значения перечисления в метаданных конфигурации.
//
Функция СоответствиеНазванийПеречисления(ИмяПеречисления) Экспорт
	
	СоответствиеЗначений = Новый Соответствие;
	СоответствиеЗначений.Вставить(Перечисления[ИмяПеречисления].ПустаяСсылка(), "");
	Для Каждого Мета Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		СоответствиеЗначений.Вставить(Перечисления[ИмяПеречисления][Мета.Имя], Мета.Имя);
	КонецЦикла;
	
	Возврат СоответствиеЗначений;
	
КонецФункции

// Возвращает ссылку на пользователя по его имени.
// В случае отсутствия пользователя с таким именем - создает его.
//
// Параметры:
//	ИмяПользователя - Строка - имя пользователя.
//
// Возвращаемое значение:
//	Соответствие - Ключ: значение перечисления, Значение: имя значения перечисления в метаданных конфигурации.
//
Функция НайтиПользователя(СтруктураПользователь) Экспорт
	
	Если ТипЗнч(СтруктураПользователь) = Тип("Структура") Тогда
		ИмяПользователя = СтруктураПользователь.ИмяПользователя;
		ИмяПользователяОС = СтруктураПользователь.ИмяПользователяОС;
	Иначе
		ИмяПользователя = СтруктураПользователь;
		ИмяПользователяОС = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПользователяОС) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ПользовательОС", НРег(ИмяПользователяОС));
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПользователя) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя, Истина);
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Если ЗначениеЗаполнено(ИмяПользователяОС) И НЕ ЗначениеЗаполнено(Пользователь.ПользовательОС) Тогда
			ОбъектПользователь = Пользователь.ПолучитьОбъект();
			ОбъектПользователь.ПользовательОС = ИмяПользователяОС;
			ОбъектПользователь.Записать();
		КонецЕсли;
		
		Возврат Пользователь;
	КонецЕсли;
	
	Пользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Если ЗначениеЗаполнено(ИмяПользователяОС) И НЕ ЗначениеЗаполнено(Пользователь.ПользовательОС) Тогда
			ОбъектПользователь = Пользователь.ПолучитьОбъект();
			ОбъектПользователь.ПользовательОС = ИмяПользователяОС;
			ОбъектПользователь.Записать();
		КонецЕсли;
		
		Возврат Пользователь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = Справочники.Пользователи.СоздатьЭлемент();
	Пользователь.Наименование = ИмяПользователя;
	Пользователь.ПользовательОС = ИмяПользователяОС;
	Пользователь.Комментарий = НСтр("ru='Сформирован автоматически по данным конфигурации СППР'");
	
	Попытка
		Пользователь.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Ошибка создания нового пользователя при загрузке из СППР'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Пользователи,
			ИмяПользователя,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Пользователь.Ссылка;
	
КонецФункции

Функция ИнициализироватьСтруктуруДляИнтеграцииВСППР(Конфигурация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СтруктураПроверкиДляРегистрацииВСППР", "");
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	ИспользоватьРегистрациюВСППР = ИспользоватьРегистрациюВСППР(Конфигурация);
	
	СтруктураПроверкиДляРегистрацииВСППР = Новый Структура;
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("Конфигурация", Конфигурация);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("ИспользоватьРегистрациюВСППР", ИспользоватьРегистрациюВСППР);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("ГруппироватьОшибкиПоОтветственному",
		Конфигурация.ГруппироватьОшибкиПоОтветственному);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("ВерсияКонфигурацииСППР", Конфигурация.ВерсияКонфигурацииСППР);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("ДополнениеКТекстуОшибкиСППР",
		Конфигурация.ДополнениеКТекстуОшибкиСППР);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("ИмяКонфигурацииСППР", Конфигурация.ИмяКонфигурацииСППР);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("ПолучатьОтветственныхЗаМетаданныеИзСППР",
		Конфигурация.ПолучатьОтветственныхЗаМетаданныеИзСППР);
	
	Результат.СтруктураПроверкиДляРегистрацииВСППР = СтруктураПроверкиДляРегистрацииВСППР;
	
	Если ИспользоватьРегистрациюВСППР Тогда
		ТекстОшибкиИнтеграцииССППР = "";
		Если НЕ ПроверитьСоединениеССППР(СтруктураПроверкиДляРегистрацииВСППР, ТекстОшибкиИнтеграцииССППР) Тогда
			Результат.ТекстОшибки = ТекстОшибкиИнтеграцииССППР;
			Результат.Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРегистрацииОшибокВССППР

Функция ИспользоватьИнтеграциюССППР() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюССППР");
	
КонецФункции

Функция ИспользоватьРегистрациюВСППР(Конфигурация) Экспорт
	
	Возврат ИспользоватьИнтеграциюССППР() И Конфигурация.РегистрироватьОшибкиВСППР;
	
КонецФункции

Функция ПроверитьСоединениеССППР(СтруктураПроверки, ТекстОшибкиИнтеграцииССППР)
	
	ВерсияСППР = ПолучитьВерсиюСППР();
	Если НЕ ЗначениеЗаполнено(ВерсияСППР) Тогда
		
		ТекстОшибкиИнтеграцииССППР =
			НСтр("ru='Ошибки проверки конфигурации в СППР не зарегистрированы (см. журнал регистрации)'");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если (СтруктураПроверки.ГруппироватьОшибкиПоОтветственному = Перечисления.ВидыГруппировокСППР.НеГруппировать)
		И РелизыПоПорядку(ВерсияСППР, "1.1.14.0") Тогда
		
		ТекстОшибкиИнтеграцииССППР = НСтр("ru='Версия СППР, в которой будут зарегистрированы ошибки,
			|не поддерживает выбранный вариант группировки ошибок'");
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВерсиюСППР()
	
	Попытка
		ПроверочныйПрокси = ИнтеграцияССППРПовтИсп.ПолучитьПрокси();
		ВерсияСППР = ПроверочныйПрокси.GetInterfaceVersion();
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат ВерсияСППР.Получить();
	
КонецФункции

Процедура ЗарегистрироватьОшибкиСППР(СтруктураПроверки, ТаблицаОшибокАПК) Экспорт
	
	Если НЕ СтруктураПроверки.ИспользоватьРегистрациюВСППР Тогда
		Возврат;
	КонецЕсли;
	
	// Переопределим массив правил проверки из таблицы ошибок, если он не заполнен.
	ПравилаПроверки = Неопределено;
	Если НЕ СтруктураПроверки.Свойство("ПравилаПроверки", ПравилаПроверки) Тогда
		ПравилаПроверки = Новый Массив;
	КонецЕсли;
	
	Если ПравилаПроверки.Количество() = 0 Тогда
		
		ТаблицаПравил = ТаблицаОшибокАПК.Скопировать(, "Правило");
		ТаблицаПравил.Свернуть("Правило");
		
		ПравилаПроверки = ТаблицаПравил.ВыгрузитьКолонку("Правило");
		
		СтруктураПроверки.Вставить("ПравилаПроверки", ПравилаПроверки);
		
	КонецЕсли;
	
	Если СтруктураПроверки.ГруппироватьОшибкиПоОтветственному = Перечисления.ВидыГруппировокСППР.НеГруппировать Тогда
		ЗарегистрироватьОшибкиСППРБезГруппировки(СтруктураПроверки, ТаблицаОшибокАПК);
	Иначе
		ЗарегистрироватьОшибкиСППРСГруппировкой(СтруктураПроверки, ТаблицаОшибокАПК);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует найденные ошибки АПК в СППР.
//
// Алгоритм следующий:
//  П.1 - получаем таблицу ошибок АПК для регистрации в СППР.
//  П.2 - уточняем сведения об ответственных за метаданные АПК из СППР.
//  П.3 - группируем ошибки АПК(как указано в спр. конфигураций), заполняем доп. информацию для ошибок СППР.
//  П.4 - регистрируем ошибки в СППР, запоминаем их УИД-ы в АПК.
//
Процедура ЗарегистрироватьОшибкиСППРСГруппировкой(СтруктураПроверки, ТаблицаОшибокАПК)
	
	Конфигурация    = СтруктураПроверки.Конфигурация;
	Версия          = СтруктураПроверки.Версия;
	ЖурналПроверки  = СтруктураПроверки.ЖурналПроверки;
	ТаблицаЖурнала   = СтруктураПроверки.ТаблицаЖурнала;
	Дата            = СтруктураПроверки.Дата;
	ПравилаПроверки = СтруктураПроверки.ПравилаПроверки;
	
	ВерсияКонфигурацииСППР                  = СтруктураПроверки.ВерсияКонфигурацииСППР;
	ГруппироватьОшибкиПоОтветственному      = СтруктураПроверки.ГруппироватьОшибкиПоОтветственному;
	ДополнениеКТекстуОшибкиСППР             = СтруктураПроверки.ДополнениеКТекстуОшибкиСППР;
	ИмяКонфигурацииСППР                     = СтруктураПроверки.ИмяКонфигурацииСППР;
	ПолучатьОтветственныхЗаМетаданныеИзСППР = СтруктураПроверки.ПолучатьОтветственныхЗаМетаданныеИзСППР;
	
	КонфигурацияНаименование = Конфигурация.Наименование;
	
	Текст = НСтр("ru='Начало регистрации ошибок конфигурации в СППР'");
	Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
	
	ТекстОшибкиИнтеграцииССППР =
		НСтр("ru='Ошибки проверки конфигурации в СППР не зарегистрированы (см. журнал регистрации)'");
	
	Попытка
		Прокси = ИнтеграцияССППРПовтИсп.ПолучитьПрокси();
	Исключение
		Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, ТекстОшибкиИнтеграцииССППР,
			ЖурналПроверки, ТаблицаЖурнала);
		СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
		Возврат;
	КонецПопытки;
	
	ОшибкиДляСППР = Новый ТаблицаЗначений; // ошибки АПК для регистрации в СППР
	ОшибкиДляСППР.Колонки.Добавить("ИндексЗаписи"); // индекс строки в ТаблицаОшибокАПК
	ОшибкиДляСППР.Колонки.Добавить("Правило");
	ОшибкиДляСППР.Колонки.Добавить("Ошибка");
	ОшибкиДляСППР.Колонки.Добавить("Объект");
	ОшибкиДляСППР.Колонки.Добавить("ИмяОбъекта"); // Объект.Путь
	ОшибкиДляСППР.Колонки.Добавить("Ответственный");
	ОшибкиДляСППР.Колонки.Добавить("УИДОтветственныйСППР");
	ОшибкиДляСППР.Колонки.Добавить("ИмяОтветственныйСППР");
	ОшибкиДляСППР.Колонки.Добавить("УИДОбъектСППР");
	ОшибкиДляСППР.Колонки.Добавить("ИмяОбъектСППР");
	
	СгруппированныеОшибки = Новый ТаблицаЗначений; // таблица ошибок СППР (свернутые ошибки АПК - ОшибкиДляСППР)
	СгруппированныеОшибки.Колонки.Добавить("Наименование");
	СгруппированныеОшибки.Колонки.Добавить("СрочностьИсправления");
	СгруппированныеОшибки.Колонки.Добавить("УИДОтветственного"); // идентификатор пользователя в СППР, на которого регистрируется ошибка
	СгруппированныеОшибки.Колонки.Добавить("ОбъектыСППР"); // идентификаторы объектов метаданных в СППР, на которых регистрируется ошибка
	СгруппированныеОшибки.Колонки.Добавить("СлужебноеНомераСтрок"); // индексы свернутых строк таблицы ОшибкиДляСППР, которые попали в ошибку СППР
	
	// Таблица метаданных с указанием ответственного за метаданные в АПК.
	ТаблицаОтветственных = Новый ТаблицаЗначений;
	ТаблицаОтветственных.Колонки.Добавить("Объект");
	ТаблицаОтветственных.Колонки.Добавить("ОтветственныйАПК");
	
	СписокНомеровОшибокОтправленныхВСППР = Новый СписокЗначений;
	
	// П.1
	Для Каждого СтрокаОшибки Из ТаблицаОшибокАПК Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		// Выберем из всей таблицы ошибок проверки только те ошибки, которые нужно регистрировать в СППР.
		Если (СтрокаОшибки.Состояние <> Перечисления.СостояниеОшибки.Зарегистрирована)
		 ИЛИ (НЕ МассивСодержитЭлемент(ПравилаПроверки, СтрокаОшибки.Правило)) Тогда
			Продолжить; // эту ошибку не регистрируем в СППР.
		КонецЕсли;
		
		// Добавим в таблицу для регистрации в СППР.
		СтрокаСППР = ОшибкиДляСППР.Добавить();
		СтрокаСППР.ИндексЗаписи = ТаблицаОшибокАПК.Индекс(СтрокаОшибки);
		ЗаполнитьЗначенияСвойств(СтрокаСППР, СтрокаОшибки);
		СтрокаСППР.ИмяОбъекта = СтрокаСППР.Объект.Путь;
		
		// Заполним ответственного за метаданные.
		Если НЕ ЗначениеЗаполнено(СтрокаСППР.Ответственный) Тогда
			СтрокаСППР.Ответственный = ПолучитьОбъектПоНаследству(СтрокаСППР.Объект).Ответственный;
		КонецЕсли;
		
		// Добавим строку в таблицу ответственных АПК за объекты метаданных.
		СтрокаМетаданных = ТаблицаОтветственных.Найти(СтрокаСППР.ИмяОбъекта, "Объект");
		Если СтрокаМетаданных = Неопределено Тогда
			
			СтрокаМетаданных = ТаблицаОтветственных.Добавить();
			
			СтрокаМетаданных.Объект = СтрокаСППР.ИмяОбъекта;
			Если ПолучатьОтветственныхЗаМетаданныеИзСППР Тогда
				СтрокаМетаданных.ОтветственныйАПК = Новый Структура("Имя, УИД", "", ""); // пока неизвестно
			Иначе
				СтрокаМетаданных.ОтветственныйАПК =
					Новый Структура(
						"Имя, УИД",
						СокрЛП(СтрокаСППР.Ответственный), ИдентификаторПоСсылке(СтрокаСППР.Ответственный));
			КонецЕсли;
			
		КонецЕсли;
		
		СписокНомеровОшибокОтправленныхВСППР.Добавить(СтрокаОшибки.Номер);
		
	КонецЦикла;
	
	// П.2
	// Получим ответственных за метаданные из СППР.
	Ответ = Прокси.GetMetadataResponsibles(ИмяКонфигурацииСППР, ВернутьХранилищеЗначения(ТаблицаОтветственных));
	Попытка
		ПроверитьРезультатОперацииВебСервиса(Ответ, НСтр("ru='Метод GetMetadataResponsibles'"));
	Исключение
		Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, ТекстОшибкиИнтеграцииССППР,
			ЖурналПроверки, ТаблицаЖурнала);
		СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
		Возврат;
	КонецПопытки;
	
	// В таблицу добавятся новые колонки:
	//  ОбъектСППР - Структура (Имя = имя объекта метаданных в СППР, УИД = идентификатор объекта метаданных в СППР),
	//  ОтветственныйСППР - Структура (Имя = имя пользователя в СППР, УИД = идентификатор пользователя в СППР).
	ТаблицаОтветственных = Ответ.Получить();
	
	// Дополним данные в таблице ошибок из СППР.
	Для Каждого СтрокаСППР Из ОшибкиДляСППР Цикл
		
		СтрокаМетаданных = ТаблицаОтветственных.Найти(СтрокаСППР.ИмяОбъекта, "Объект");
		
		СтрокаСППР.ИмяОбъектСППР 		= СтрокаМетаданных.ОбъектСППР.Имя;
		СтрокаСППР.УИДОбъектСППР 		= СтрокаМетаданных.ОбъектСППР.УИД;
		СтрокаСППР.ИмяОтветственныйСППР = СтрокаМетаданных.ОтветственныйСППР.Имя;
		СтрокаСППР.УИДОтветственныйСППР = СтрокаМетаданных.ОтветственныйСППР.УИД;
		
	КонецЦикла;
	
	// П.3
	// Сгруппируем ошибки СППР.
	ГруппироватьОшибкиПоОтветственному =
		(ГруппироватьОшибкиПоОтветственному = Перечисления.ВидыГруппировокСППР.ПоНазваниюОшибкиИОтветственному);
	
	Если ГруппироватьОшибкиПоОтветственному Тогда
		// По правилу и ответственному.
		ПоляГруппировки = "Ошибка, УИДОтветственныйСППР, ИмяОтветственныйСППР";
	Иначе
		// По правилу и объекту метаданных.
		ПоляГруппировки = "Ошибка, УИДОтветственныйСППР, ИмяОтветственныйСППР, УИДОбъектСППР, ИмяОбъектСППР";
	КонецЕсли;
	
	ТаблицаЗначенийГруппировки = ОшибкиДляСППР.Скопировать(, ПоляГруппировки);
	ТаблицаЗначенийГруппировки.Свернуть(ПоляГруппировки, "");
	ТаблицаЗначенийГруппировки.Сортировать(ПоляГруппировки);
	
	ВерсияКонфигурации = ?(ЗначениеЗаполнено(ВерсияКонфигурацииСППР), ВерсияКонфигурацииСППР, Версия.Наименование);
	
	// Подготовим данные, общие для всех ошибок СППР.
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяКонфигурации", ИмяКонфигурацииСППР);
	СтруктураДанных.Вставить("ВерсияКонфигурации", ВерсияКонфигурации);
	СтруктураДанных.Вставить("ДатаСоздания", Дата);
	СтруктураДанных.Вставить("ДополнениеКТекстуОшибки", СокрЛП(ДополнениеКТекстуОшибкиСППР));
	
	ОбщиеДанные = ВернутьХранилищеЗначения(СтруктураДанных);
	
	// Заполним данные для каждой ошибки.
	Для Каждого ЗначениеГруппировки Из ТаблицаЗначенийГруппировки Цикл
		
		СтруктураПоиска = Новый Структура(ПоляГруппировки);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЗначениеГруппировки);
		
		СтрокиСППР = ОшибкиДляСППР.НайтиСтроки(СтруктураПоиска); // массив ошибок АПК для одной ошибки СППР
		
		НовСтр = СгруппированныеОшибки.Добавить();
		НовСтр.Наименование = СтруктураПоиска.Ошибка.Наименование;
		
		КритичностьОшибки = СтруктураПоиска.Ошибка.Критичность;
		Если КритичностьОшибки = Перечисления.УровниКритичностиОшибок.Обязательно Тогда
			НовСтр.СрочностьИсправления = "Немедленно";
		ИначеЕсли КритичностьОшибки = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
			НовСтр.СрочностьИсправления = "ЖелательноБыстрее";
		Иначе
			НовСтр.СрочностьИсправления = "ВПлановомПорядке";
		КонецЕсли;
		
		Если НЕ ГруппироватьОшибкиПоОтветственному И НЕ ПустаяСтрока(СтруктураПоиска.ИмяОбъектСППР) Тогда
			НовСтр.Наименование = НовСтр.Наименование + " (" + СтруктураПоиска.ИмяОбъектСППР + ")";
		КонецЕсли;
		
		НовСтр.УИДОтветственного = СтруктураПоиска.УИДОтветственныйСППР;
		
		НовСтр.ОбъектыСППР 			= Новый Соответствие;
		НовСтр.СлужебноеНомераСтрок = Новый Массив;
		Для Каждого СтрокаСППР Из СтрокиСППР Цикл
			НовСтр.ОбъектыСППР.Вставить(СтрокаСППР.УИДОбъектСППР);
			НовСтр.СлужебноеНомераСтрок.Добавить(ОшибкиДляСППР.Индекс(СтрокаСППР));
		КонецЦикла;
		
	КонецЦикла;
	
	// П.4
	// Зарегистрируем ошибки в СППР.
	Ответ = Прокси.RegisterErrors(ОбщиеДанные, ВернутьХранилищеЗначения(СгруппированныеОшибки));
	Попытка
		ПроверитьРезультатОперацииВебСервиса(Ответ, НСтр("ru='Метод RegisterErrors'"));
	Исключение
		Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, ТекстОшибкиИнтеграцииССППР,
			ЖурналПроверки, ТаблицаЖурнала);
		СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
		Возврат;
	КонецПопытки;
	
	// В таблицу добавится новая колонка УИДОшибки - идентификатор зарегистрированной ошибки СППР.
	СгруппированныеОшибки = Ответ.Получить();
	
	// Заполним идентификаторы ошибок СППР и пользователя СППР в таблице ошибок АПК.
	Для Каждого СтрокаОшибки Из СгруппированныеОшибки Цикл
		
		Для Каждого НомерСтрокиОшибки Из СтрокаОшибки.СлужебноеНомераСтрок Цикл
			
			СтрокаСППР = ОшибкиДляСППР.Получить(НомерСтрокиОшибки);
			СтрокаАПК  = ТаблицаОшибокАПК.Получить(СтрокаСППР.ИндексЗаписи);
			
			СтрокаАПК.ВнешнийИдентификаторОшибки = СтрокаОшибки.УИДОшибки;
			СтрокаАПК.Ответственный 			 = НайтиПользователя(СтрокаСППР.ИмяОтветственныйСППР);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Текст = НСтр("ru='Регистрация ошибок конфигурации в СППР завершена'");
	Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
	СтруктураПроверки.Вставить("СписокНомеровОшибокОтправленныхВСППР", СписокНомеровОшибокОтправленныхВСППР);
	
КонецПроцедуры

// Регистрирует найденные ошибки АПК в СППР, группировка и маршрутизация ошибок, а также контроль дублей ошибок
// при этом сценарии осуществляются на стороне СППР, информацию об этих ошибках сохранять в АПК не надо.
//
Процедура ЗарегистрироватьОшибкиСППРБезГруппировки(СтруктураПроверки, ТаблицаОшибокАПК)
	
	Конфигурация    = СтруктураПроверки.Конфигурация;
	Версия          = СтруктураПроверки.Версия;
	ЖурналПроверки  = СтруктураПроверки.ЖурналПроверки;
	ТаблицаЖурнала   = СтруктураПроверки.ТаблицаЖурнала;
	Дата            = СтруктураПроверки.Дата;
	ПравилаПроверки = СтруктураПроверки.ПравилаПроверки;
	
	ВерсияКонфигурацииСППР                  = СтруктураПроверки.ВерсияКонфигурацииСППР;
	ГруппироватьОшибкиПоОтветственному      = СтруктураПроверки.ГруппироватьОшибкиПоОтветственному;
	ДополнениеКТекстуОшибкиСППР             = СтруктураПроверки.ДополнениеКТекстуОшибкиСППР;
	ИмяКонфигурацииСППР                     = СтруктураПроверки.ИмяКонфигурацииСППР;
	ПолучатьОтветственныхЗаМетаданныеИзСППР = СтруктураПроверки.ПолучатьОтветственныхЗаМетаданныеИзСППР;
	
	КонфигурацияНаименование = Конфигурация.Наименование;
	
	Текст = НСтр("ru='Начало регистрации ошибок конфигурации в СППР'");
	Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
	
	ТекстОшибкиИнтеграцииССППР =
		НСтр("ru='Ошибки проверки конфигурации в СППР не зарегистрированы (см. журнал регистрации)'");
	
	Попытка
		Прокси = ИнтеграцияССППРПовтИсп.ПолучитьПрокси();
	Исключение
		Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, ТекстОшибкиИнтеграцииССППР,
			ЖурналПроверки, ТаблицаЖурнала);
		СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
		Возврат;
	КонецПопытки;
	
	ВерсияКонфигурации = ?(ЗначениеЗаполнено(ВерсияКонфигурацииСППР), ВерсияКонфигурацииСППР, Версия.Наименование);
	
	// Подготовим данные, общие для всех ошибок СППР.
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяКонфигурации", ИмяКонфигурацииСППР);
	СтруктураДанных.Вставить("ВерсияКонфигурации", ВерсияКонфигурации);
	СтруктураДанных.Вставить("ДатаСоздания", Дата);
	СтруктураДанных.Вставить("ДополнениеКТекстуОшибки", СокрЛП(ДополнениеКТекстуОшибкиСППР));
	
	ОбщиеДанные = ВернутьХранилищеЗначения(СтруктураДанных);
	
	Если ТаблицаОшибокАПК.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНомеровОшибокОтправленныхВСППР = Новый СписокЗначений;
	
	ВременнаяТаблицаОшибок = ТаблицаОшибокАПК.СкопироватьКолонки("Правило,МестоОбнаружения,Объект,Ошибка,Уточнение");
	Для Каждого СтрокаОшибки Из ТаблицаОшибокАПК Цикл
		
		// Выберем из всей таблицы ошибок проверки только те ошибки, которые нужно регистрировать в СППР.
		Если (СтрокаОшибки.Состояние <> Перечисления.СостояниеОшибки.Зарегистрирована)
		 ИЛИ (НЕ МассивСодержитЭлемент(ПравилаПроверки, СтрокаОшибки.Правило)) Тогда
			Продолжить; // эту ошибку не регистрируем в СППР.
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОшибок.Добавить(), СтрокаОшибки);
		
		СписокНомеровОшибокОтправленныхВСППР.Добавить(СтрокаОшибки.Номер);
		
	КонецЦикла;
	
	ОписаниеСтроки200 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200));
	ОписаниеСтроки50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ВременнаяТаблицаОшибок.Колонки.Добавить("ПолноеИмяОбъекта", ОписаниеСтроки200);
	ВременнаяТаблицаОшибок.Колонки.Добавить("СрочностьИсправления", ОписаниеСтроки50);
	
	Для Каждого СтрокаОшибки Из ВременнаяТаблицаОшибок Цикл
		
		СтрокаОшибки.ПолноеИмяОбъекта = СтрокаОшибки.Объект.Путь;
		
		КритичностьОшибки = СтрокаОшибки.Ошибка.Критичность;
		Если КритичностьОшибки = Перечисления.УровниКритичностиОшибок.Обязательно Тогда
			СтрокаОшибки.СрочностьИсправления = "Немедленно";
		ИначеЕсли КритичностьОшибки = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
			СтрокаОшибки.СрочностьИсправления = "ЖелательноБыстрее";
		Иначе
			СтрокаОшибки.СрочностьИсправления = "ВПлановомПорядке";
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьОшибкиСсылкамиНаСтандартыИСрочностью(ВременнаяТаблицаОшибок);
	
	// Приведение объектов, правил и ошибок к их наименованиям
	// с соответствующими преобразованиями в структуре таблицы.
	МассивКолонок = Новый Массив();
	МассивКолонок.Добавить("Правило");
	МассивКолонок.Добавить("Объект");
	МассивКолонок.Добавить("Ошибка");
	
	Для Каждого ИмяКолонки Из МассивКолонок Цикл
		ВыгруженныеДанные = ВременнаяТаблицаОшибок.ВыгрузитьКолонку(ИмяКолонки);
		ВременнаяТаблицаОшибок.Колонки.Удалить(ИмяКолонки);
		
		ВременнаяТаблицаОшибок.Колонки.Добавить(ИмяКолонки, ОписаниеСтроки200);
		Для Счетчик = 0 По ВыгруженныеДанные.Количество() - 1 Цикл
			ВременнаяТаблицаОшибок[Счетчик][ИмяКолонки] = ВыгруженныеДанные[Счетчик].Наименование
		КонецЦикла;
	КонецЦикла;
	
	ВременныйМассивВидовОшибок = ВременнаяТаблицаОшибок.ВыгрузитьКолонку("Ошибка");
	
	МассивВидовОшибок = Новый Массив;
	Для Каждого ВидОшибки Из ВременныйМассивВидовОшибок Цикл
		Если МассивВидовОшибок.Найти(ВидОшибки) = Неопределено Тогда
			МассивВидовОшибок.Добавить(ВидОшибки);
		КонецЕсли;
	КонецЦикла;
	
	ВременныйМассивВидовОшибок.Очистить();
	
	ПараметрыОтбораОшибок = Новый Структура;
	Для Каждого ВидОшибки Из МассивВидовОшибок Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ПараметрыОтбораОшибок.Вставить("Ошибка", ВидОшибки);
		
		СписокОшибокПоВиду = ВременнаяТаблицаОшибок.НайтиСтроки(ПараметрыОтбораОшибок);
		
		ОтправляемаяТаблица = ВременнаяТаблицаОшибок.Скопировать(СписокОшибокПоВиду);
		
		Ответ = Прокси.RegisterErrors(ОбщиеДанные, ВернутьХранилищеЗначения(ОтправляемаяТаблица));
		Попытка
			ПроверитьРезультатОперацииВебСервиса(Ответ, НСтр("ru='Метод RegisterErrors'"));
		Исключение
			Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, ТекстОшибкиИнтеграцииССППР,
				ЖурналПроверки, ТаблицаЖурнала);
			СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
		КонецПопытки;
		
	КонецЦикла;
	
	СтруктураПроверки.Вставить("ОбнаруженоОшибок", ВременнаяТаблицаОшибок.Количество());
	
	// Ошибки в базе АПК регистрировать не нужно, поэтому очистим таблицу ошибок.
	ТаблицаОшибокАПК.Очистить();
	
	Текст = НСтр("ru='Регистрация ошибок конфигурации в СППР завершена'");
	Зафиксировать(КонфигурацияНаименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	СтруктураПроверки.Вставить("ЖурналПроверки", ЖурналПроверки);
	СтруктураПроверки.Вставить("СписокНомеровОшибокОтправленныхВСППР", СписокНомеровОшибокОтправленныхВСППР);
	
КонецПроцедуры

#КонецОбласти
