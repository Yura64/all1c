
#Область СлужебныеПроцедурыИФункции

Процедура ЗапускПроверкиИзКоманднойСтроки() Экспорт
	
	ФайлПараметровКонфигурации = ПараметрЗапуска;
	
	Если НЕ ФайлСуществует(ФайлПараметровКонфигурации) Тогда
		Сообщить(НСтр("ru='Неизвестный параметр запуска'"));
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ПараметрыПроверки = ПрочитатьДанныеИзФайла(ФайлПараметровКонфигурации, ТекстОшибки);
	
	ФайлРезультатовПроверки = ПараметрыПроверки.ФайлРезультатовПроверки;
	ФайлЛога = ПараметрыПроверки.ФайлЛога;
	
	Если НЕ ЗначениеЗаполнено(ФайлРезультатовПроверки) Тогда
		Сообщить(НСтр("ru='Не указан файл для выгрузки результатов проверки.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Ошибка при чтении файла с параметрами запуска: %1'"), ТекстОшибки);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьПроверкуКонфигурацииИзКоманднойСтроки(ФайлПараметровКонфигурации, ПараметрыПроверки);
	
	Если Результат.Успешно Тогда
		РезультатПроверки = НСтр("ru='Проверка выполнена.'");
	Иначе
		РезультатПроверки = НСтр("ru='Не удалось выполнить проверку.'");
	КонецЕсли;
	
	ТекстОшибки = Результат.ТекстОшибки;
	ЖурналПроверки = Результат.ЖурналПроверки;
	
	ТекстФайлаСЛогомПроверки = СтрШаблон(НСтр("ru='%1%2%3%2Журнал проверки:%2%4'"), РезультатПроверки, Символы.ПС,
		ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, ""), ЖурналПроверки);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(ТекстФайлаСЛогомПроверки);
	Попытка
		ТекстовыйДокумент.Записать(ФайлЛога);
	Исключение
	КонецПопытки;
	
	// Запись результатов проверки в JUnit файл.
	ЗагрузитьРезультатыПроверкиВФайл(Результат, ФайлРезультатовПроверки);
	
	ПрекратитьРаботуСистемы();
	
КонецПроцедуры

Функция ПрочитатьДанныеИзФайла(ФайлСПараметрамиЗапуска, ТекстОшибки)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ФайлСПараметрамиЗапуска", ФайлСПараметрамиЗапуска);
	СтруктураВозврата.Вставить("ФайлНастроекПроверки", "");
	СтруктураВозврата.Вставить("ФайлСпискаЗагружаемыхОбъектов", "");
	СтруктураВозврата.Вставить("КаталогЗагрузки", "");
	СтруктураВозврата.Вставить("ФайлОсобенностей", "");
	СтруктураВозврата.Вставить("ФайлРезультатовПроверки", "");
	СтруктураВозврата.Вставить("ФайлЛога", "");
	
	ЭтоАрхив = Ложь;
	ИмяФайлаАрхива = "";
	Файл = Новый Файл(ФайлСПараметрамиЗапуска);
	Если Файл.Расширение = ".zip" Тогда
		СтруктураВозврата.ЭтоАрхив = Истина;
		ИмяФайлаАрхива = ИмпортЭкспортКлиент.ПолучитьФайлИзАрхива(ФайлСПараметрамиЗапуска);
		СтруктураВозврата.ФайлСПараметрамиЗапуска = ИмяФайлаАрхива;
		Если ПустаяСтрока(ИмяФайлаАрхива) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось разархивировать файл: %1'"), ФайлСПараметрамиЗапуска);
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(СтруктураВозврата.ФайлСПараметрамиЗапуска);
	
	Пока ЧтениеXML.Прочитать() Цикл
		ТипУзла = ЧтениеXML.ТипУзла;
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзла = ЧтениеXML.Имя;
			Если СтруктураВозврата.Свойство(ИмяУзла) Тогда
				ЧтениеXML.Прочитать();
				СтруктураВозврата[ИмяУзла] = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоАрхив Тогда
		ФайлУдалить(ИмяФайлаАрхива);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ВыполнитьПроверкуКонфигурацииИзКоманднойСтроки(ФайлПараметровКонфигурации, ПараметрыПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ЖурналПроверки", "");
	Результат.Вставить("Конфигурация", Неопределено);
	Результат.Вставить("ДокументПроверки", Неопределено);
	
	ТекстОшибки = "";
	
	// Создание и заполнение элемента справочника "Конфигурация".
	ФайлНастроекПроверки = ПараметрыПроверки.ФайлНастроекПроверки;
	ЭтоАрхив = Ложь;
	ИмяФайлаАрхива = "";
	Файл = Новый Файл(ФайлНастроекПроверки);
	Если Файл.Расширение = ".zip" Тогда
		ЭтоАрхив = Истина;
		ИмяФайлаАрхива = ИмпортЭкспортКлиент.ПолучитьФайлИзАрхива(ФайлНастроекПроверки);
		Если ПустаяСтрока(ИмяФайлаАрхива) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось разархивировать файл: %1'"), ФайлНастроекПроверки);
			Возврат ТекстОшибки;
		КонецЕсли;
		ФайлНастроекПроверки = ИмяФайлаАрхива;
	КонецЕсли;
	
	ОбъектКонфигурации = Неопределено;
	ТекстОшибки = ЗапускИзКоманднойСтроки.ЗаполнитьСведенияОКонфигурацииИзФайлаXML(ОбъектКонфигурации,
		ФайлНастроекПроверки);
	
	Если ЭтоАрхив Тогда
		ФайлУдалить(ИмяФайлаАрхива);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Конфигурация = ОбъектКонфигурации.Ссылка;
	Результат.Конфигурация = Конфигурация;
	
	// Формирование соответствия путей объектов, переданных в list-файле
	СоответствиеПереданныхОбъектов = СформироватьСоответствиеОбъектовПроверкиИзФайла(
		ПараметрыПроверки.ФайлСпискаЗагружаемыхОбъектов, ПараметрыПроверки.КаталогЗагрузки);
	
	// Запуск проверки.
	ФормаЗапускаПроверки = ПолучитьФорму("Обработка.ЗапускПроверки.Форма",,, Истина);
	ФормаЗапускаПроверки.ОбработкаОбъект.ФайлОсобенностей						 = ПараметрыПроверки.ФайлОсобенностей;
	ФормаЗапускаПроверки.ОбработкаОбъект.СоответствиеВключенныхВПроверкуОбъектов = СоответствиеПереданныхОбъектов;
	ФормаЗапускаПроверки.ОбработкаОбъект.ПоказыватьПредупреждения				 = Ложь;
	ФормаЗапускаПроверки.Конфигурация											 = Конфигурация;
	ФормаЗапускаПроверки.РегистрироватьВсеОшибкиКакОсобенности					 = Ложь;
	
	ФормаЗапускаПроверки.Открыть();
	ТекстОшибки = ФормаЗапускаПроверки.ВыполнитьПроверку();
	ФормаЗапускаПроверки.Закрыть();
	
	ДокументПроверки = ФормаЗапускаПроверки.ПроверкаВерсии;
	Результат.ЖурналПроверки = ДокументПроверки.ЖурналПроверки;
	
	Результат.ДокументПроверки = ДокументПроверки;
	Результат.Успешно = (ПустаяСтрока(ТекстОшибки));
	Результат.ТекстОшибки = ТекстОшибки;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСоответствиеОбъектовПроверкиИзФайла(ФайлСпискаЗагружаемыхФайлов, КаталогЗагрузки)
	
	Соответствие = Новый Соответствие;
	
	Если ПустаяСтрока(ФайлСпискаЗагружаемыхФайлов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ФайлСуществует(ФайлСпискаЗагружаемыхФайлов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлСпискаЗагружаемыхФайлов);
	
	ИменаОбъектовТекстом = ТекстовыйДокумент.ПолучитьТекст();
	ИменаОбъектовТекстом = СтрЗаменить(ИменаОбъектовТекстом, КаталогЗагрузки, "");
	МассивИмен = СтрРазделить(ИменаОбъектовТекстом, Символы.ПС, Ложь);
	
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	
	Для Каждого ИмяОбъекта Из МассивИмен Цикл
		ПутьОбъекта = ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(ТаблицаТиповОбъектов, ИмяОбъекта);
		Соответствие.Вставить(ПутьОбъекта, Истина);
	КонецЦикла;
	
	Если Соответствие.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Соответствие;
	
КонецФункции

Функция ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(ТаблицаТиповОбъектов, ИмяОбъекта)
	
	Разделитель = ".";
	КолонкаИмени = "Имя";
	
	// Очищаем каталог "Ext" из пути объекта
	Если СтрНачинаетсяС(ИмяОбъекта, "Ext\") Тогда
		// Для файлов конфигурации, например "Configuration.xml", каталог "Ext" лежит в корне каталога выгрузки,
		// удалим его из начала пути, взяв оставшуюся часть по длине строки "Ext\".
		ИмяОбъекта = Сред(ИмяОбъекта, СтрДлина("Ext\") + 1);
	Иначе
		// Для файлов всех остальных объектов очистим каталог "Ext" заменой на "\".
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "\Ext\", "\");
	КонецЕсли;
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "\", Разделитель);
	ИмяОбъекта = ПолучитьИмяФайлаБезРасширения(ИмяОбъекта);
	
	МассивПутиАнгл = СтрРазделить(ИмяОбъекта, Разделитель, Ложь);
	КоличествоЭлементовПутиАнгл = МассивПутиАнгл.Количество();
	
	// Для файлов конфигурации, лежащих в самом каталоге выгрузки, задаем имя объекта как "Конфигурация" (или "Configuration").
	Если КоличествоЭлементовПутиАнгл < 2 Тогда
		Возврат ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, "Конфигурация", "Имя", КолонкаИмени);
	КонецЕсли;
	
	ПутьФактический = "";
	
	// Для общих форм всегда берем 2 элемента пути, т.к. в пути к модулю будет 4 элемента пути, и объект определяется неправильно.
	Если СтрСравнить(МассивПутиАнгл[0], "CommonForms") = 0 Тогда
		КоличествоЭлементов = 2;
	Иначе
		КоличествоЭлементов = ?(КоличествоЭлементовПутиАнгл < 4, 2, 4);
	КонецЕсли;
	
	МассивПути = Новый Массив;
	Для Счетчик = 1 По КоличествоЭлементов Цикл
		
		ЭлементПути = МассивПутиАнгл[Счетчик - 1];
		// Для первого элемента пути ищем эквивалент на русском языке во множественном числе.
		Если Счетчик = 1 Тогда
			ЭлементПути = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ЭлементПути, "ИмяАнглМнФормы");
		// Если объектом является форма или макет, тогда из пути этого объекта удаляем
		// слово "Forms" или "Templates" соответственно, для того чтобы привести пути к тому виду,
		// как они хранятся в АПК.
		ИначеЕсли Счетчик = КоличествоЭлементов - 1
			И (СтрСравнить(ЭлементПути, "Forms") = 0 ИЛИ СтрСравнить(ЭлементПути, "Templates") = 0) Тогда
			Продолжить;
		// Если элемент пути стоит на нечетном месте (нумерация с 1) в имени файла,
		// то ищем его эквивалент на русском языке в единственном числе.
		ИначеЕсли Счетчик % 2 = 1 Тогда
			ЭлементПути = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ЭлементПути, "ИмяАнглМнФормы", КолонкаИмени);
		КонецЕсли;
		
		// Четные элементы пути оставляем как есть - это наименования объектов метаданных.
		МассивПути.Добавить(ЭлементПути);
		
	КонецЦикла;
	
	ПутьФактический = СтрСоединить(МассивПути, Разделитель);
	
	Возврат ПутьФактический;
	
КонецФункции

Функция ПолучитьИмяФайлаБезРасширения(ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Возврат Файл.ИмяБезРасширения;
	
КонецФункции

Процедура ЗагрузитьРезультатыПроверкиВФайл(РезультатПроверки, ФайлРезультата)
	
	ЭтоАрхив = Ложь;
	Файл = Новый Файл(ФайлРезультата);
	Если Файл.Расширение = ".zip" Тогда
		ЭтоАрхив = Истина;
		ИмяФайлаАрхива = ФайлРезультата;
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	
	ЗапускИзКоманднойСтроки.ВыгрузитьОтчетВыполненияПроверкиВФорматJUnitXML(РезультатПроверки, ФайлРезультата);
	
	Если ЭтоАрхив Тогда
		ИмпортЭкспортКлиент.ДобавитьФайлВАрхив(ИмяФайлаАрхива, ФайлРезультата);
		
		Попытка
			УдалитьФайлы(ФайлРезультата);
		Исключение
			Событие = НСтр("ru='Удаление временных файлов'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Сообщение = СтрШаблон(НСтр("ru='Не удалось удалить файл ""%1"" по причине:
				|%2'"), ФайлРезультата, ОписаниеОшибки);
			
			ЗаписьЖурналаРегистрации(Событие,,,, Сообщение);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти