
#Область ПолучениеСведенийИзПроверяемойКонфигурации

// Процедура запускает проверяемую конфигурацию в режиме конфигуратора, чтобы выгрузить файлы XML
// самой конфигурации или расширения.
//
Процедура ЗапуститьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, КаталогКонфигурации, Пользователь, Пароль,
	КаталогВыгрузки, ФайлЛога, ИмяРасширения = "", ДождатьсяЗавершения = Ложь) Экспорт
	
	#Если Клиент Тогда
	
	// Определяем строку запуска платформы.
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	// Выгружаем конфигурацию в файлы xml.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /DumpConfigToFiles ""%5"""
		+ " %6 /Out ""%7"" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		КаталогКонфигурации,
		Пользователь,
		Пароль,
		КаталогВыгрузки,
		?(ЗначениеЗаполнено(ИмяРасширения), "-Extension " + ИмяРасширения, ""),
		ФайлЛога);
	
	ЗапуститьПриложение(СтрокаЗапуска,, ДождатьсяЗавершения);
	Состояние("");
	
	#КонецЕсли
	
КонецПроцедуры

// Процедура запускает проверяемую конфигурацию в режиме конфигуратора, чтобы выгрузить файлы XML
// всех расширений.
//
Функция ВыгрузитьРасширенияВФайлыXML(Конфигурация, КаталогКонфигурации, Пользователь, Пароль, КаталогВыгрузки) Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
		
	#Если Клиент Тогда
	
	// Определяем строку запуска платформы.
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	// Выгружаем конфигурацию в файлы xml.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /DumpConfigToFiles ""%5"""
		+ " -AllExtensions /Out ""%6"""
		+ " /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		КаталогКонфигурации,
		Пользователь,
		Пароль,
		КаталогВыгрузки,
		ФайлЛога);
	
	КодВозврата = Неопределено;
	
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	Состояние("");
	
	ФайлУдалить(ФайлЛога);
	Возврат КодВозврата = 0;
	
	#КонецЕсли

КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора, чтобы выгрузить тексты модулей.
// Возвращает пустую строку, если выгрузка удачна, иначе лог выгрузки.
//
Функция ВыгрузитьМодули(Конфигурация, КаталогКонфигурации, Пользователь, Пароль, КаталогВыгрузки,
	ИмяРасширения = "") Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	#Если Клиент Тогда
	
	// Определяем строку запуска платформы.
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	// Выгружаем модули.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /DumpConfigFiles ""%5"" -Module %6 /Out ""%7"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		КаталогКонфигурации,
		Пользователь,
		Пароль,
		КаталогВыгрузки,
		?(ЗначениеЗаполнено(ИмяРасширения), "-Extension " + ИмяРасширения, ""),
		ФайлЛога);
	
	КодВозврата = Неопределено;
	
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	Состояние("");
	
	Если КодВозврата = 0 Тогда
		ФайлУдалить(ФайлЛога);
		Возврат "";
	КонецЕсли;
	
	#КонецЕсли
	
	Статус = ФайлПолучитьТекст(ФайлЛога);
	Возврат Статус;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора, чтобы выгрузить макеты.
// Возвращает пустую строку, если выгрузка удачна, иначе лог выгрузки.
//
Функция ВыгрузитьМакеты(Конфигурация, КаталогКонфигурации, Пользователь, Пароль, КаталогВыгрузки, ИмяРасширения = "") Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	#Если Клиент Тогда
		
	// Определяем строку запуска платформы.
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	// Выгружаем модули.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /DumpConfigFiles ""%5"" -Templates"
		+ " %6 /Out ""%7"" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		КаталогКонфигурации,
		Пользователь,
		Пароль,
		КаталогВыгрузки,
		?(ЗначениеЗаполнено(ИмяРасширения), "-Extension " + ИмяРасширения, ""),
		ФайлЛога);
	
	КодВозврата = Неопределено;
	
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	Состояние("");
	
	Если КодВозврата = 0 Тогда
		ФайлУдалить(ФайлЛога);
		Возврат "";
	КонецЕсли;
	
	#КонецЕсли
	
	Статус = ФайлПолучитьТекст(ФайлЛога);
	Возврат Статус;
	
КонецФункции

// Процедура запускает проверяемую конфигурацию в режиме конфигуратора,
// чтобы выполнить платформенную проверку конфигурации или расширений и выгрузить отчет в файл.
//
Процедура ЗапуститьПлатформеннуюПроверку(Конфигурация, КаталогКонфигурации, Пользователь, Пароль,
	ИмяФайлаРезультата, ИмяРасширения = "") Экспорт
	
	#Если Клиент Тогда
	
	РежимИспользованияМодальности = РаботаСВнешнимСоединением.ПолучитьРежимИспользованияМодальности(Конфигурация,
		КаталогКонфигурации, Пользователь, Пароль);
	
	// Определяем строку запуска платформы.
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	ВерсияПлатформы = ПолучитьВерсиюПлатформыДляЗапуска(СтрокаЗапускаПлатформы);
	
	КлючиПлатформеннойПроверки = ""
		+ " -ConfigLogIntegrity"
		+ " -IncorrectReferences"
		+ " -ThinClient"
		+ " -WebClient"
		+ " -Server"
		+ " -ExternalConnection"
		+ " -ExternalConnectionServer"
		+ " -ThickClientManagedApplication"
		+ " -ThickClientServerManagedApplication"
		+ " -ThickClientOrdinaryApplication"
		+ " -ThickClientServerOrdinaryApplication"
		+ " -DistributiveModules"
		+ " -UnreferenceProcedures"
		+ " -HandlersExistence"
		+ " -EmptyHandlers"
		+ " -ExtendedModulesCheck"
		+ ?(РежимИспользованияМодальности, "", " -CheckUseModality")
		+ ?(РелизыПоПорядку("8.3.11.0", ВерсияПлатформы), " -CheckUseSynchronousCalls", "")
		+ ?(ЗначениеЗаполнено(ИмяРасширения), " -Extension " + ИмяРасширения, "");
	
	// Запускаем платформенную проверку.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /Out ""%5"" /CheckConfig %6"
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		КаталогКонфигурации,
		Пользователь,
		Пароль,
		ИмяФайлаРезультата,
		КлючиПлатформеннойПроверки);
	
	ЗапуститьПриложение(СтрокаЗапуска);
	Состояние("");
	
	#КонецЕсли
	
КонецПроцедуры

// Функция запускает проверяемую конфигурацию в режиме конфигуратора,
// подключается к хранилищу, обновляется из него и обновляет информационную базу.
//
// Параметры:
//   ПараметрыЗапуска - Структура - структура параметров запуска:
//     Конфигурация           - СправочникСсылка.Конфигурации - ссылка на проверяемую конфигурацию;
//     СтрокаЗапускаПлатформы - Строка                        - путь к файлу платформы для запуска;
//     КаталогКонфигурации    - Строка                        - путь к каталогу информационной базы проверяемой конфигурации;
//     Пользователь           - Строка                        - логин пользователя информационной базы;
//     Пароль                 - Строка                        - пароль пользователя информационной базы;
//     КаталогХранилища       - Строка                        - путь к каталогу хранилища конфигурации;
//     ПользовательХранилища  - Строка                        - логин пользователя хранилища;
//     ПарольХранилища        - Строка                        - пароль пользователя хранилища;
//     ПерезапуститьНаНеобходимойПлатформе - Булево - флаг перезапуска команды, если платформа не соответствует необходимой;
//     ПерезаписатьСтрокуЗапускаПлатформыКонфигурации - Булево - флаг перезаписи пути к файлу запуска платформы.
//
// Возвращаемое значение:
//   Структура - результат загрузки и обновления конфигурации из хранилища. Ключи и значения:
//     Успешно         - Булево - Истина, если загрузка и обновления прошли успешно; иначе - Ложь.
//     ТекстОшибки     - Строка - текст ошибки, если загрузить или обновить конфигурацию не удалось.
//
Функция ЗагрузитьКонфигурациюИзХранилищаИОбновить(ПараметрыЗапуска) Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	#Если Клиент Тогда
	
	// Определяем строку запуска платформы, сначала берем из параметров.
	СтрокаЗапускаПлатформы = ПараметрыЗапуска.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		// Если в параметрах не заполнена, то берем из конфигурации.
		СтрокаЗапускаПлатформы = ПараметрыЗапуска.Конфигурация.СтрокаЗапускаПлатформы;
	КонецЕсли;
	
	// Если в конфигурации пустая, то берем текущую.
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	// Обновление из хранилища.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /ConfigurationRepositoryF ""%5"""
		" /ConfigurationRepositoryN ""%6"" /ConfigurationRepositoryP ""%7"""
		" /ConfigurationRepositoryUpdateCfg -revised -force /UpdateDBCfg /Out ""%8"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПараметрыЗапуска.КаталогКонфигурации,
		ПараметрыЗапуска.Пользователь,
		ПараметрыЗапуска.Пароль,
		ПараметрыЗапуска.КаталогХранилища,
		ПараметрыЗапуска.ПользовательХранилища,
		ПараметрыЗапуска.ПарольХранилища,
		ФайлЛога);
	
	КодВозврата = Неопределено;
	
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда
		ФайлУдалить(ФайлЛога);
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;
	
	#КонецЕсли
	
	Результат.ТекстОшибки = ФайлПолучитьТекст(ФайлЛога);
	
	Если НЕ ПараметрыЗапуска.ПерезапуститьНаНеобходимойПлатформе Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗапуска.Вставить("ПерезапуститьНаНеобходимойПлатформе", Ложь);
	ПараметрыЗапуска.Вставить("ФункцияЗапуска", "ЗагрузитьКонфигурациюИзХранилищаИОбновить(ПараметрыЗапуска)");
	ПараметрыЗапуска.Вставить("ТекстЛога", Результат.ТекстОшибки);
	
	// Проверяем, что написано в логе, если платформа отличается от необходимой,
	// то проверяем наличие платформы на компьютере и пытаемся запустить ее.
	Результат = ПроверитьСтатусЗапускаПлатформыИПерезапустить(ПараметрыЗапуска);
	
	Возврат Результат;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора и принудительно отключает ее от хранилища.
//
Функция ОтключитьКонфигурациюОтХранилища(Конфигурация, КаталогКонфигурации, Пользователь = "", Пароль = "") Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	#Если Клиент Тогда
	
	// Определяем строку запуска платформы.
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	// Обновление из хранилища.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"""
		" /ConfigurationRepositoryUnbindCfg -force /Out ""%5"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		КаталогКонфигурации,
		Пользователь,
		Пароль,
		ФайлЛога);
	
	КодВозврата = Неопределено;
	
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда
		ФайлУдалить(ФайлЛога);
		Возврат "";
	КонецЕсли;
	
	#КонецЕсли
	
	Статус = ФайлПолучитьТекст(ФайлЛога);
	Возврат Статус;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора,
// подключается к хранилищу и формирует отчет по хранилищу во временный файл.
// В отчете производится поиск номера последней версии хранилища конфигурации и измененных объектов.
//
// Параметры:
//   ПараметрыЗапуска - Структура - структура параметров запуска:
//     Конфигурация           - СправочникСсылка.Конфигурации - ссылка на проверяемую конфигурацию;
//     СтрокаЗапускаПлатформы - Строка                        - путь к файлу платформы для запуска;
//     КаталогКонфигурации    - Строка                        - путь к каталогу информационной базы проверяемой конфигурации;
//     Пользователь           - Строка                        - логин пользователя информационной базы;
//     Пароль                 - Строка                        - пароль пользователя информационной базы;
//     КаталогХранилища       - Строка                        - путь к каталогу хранилища конфигурации;
//     ПользовательХранилища  - Строка                        - логин пользователя хранилища;
//     ПарольХранилища        - Строка                        - пароль пользователя хранилища;
//     ПерезапуститьНаНеобходимойПлатформе - Булево - флаг перезапуска команды, если платформа не соответствует необходимой;
//     ПерезаписатьСтрокуЗапускаПлатформыКонфигурации - Булево - флаг перезаписи пути к файлу запуска платформы.
//
// Возвращаемое значение:
//   Структура - результат получения номера последней версии конфигурации хранилища. Ключи и значения:
//     Успешно         - Булево - Истина, если версия получена успешно; иначе - Ложь.
//     ВерсияХранилища - Строка - строковое значение номера версии хранилища.
//     ТекстОшибки     - Строка - текст ошибки, если версию получить не удалось.
//
Функция ПолучитьВерсиюХранилищаИСписокИзмененныхОбъектов(ПараметрыЗапуска) Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	ФайлОтчетаПоХранилищу = ПолучитьИмяВременногоФайла("mxl");
	ВерсияХранилища = "";
	ТекущаяВерсияХранилища = ПараметрыЗапуска.ВерсияХранилищаССобраннымиДанными;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ВерсияХранилища", "");
	
	#Если Клиент Тогда
	
	// Определяем строку запуска платформы, сначала берем из параметров.
	СтрокаЗапускаПлатформы = ПараметрыЗапуска.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		// Если в параметрах не заполнена, то берем из конфигурации.
		СтрокаЗапускаПлатформы = ПараметрыЗапуска.Конфигурация.СтрокаЗапускаПлатформы;
	КонецЕсли;
	
	// Если в конфигурации пустая, то берем текущую.
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	// Обновление из хранилища.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /ConfigurationRepositoryF ""%5"""
		" /ConfigurationRepositoryN ""%6"" /ConfigurationRepositoryP ""%7"""
		" /ConfigurationRepositoryReport ""%8"" -NBegin %9 /Out ""%10"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПараметрыЗапуска.КаталогКонфигурации,
		ПараметрыЗапуска.Пользователь,
		ПараметрыЗапуска.Пароль,
		ПараметрыЗапуска.КаталогХранилища,
		ПараметрыЗапуска.ПользовательХранилища,
		ПараметрыЗапуска.ПарольХранилища,
		ФайлОтчетаПоХранилищу,
		Формат(ТекущаяВерсияХранилища + 1, "ЧГ=0"),
		ФайлЛога);
	
	КодВозврата = Неопределено;
	
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда
		
		Результат = ПолучитьВерсиюХранилищаИСписокИзмененныхОбъектовИзОтчета(ФайлОтчетаПоХранилищу, ТекущаяВерсияХранилища);
		Если НЕ Результат.Успешно Тогда
			ТекстОшибки = НСтр("ru='Не удалось получить номер версии хранилища конфигурации по причине:%1%2'");
			Результат.ТекстОшибки = СтрШаблон(ТекстОшибки, Символы.ПС, Результат.ТекстОшибки);
		КонецЕсли;
		
		ФайлУдалить(ФайлЛога);
		ФайлУдалить(ФайлОтчетаПоХранилищу);
		
		Возврат Результат;
		
	КонецЕсли;
	
	#КонецЕсли
	
	Результат.ТекстОшибки = ФайлПолучитьТекст(ФайлЛога);
	ФайлУдалить(ФайлОтчетаПоХранилищу);
	
	Если НЕ ПараметрыЗапуска.ПерезапуститьНаНеобходимойПлатформе Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗапуска.Вставить("ПерезапуститьНаНеобходимойПлатформе", Ложь);
	ПараметрыЗапуска.Вставить("ФункцияЗапуска", "ПолучитьВерсиюХранилищаИСписокИзмененныхОбъектов(ПараметрыЗапуска)");
	ПараметрыЗапуска.Вставить("ТекстЛога", Результат.ТекстОшибки);
	
	// Проверяем, что написано в логе, если платформа отличается от необходимой,
	// то проверяем наличие платформы на компьютере и пытаемся запустить ее.
	Результат = ПроверитьСтатусЗапускаПлатформыИПерезапустить(ПараметрыЗапуска);
	
	Возврат Результат;
	
КонецФункции

// Функция считывает указанный файл отчета по хранилищу в табличный документ
// и возвращает номер последней версии конфигурации хранилища и список измененных объектов.
//
// Параметры:
//   ФайлОтчетаПоХранилищу  - Строка - путь к файлу отчета по хранилищу.
//   ТекущаяВерсияХранилища - Строка - последняя проверенная версия хранилища.
//
// Возвращаемое значение:
//   Структура - результат получения номера последней версии конфигурации хранилища и списка измененных объектов.
//     Ключи и значения:
//       Успешно                  - Булево - Истина, если версия получена успешно; иначе - Ложь.
//       ВерсияХранилища          - Строка - строковое значение номера версии хранилища.
//       СписокИзмененныхОбъектов - Соответствие - список измененных объектов.
//       ТекстОшибки              - Строка - текст ошибки, если версию получить не удалось
//                                           или не удалось получить список измененных объектов.
//
Функция ПолучитьВерсиюХранилищаИСписокИзмененныхОбъектовИзОтчета(ФайлОтчетаПоХранилищу, ТекущаяВерсияХранилища)
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ВерсияХранилища", "");
	Результат.Вставить("СписокИзмененныхОбъектов", Неопределено);
	
	ТекстОшибки = "";
	ТабличныйДокумент = ПрочитатьТабличныйДокументПоИмениФайла(ФайлОтчетаПоХранилищу, ТекстОшибки);
	Если ТабличныйДокумент = Неопределено Тогда
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ПолучитьВерсиюИзХранилищаИзОтчета(ТабличныйДокумент, Результат);
	Если Результат.Успешно И ПустаяСтрока(Результат.ВерсияХранилища) Тогда
		Результат.ВерсияХранилища = ТекущаяВерсияХранилища;
	КонецЕсли;
	
	// Если текущая версия хранилища не заполнена, значит еще не было проверок хранилища,
	// необходимо проверить все объекты,
	// не нужно получать список измененных\добавленных\удаленных объектов из отчета.
	Если ТекущаяВерсияХранилища = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СписокИзмененныхОбъектов = Новый Соответствие;
	Результат.СписокИзмененныхОбъектов = СписокИзмененныхОбъектов;
	
	ПолучитьИзмененныеОбъектыИзОтчетаХранилища(ТабличныйДокумент, Результат);
	
	Возврат Результат;
	
КонецФункции

// Процедура получает номер последней версии конфигурации хранилища
//
// Параметры:
//   ТабличныйДокумент - Табличный документ - отчет хранилища.
//   Структура - результат получения номера последней версии конфигурации хранилища и списка измененных объектов.
//       Ключи и значения:
//       Успешно                  - Булево - Истина, если версия получена успешно; иначе - Ложь.
//       ВерсияХранилища          - Строка - строковое значение номера версии хранилища.
//       СписокИзмененныхОбъектов - Соответствие - список измененных объектов.
//       ТекстОшибки              - Строка - текст ошибки, если версию получить не удалось
//                                           или не удалось получить список измененных объектов
//
Процедура ПолучитьВерсиюИзХранилищаИзОтчета(ТабличныйДокумент, Результат)
	
	Попытка
		
		Область = ТабличныйДокумент.НайтиТекст("Версия:",,,, Истина, Ложь);
		Если Область = Неопределено Тогда
			// Если не найдена ячейка со значением "Версия:", значит после последней проверки, версия хранилища не поднималась.
			Результат.Успешно = Истина;
			Возврат;
		КонецЕсли;
		
		Верх = Область.Верх;
		Лево = Область.Лево;
		
		Область = ТабличныйДокумент.Область(Верх, Лево + 1, Верх, Лево + 1);
		ВерсияХранилища = Область.Текст;
		
		Если ПустаяСтрока(ВерсияХранилища) Тогда
			Результат.ТекстОшибки = НСтр("ru='В отчете по истории хранилища задана пустая последняя версия'");
		КонецЕсли;
		
		Результат.Успешно = Истина;
		Результат.ВерсияХранилища = ВерсияХранилища;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура получает список измененных объектов из хранилища
//
// Параметры:
//   ТабличныйДокумент - Табличный документ - отчет хранилища.
//   Структура - результат получения номера последней версии конфигурации хранилища и списка измененных объектов.
//       Ключи и значения:
//       Успешно                  - Булево - Истина, если версия получена успешно; иначе - Ложь.
//       ВерсияХранилища          - Строка - строковое значение номера версии хранилища.
//       СписокИзмененныхОбъектов - Соответствие - список измененных объектов.
//       ТекстОшибки              - Строка - текст ошибки, если версию получить не удалось.
//
Процедура ПолучитьИзмененныеОбъектыИзОтчетаХранилища(ТабличныйДокумент, Результат)
	
	Попытка
		
		СписокИзмененныхОбъектов = Результат.СписокИзмененныхОбъектов;
		
		ТипыОбъектов = ЗаполнитьТаблицуТиповОбъектов();
		
		ЗаполнениеСоответствияИзмененныхОбъектовИзОтчета(СписокИзмененныхОбъектов, ТабличныйДокумент, ТипыОбъектов,
			"Изменены:");
		ЗаполнениеСоответствияИзмененныхОбъектовИзОтчета(СписокИзмененныхОбъектов, ТабличныйДокумент, ТипыОбъектов,
			"Добавлены:");
		ЗаполнениеСоответствияИзмененныхОбъектовИзОтчета(СписокИзмененныхОбъектов, ТабличныйДокумент, ТипыОбъектов,
			"Удалены:");
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат.ТекстОшибки = Результат.ТекстОшибки + ?(ЗначениеЗаполнено(Результат.ТекстОшибки), Символы.ПС, "")
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет поиск областей в табличной документе и заполняет соответствие
//
Процедура ЗаполнениеСоответствияИзмененныхОбъектовИзОтчета(СписокИзмененныхОбъектов, ТабличныйДокумент, ТипыОбъектов,
	СтрокаПоиска)
	
	Область = Неопределено;
	
	Пока Истина Цикл
		Область = ТабличныйДокумент.НайтиТекст(СтрокаПоиска, Область,,, Истина);
		Если Область = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Верх = Область.Верх;
		Лево = Область.Лево + 1;
		
		Пока Истина Цикл
			ОбластьПути = ТабличныйДокумент.Область(Верх, Лево);
			ТекстОбласти = ОбластьПути.Текст;
			Если ПустаяСтрока(ТекстОбласти) Тогда
				Прервать;
			КонецЕсли;
			
			МассивПути = СтрРазделить(ТекстОбласти, ".");
			
			Если МассивПути.Количество() > 1 Тогда
				МассивПути[0] = НайтиВТаблицеТиповОбъектов(ТипыОбъектов, МассивПути[0],
					"ИмяВоМножественномЧисле", "ИмяВЕдинственномЧисле");
				
				// Если объектом является форма или макет, тогда из пути этого объекта удаляем
				// слово "Форма" или "Макет" соответственно, для того чтобы привести пути к тому виду,
				// как они хранятся в АПК.
				ИндексПредпоследнегоЭлемента = МассивПути.ВГраница() - 1;
				ПредпоследнийЭлемент = МассивПути[ИндексПредпоследнегоЭлемента];
				Если СтрСравнить(ПредпоследнийЭлемент, "Форма") = 0
					ИЛИ СтрСравнить(ПредпоследнийЭлемент, "Макет") = 0 Тогда
					МассивПути.Удалить(ИндексПредпоследнегоЭлемента);
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстОбласти = СтрСоединить(МассивПути, ".");
			
			СписокИзмененныхОбъектов.Вставить(ТекстОбласти, Истина);
			
			Верх = Верх + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Функция считывает указанный файл отчета по хранилищу в табличный документ.
// Параметры:
//   ФайлОтчетаПоХранилищу - Строка - путь к файлу отчета по хранилищу.
//   ТекстОшибки - Строка - текст ошибки.
//
Функция ПрочитатьТабличныйДокументПоИмениФайла(ФайлОтчетаПоХранилищу, ТекстОшибки)
	
	Если НЕ ФайлСуществует(ФайлОтчетаПоХранилищу) Тогда
		ТекстОшибки = НСтр("ru='Файл отчета по истории хранилища не выгружен'");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ТабличныйДокумент.Прочитать(ФайлОтчетаПоХранилищу);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция проверяет лог запуска платформы. Если находит определенное сообщение о запуске платформы,
// то перезапускает платформу на требуемой версии.
//
// Параметры:
//   ПараметрыЗапуска - Структура - структура параметров запуска:
//     Конфигурация           - СправочникСсылка.Конфигурации - ссылка на проверяемую конфигурацию;
//     СтрокаЗапускаПлатформы - Строка                        - путь к файлу платформы для запуска;
//     КаталогКонфигурации    - Строка                        - путь к каталогу информационной базы проверяемой конфигурации;
//     Пользователь           - Строка                        - логин пользователя информационной базы;
//     Пароль                 - Строка                        - пароль пользователя информационной базы;
//     КаталогХранилища       - Строка                        - путь к каталогу хранилища конфигурации;
//     ПользовательХранилища  - Строка                        - логин пользователя хранилища;
//     ПарольХранилища        - Строка                        - пароль пользователя хранилища;
//     ФункцияЗапуска         - Строка                        - строка вызова необходимой функции после переопределения платформы;
//     ТекстЛога              - Строка                        - текст лога запуска платформы с ошибкой;
//     ПерезапуститьНаНеобходимойПлатформе - Булево - флаг необходимости перезапуска команды,
//                                           если платформа не соответствует необходимой;
//     ПерезаписатьСтрокуЗапускаПлатформыКонфигурации - Булево - флаг перезаписи пути к файлу запуска платформы.
//
// Возвращаемое значение:
//   Структура - см. ЗагрузитьКонфигурациюИзХранилищаИОбновить и ПолучитьВерсиюХранилищаИСписокИзмененныхОбъектов.
//
Функция ПроверитьСтатусЗапускаПлатформыИПерезапустить(ПараметрыЗапуска)
	
	ТекстЛога = ПараметрыЗапуска.ТекстЛога;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ТекстОшибки", ТекстЛога);
	
	Если ПустаяСтрока(ТекстЛога) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивОшибок = Новый Массив;
	МассивОшибок.Добавить(НСтр("ru='Версия сервера хранилища конфигурации:'"));
	МассивОшибок.Добавить(НСтр("ru='Для работы с конфигурацией необходима версия платформы не меньше, чем'"));
	
	ПозицияПоиска = 0;
	Для Каждого ТекстОшибки Из МассивОшибок Цикл
		ПозицияПоиска = СтрНайти(ТекстЛога, ТекстОшибки);
		Если ПозицияПоиска > 0 Тогда
			// Если нашли текст ошибки, то прерываем.
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПозицияПоиска = 0 Тогда
		// Если не нашли сообщение, то возвращаем результат, который пришел на вход.
		Возврат Результат;
	КонецЕсли;
	
	ТекстСообщения = СокрЛ(Сред(ТекстЛога, ПозицияПоиска + СтрДлина(ТекстОшибки) + 1));
	ДлинаСообщения = СтрДлина(ТекстСообщения);
	
	ВерсияПлатформы = "";
	Для НомерСимвола = 1 По ДлинаСообщения Цикл
		Символ = Сред(ТекстСообщения, НомерСимвола, 1);
		Если ПустаяСтрока(Символ) ИЛИ (НЕ ЭтоЧисло(Символ)) И (Символ <> ".") Тогда
			Прервать;
		КонецЕсли;
		ВерсияПлатформы = ВерсияПлатформы + Символ;
	КонецЦикла;
	
	Если ПустаяСтрока(ВерсияПлатформы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивЭлементовВерсии = СтрРазделить(ВерсияПлатформы, ".", Ложь);
	Если МассивЭлементовВерсии.Количество() < 3 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВерсияПлатформы = СтрСоединить(МассивЭлементовВерсии, ".");
	Если МассивЭлементовВерсии.Количество() = 3 Тогда
		КаталогРелизаПлатформы = ПолучитьКаталогМаксимальногоРелизаПлатформы(ВерсияПлатформы);
	Иначе
		// Ищем указанный релиз платформы среди установленных на компьютере.
		ТаблицаРелизов = ПолучитьТаблицуУстановленныхРелизовПлатформы();
		СтрокаРелиза = ТаблицаРелизов.Найти(ВерсияПлатформы);
		Если СтрокаРелиза = Неопределено Тогда
			ТекстЛога = ТекстЛога + Символы.ПС + НСтр("ru='Требуемая версия платформы не установлена на компьютере.'");
			Результат.ТекстОшибки = ТекстЛога;
			Возврат Результат;
		КонецЕсли;
		
		КаталогРелизаПлатформы = СтрокаРелиза.Каталог;
	КонецЕсли;
	
	ФайлРелизаПлатформы = КаталогРелизаПлатформы + "\bin\1cv8.exe";
	Если НЕ ФайлСуществует(ФайлРелизаПлатформы) Тогда
		ТекстЛога = ТекстЛога + Символы.ПС + НСтр("ru='Требуемая версия платформы не установлена на компьютере.'");
		Результат.ТекстОшибки = ТекстЛога;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗапуска.Вставить("СтрокаЗапускаПлатформы", ФайлРелизаПлатформы);
	
	Если ПараметрыЗапуска.ПерезаписатьСтрокуЗапускаПлатформыКонфигурации Тогда
		КонфигурацияСсылка = ПараметрыЗапуска.Конфигурация;
		КонфигурацияОбъект = КонфигурацияСсылка.ПолучитьОбъект();
		КонфигурацияОбъект.ВерсияПлатформы = ВерсияПлатформы;
		КонфигурацияОбъект.СтрокаЗапускаПлатформы = ФайлРелизаПлатформы;
		КонфигурацияОбъект.Записать();
	КонецЕсли;
	
	Результат = Вычислить(ПараметрыЗапуска.ФункцияЗапуска);
	
	Возврат Результат;
	
КонецФункции

// Процедура запускает проверяемую конфигурацию в режиме конфигуратора,
// чтобы выполнить проверку применения расширения к основной конфигурации и выгрузить отчет в файл.
//
Функция ВыполнитьПроверкуПримененияРасширения(Конфигурация, КаталогКонфигурации, Пользователь, Пароль,
	ИмяРасширения = "") Экспорт
	
	Статус = "";
	
	#Если Клиент Тогда
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("txt");
	
	// Определяем строку запуска платформы.
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	КлючПримененияРасширения = ?(ПустаяСтрока(ИмяРасширения), "-AllZones", "-Extension " + ИмяРасширения);
	
	// Запускаем платформенную проверку.
	СтрокаЗапуска = """%1"" DESIGNER /F""%2"" /N""%3"" /P""%4"" /Out ""%5"" /CheckCanApplyConfigurationExtensions %6"
		+ " /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		КаталогКонфигурации,
		Пользователь,
		Пароль,
		ИмяФайлаРезультата,
		КлючПримененияРасширения);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Статус = ФайлПолучитьТекст(ИмяФайлаРезультата);
	
	#КонецЕсли
	
	Возврат Статус;
	
КонецФункции

// Функция проверяет корректность введенных данных конфигурации (каталог запуска, пользователь, пароль),
// для этого выполняется запуск конфигуратора с командой проверки применения расширения с именем "АПК_%УникальныИдентификатор%".
//
Функция ПроверитьСоединениеСБазой(Конфигурация, КаталогКонфигурации, Пользователь, Пароль, КопироватьБазу = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("Сообщение", "");
	
	Если НЕ ДемоБазаСуществует(КаталогКонфигурации) Тогда
		Результат.Сообщение = НСтр("ru='Проверяемая база не существует в указанном каталоге.'");
		Возврат Результат;
	КонецЕсли;
	
	КаталогКонфигурацииКопия = КаталогКонфигурации;
	Если КопироватьБазу Тогда
		
		ПроверяемыйКаталог = ОтредактироватьПутьККаталогу(КаталогКонфигурации);
		КаталогКонфигурацииКопия = ПолучитьКаталогВременныхФайлов();
		
		ТекстОшибки = КопироватьБазу(ПроверяемыйКаталог, КаталогКонфигурацииКопия);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Результат.Сообщение = ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРасширения = СтрШаблон("#АПК_%1#", Новый УникальныйИдентификатор);
	Статус = ВыполнитьПроверкуПримененияРасширения(Конфигурация, КаталогКонфигурацииКопия, Пользователь, Пароль, ИмяРасширения);
	
	ТекстДляПоискаРус  = ВРег(СтрШаблон("расширение конфигурации '%1' не найдено", ИмяРасширения));     // АПК:1297 - не локализуется
	ТекстДляПоискаАнгл = ВРег(СтрШаблон("""%1"" configuration extension is not found", ИмяРасширения)); // АПК:1297 - не локализуется
	
	СтатусВРег = ВРег(Статус);
	
	Если ПустаяСтрока(Статус)
	 ИЛИ (СтрНайти(СтатусВРег, ТекстДляПоискаРус) > 0)
	 ИЛИ (СтрНайти(СтатусВРег, ТекстДляПоискаАнгл) > 0) Тогда
		Результат.Успешно = Истина;
	Иначе
		Результат.Сообщение = Статус;
	КонецЕсли;
	
	Если КопироватьБазу Тогда
		ФайлУдалить(КаталогКонфигурацииКопия);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти