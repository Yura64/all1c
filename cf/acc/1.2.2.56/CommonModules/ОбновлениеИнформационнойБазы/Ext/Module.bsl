
#Область СлужебныеПроцедурыИФункции

// При смене версии конфигурации обновляет в фоне правила и требования
// и производит изменения в базе в зависимости от номера релиза.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	Попытка
		
		// Проверка новой версии и обновление правил и программ проверки.
		ЗначениеКонстанты = Константы.НомерВерсииКонфигурации.Получить();
		МассивЭлементовКонстанты = СтрРазделить(ЗначениеКонстанты, Символы.Таб);
		НомерВерсииКонфигурации = МассивЭлементовКонстанты[0];
		
		ВерсияМетаданных = Метаданные.Версия;
		
		Если НомерВерсииКонфигурации <> ВерсияМетаданных Тогда
			
			#Если Клиент Тогда
			ТекстСостояния = СтрШаблон(НСтр("ru='Идет процесс обновления конфигурации до версии %1'"), ВерсияМетаданных);
			Состояние(ТекстСостояния);
			#КонецЕсли
			
			ОбъектОбновления = Обработки.ОбновлениеТребованийИПравилПроверки.Создать();
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.2.16")
				И РелизыПоПорядку("1.1.2.15", ВерсияМетаданных) Тогда
				
				ИзменитьГруппыСтандартов();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.6.8")
				И РелизыПоПорядку("1.1.5.20", ВерсияМетаданных) Тогда
				
				УдалитьСтандартыСовместимо();
			КонецЕсли;
			
			ОчиститьРегистрСведенийВерныеСлова();
			
			#Если Клиент Тогда
			ТекстСостояния = НСтр("ru='Выполняется обновление правил и программ проверки до версии %1'");
			ТекстСостояния = СтрШаблон(ТекстСостояния, ВерсияМетаданных);
			Состояние(ТекстСостояния);
			#КонецЕсли
			
			ОбъектОбновления.ОбновитьПравилаПроверки();
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.7.22")
				И РелизыПоПорядку("1.1.6.10", ВерсияМетаданных) Тогда
				
				ОбновитьГруппыТребованийНаПредопределенные();
			КонецЕсли;
			
			УдалитьУстаревшиеСтандарты();
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.8.16") Тогда
				УдалитьДублиТребований();
				УдалитьДублиПричинОсобенностей();
				УдалитьДублиОбнаруживаемыхОшибок();
				УдалитьДублиПравил();
				ДобавитьПредопределенныеПричиныОсобенностей();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.8.22") Тогда
				ПометитьНаУдалениеСлужебноеТребование();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.9.15") Тогда
				ЗаполнитьПользователейОС();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.9.45") Тогда
				ЗаполнитьОбъектВРегистреКомментариевОшибок();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.9.58") Тогда
				ПометитьНаУдалениеУстаревшиеДокументы();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.12.1") Тогда
				УстановитьРасширеннуюПроверкуДляКонфигураций();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.1.12.25") Тогда
				УстановитьНовоеРасписаниеРегламентногоЗаданияУведомлениеОтветственных();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.2.1.1") Тогда
				УдалитьКомментарииОтсутствующихОшибок();
				ПеренестиФлагиСобранныхДанныхВТабличнуюЧасть();
				СинхронизироватьОшибкиИОсобенности();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.2.2.1") Тогда
				УстановитьКодыОбъектовКонфигурации();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.2.2.9") Тогда
				ОбновитьЗаписиВРегистреСведенийТребованияККонфигурации();
			КонецЕсли;
			
			Если РелизыПоПорядку(НомерВерсииКонфигурации, "1.2.2.52") Тогда
				УдалитьРасширенияСНевернымВладельцем();
			КонецЕсли;
			
			Константы.НомерВерсииКонфигурации.Установить(ВерсияМетаданных);
			
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			
		КонецЕсли;
		
	Исключение
		
		#Если Клиент Тогда
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		ТекстОшибки = НСтр("ru='Не удалось обновить правила и программы проверки.
			|Выполните обновление вручную из главного меню: ""Настройка"" - ""Обновить программы и правила"".
			|Описание ошибки: %1'");
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибки);
		
		Предупреждение(ТекстОшибки);
		
		#КонецЕсли
		
		Событие = НСтр("ru='Обновление информационной базы'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось обновить информационную базу до версии %1 по причине:
			|%2'"), ВерсияМетаданных, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
		
		Сообщить(Сообщение);
		
	КонецПопытки;
	
КонецПроцедуры

// Запускает обновление информационной базы в фоновом задании.
//
Процедура ВыполнитьОбновлениеИнформационнойБазыФоновымЗаданием() Экспорт
	
	ЗначениеКонстанты = СокрЛП(Константы.НомерВерсииКонфигурации.Получить());
	МассивЭлементовКонстанты = СтрРазделить(ЗначениеКонстанты, Символы.Таб);
	
	СтарыйНомерВерсии = МассивЭлементовКонстанты[0];
	ПользовательВладелецЗадания = "";
	ИДФоновогоЗадания = "";
	
	// Проверим, что в константе находятся данные регламентного задания,
	// которые представляют из себя 3 значения:
	// НомерРелиза,ИмяПользователя,УникальныйИдентификаторЗадания с Символы.Таб в качестве разделителя.
	Если МассивЭлементовКонстанты.Количество() > 2 Тогда
		
		ПользовательВладелецЗадания = МассивЭлементовКонстанты[1];
		ИДФоновогоЗадания = МассивЭлементовКонстанты[2];
		
		Если ПользовательВладелецЗадания <> ИмяПользователя() Тогда
			Возврат;
		КонецЕсли;
		
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИДФоновогоЗадания));
		
		#Если Клиент Тогда
		
		ТекстСообщения = "";
		
		ОшибкиЕсть = Ложь;
		Если ФоновоеЗадание = Неопределено Тогда
			
			ОшибкиЕсть = Истина;
			ТекстСообщения = НСтр("ru='В настоящий момент фоновое задание обновления ИБ не обнаружено.
				|Возможно, оно было прервано.'");
			
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			
			// Продолжаем обновление, ничего не делаем.
			
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			
			ОшибкиЕсть = Истина;
			Информация = ФоновоеЗадание.ИнформацияОбОшибке;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru='%1
				|Описание: %2
				|ИмяМодуля: %3
				|НомерСтроки: %4
				|ИсходнаяСтрока: %5'"),
					НСтр("ru='Обновление информационной базы завершилось аварийно.'"),
					Информация.Описание,
					Информация.ИмяМодуля,
					Информация.НомерСтроки,
					Информация.ИсходнаяСтрока);
			
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			
			Константы.НомерВерсииКонфигурации.Установить(СтарыйНомерВерсии);
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ОшибкиЕсть Тогда
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru='В предыдущем сеансе было запущено фоновое задание для обновления информационной базы: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИДФоновогоЗадания);
		Сообщить(ТекстОшибки);
		
		Сообщить(ТекстСообщения);
		
		ТекстВопроса = НСтр("ru='Обновление завершилось с ошибками. Перезапустить обновление информационной базы?'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("ru='Изменен номер релиза'"));
		
		Если Результат <> КодВозвратаДиалога.Да Тогда
			Константы.НомерВерсииКонфигурации.Установить(СтарыйНомерВерсии);
			Возврат;
		КонецЕсли;
		
		#КонецЕсли
		
	КонецЕсли;
	
	Если СтарыйНомерВерсии = Метаданные.Версия Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	КлючЗадания = "ОбновлениеИБ";
	НаименованиеЗадания = НСтр("ru='Обновление ИБ'");
	
	Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
	СуществующиеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если СуществующиеЗадания.Количество() = 0 Тогда
		Сообщить(СтрШаблон(НСтр("ru='Выполняется обновление информационной базы на версию: %1'"), Метаданные.Версия));
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			"ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы",
			ПараметрыЗадания, КлючЗадания, НаименованиеЗадания);
			
		#Если Клиент Тогда
		ЗапущеноОбновлениеБазы = Истина;
		#КонецЕсли
		НовоеЗначениеКонстанты = СтрШаблон("%1%4%2%4%3",
			СтарыйНомерВерсии,
			ИмяПользователя(),
			ФоновоеЗадание.УникальныйИдентификатор,
			Символы.Таб);
		
		Константы.НомерВерсииКонфигурации.Установить(НовоеЗначениеКонстанты);
	КонецЕсли;
	
КонецПроцедуры

// На верхнем уровне удаляет все пустые папки, удаляет "Устаревшие стандарты",
// все элементы группы "Актуальные стандарты" поднимает на уровень выше,
// а пустую папку "Актуальные стандарты" удаляет.
Функция ИзменитьГруппыСтандартов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка,
	|	Требования.ЭтоГруппа,
	|	Требования.Наименование,
	|	Требования.Родитель
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.ЭтоГруппа
	|	И Требования.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", Справочники.Требования.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	МаксимальныйКод = ПолучитьМаксимальныйКодТребований();
	Требования = Справочники.Требования;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяЭлемента = СтрЗаменить(ВРег(Выборка.Наименование), " ", "");
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементыГруппы = Требования.Выбрать(Выборка.Ссылка);
		
		Если ВыборкаОбъект.Предопределенный Тогда
			Продолжить;
		ИначеЕсли ИмяЭлемента = "УСТАРЕВШИЕСТАНДАРТЫ" Тогда
			ВыборкаОбъект.Удалить();
		ИначеЕсли ИмяЭлемента = "АКТУАЛЬНЫЕСТАНДАРТЫ" Тогда
			ПустаяСсылка = Требования.ПустаяСсылка();
			
			Флаг = Истина;
			Пока ЭлементыГруппы.Следующий() Цикл
				ЭлементОбъект = ЭлементыГруппы.ПолучитьОбъект();
				ЭлементОбъект.Родитель = ПустаяСсылка;
				Попытка
					ЭлементОбъект.Записать();
				Исключение
					МаксимальныйКод = МаксимальныйКод + 1;
					ЭлементОбъект.Код = МаксимальныйКод;
					Попытка
						ЭлементОбъект.Записать();
					Исключение
						Флаг = Ложь;
					КонецПопытки;
				КонецПопытки;
			КонецЦикла;
			
			Если Флаг Тогда
				ВыборкаОбъект.Удалить();
			КонецЕсли;
		Иначе
			Если Не ЭлементыГруппы.Следующий() Тогда
				ВыборкаОбъект.Удалить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Возвращает максимальный код из всех элементов справочника "Требования".
//
Функция ПолучитьМаксимальныйКодТребований()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(Требования.Код) КАК Код
	|ИЗ
	|	Справочник.Требования КАК Требования";
	Результат = Запрос.Выполнить().Выбрать();
	
	МаксимальныйКод = 0;
	Пока Результат.Следующий() Цикл
		МаксимальныйКод = Результат.Код;
	КонецЦикла;
	
	Возврат МаксимальныйКод;
	
КонецФункции

Процедура ОчиститьРегистрСведенийВерныеСлова()
	
	ЗапросПоСловам = Новый Запрос;
	ЗапросПоСловам.Текст = "
	|ВЫБРАТЬ
	|	ВерныеСлова.Слово
	|ИЗ
	|	РегистрСведений.ВерныеСлова КАК ВерныеСлова";
	
	Результат = ЗапросПоСловам.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
	ТекстСостояния = НСтр("ru='Выполняется очистка регистра сведений ""Верные слова""'");
	Состояние(ТекстСостояния);
	#КонецЕсли
	
	ВерныеСлова = Неопределено;
	Проверка.ИнициализироватьСловарьВерныхСлов(ВерныеСлова, Ложь);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерныеСлова");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ВерныеСлова.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		МассивЗаписейДляУдаления = Новый Массив;
		Для Каждого Запись Из НаборЗаписей Цикл
			Если ЭтоВерноеСлово(Запись.Слово, ВерныеСлова) Тогда
				МассивЗаписейДляУдаления.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Запись Из МассивЗаписейДляУдаления Цикл
			НаборЗаписей.Удалить(Запись);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоВерноеСлово(Знач Слово, ВерныеСлова)
	
	Слово = СокрЛП(ВРег(Слово));
	
	Если СтрДлина(Слово) <= 1 Тогда
		Возврат Истина;
	ИначеЕсли НЕ СловоСодержитТолькоКириллицу(Слово) Тогда
		Возврат Истина;
	ИначеЕсли ВерныеСлова[Слово] = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Удаляет группы требований и правил с наименованием "1С:Совместимо".
//
Процедура УдалитьСтандартыСовместимо()
	
	НаименованиеСовместимо = "1С:Совместимо";
	
	ГруппаТребованийСовместимо = Справочники.Требования.НайтиПоНаименованию(НаименованиеСовместимо, Истина,
		Справочники.Требования.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(ГруппаТребованийСовместимо) Тогда
		Попытка
			ГруппаТребованийСовместимо.ПолучитьОбъект().Удалить();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Сообщить(НСтр("ru='Не удалось удалить группу требований <1С:Совместимо>.'") + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
	ГруппаПравилСовместимо = Справочники.Правила.НайтиПоНаименованию(НаименованиеСовместимо, Истина,
		Справочники.Правила.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ГруппаПравилСовместимо) Тогда
		Попытка
			ГруппаПравилСовместимо.ПолучитьОбъект().Удалить();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Сообщить(НСтр("ru='Не удалось удалить группу правил <1С:Совместимо>.'") + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменитьРодителяТребований(СтарыйРодитель, НовыйРодитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", СтарыйРодитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТребованиеСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ТребованиеОбъект = ТребованиеСсылка.ПолучитьОбъект();
		ТребованиеОбъект.Родитель = НовыйРодитель;
		ТребованиеОбъект.Записать();
	КонецЦикла;
	
КонецФункции

Функция ПолучитьГруппуТребований(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Родитель = &Родитель
	|	И Требования.ЭтоГруппа = &ЭтоГруппа
	|	И Требования.Наименование = &Наименование
	|	И Требования.Предопределенный = &Предопределенный";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Родитель", Справочники.Требования.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЭтоГруппа", Истина);
	Запрос.УстановитьПараметр("Предопределенный", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Процедура УдалитьГруппуТребований(ГруппаТребований)
	
	Если Не ЗначениеЗаполнено(ГруппаТребований) Тогда
		Возврат;
	КонецЕсли;
	
	Если ГруппаТребований.Предопределенный Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбъектГруппыТребований = ГруппаТребований.ПолучитьОбъект();
		ОбъектГруппыТребований.Удалить();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось удалить группу требований <%1> по причине:
			|%2'"), ОбъектГруппыТребований.Наименование, ОписаниеОшибки);
		Сообщить(Сообщение);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьГруппыТребованийНаПредопределенные()
	
	Требования = Справочники.Требования;
	
	МассивГруппТребований = Новый Массив;
	МассивГруппТребований.Добавить(Требования.СистемаСтандартов);
	МассивГруппТребований.Добавить(Требования.Орфография);
	МассивГруппТребований.Добавить(Требования.Совместимо);
	
	Для Каждого ГруппаТребований Из МассивГруппТребований Цикл
		
		СтараяГруппаТребований = ПолучитьГруппуТребований(ГруппаТребований.Наименование);
		Если Не ЗначениеЗаполнено(СтараяГруппаТребований) Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменитьРодителяТребований(СтараяГруппаТребований, ГруппаТребований);
		
		УдалитьГруппуТребований(СтараяГруппаТребований);
		
	КонецЦикла;
	
КонецПроцедуры

// Содержит таблицу устаревших требований, заполняется вручную.
//
Функция ПолучитьТаблицуУстаревшихТребований()
	
	ТаблицаТребований = Новый ТаблицаЗначений;
	ТаблицаТребований.Колонки.Добавить("Наименование");
	ТаблицаТребований.Колонки.Добавить("СсылкаНаСтандарт");
	
	УстаревшееТребование = ТаблицаТребований.Добавить();
	УстаревшееТребование.Наименование = "Наименование и значение по умолчанию для флажков";
	УстаревшееТребование.СсылкаНаСтандарт = "http://its.1c.ru/db/translate/?db=v8std&path=src/d810/i8100405.htm";
	
	УстаревшееТребование = ТаблицаТребований.Добавить();
	УстаревшееТребование.Наименование = "Контекстное меню";
	УстаревшееТребование.СсылкаНаСтандарт = "http://its.1c.ru/db/v8std#content:2149184275:1";
	
	УстаревшееТребование = ТаблицаТребований.Добавить();
	УстаревшееТребование.Наименование = "Проверка условных вызовов (БСП)";
	УстаревшееТребование.СсылкаНаСтандарт = "";
	
	Возврат ТаблицаТребований;
	
КонецФункции

// Содержит таблицу устаревших правил, заполняется вручную.
//
Функция ПолучитьТаблицуУстаревшихПравил()
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	ТаблицаПравил.Колонки.Добавить("Наименование");
	ТаблицаПравил.Колонки.Добавить("Код");
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Наименование и значение по умолчанию для флажков (реквизиты объектов)";
	УстаревшееПравило.Код = "Функ.0229";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Наименование и значение по умолчанию для флажков";
	УстаревшееПравило.Код = "Функ.0413";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Наименование и значение по умолчанию для флажков";
	УстаревшееПравило.Код = "Функ.0088";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Контекстное меню";
	УстаревшееПравило.Код = "Функ.0461";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Проверка вхождения объектов в подсистемы";
	УстаревшееПравило.Код = "Функ.0572";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Проверка условных вызовов (БСП)";
	УстаревшееПравило.Код = "Функ.0747";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Проверка условных вызовов (БСП)";
	УстаревшееПравило.Код = "Функ.0745";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "Проверка наличия встроенной справки у ведущих объектов (Совместимо)";
	УстаревшееПравило.Код = "000000123";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование = "2.3.6. Справочная информация у форм";
	УстаревшееПравило.Код = "Функ.0533";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование =
		"2.3.6. Конфигурация в целом и ее основные объекты, имеющие свойство ""Справочная информация"", должны ";
	УстаревшееПравило.Код = "Функ.0453";
	
	УстаревшееПравило = ТаблицаПравил.Добавить();
	УстаревшееПравило.Наименование =
		"В случае  если в конфигурации для пользователей необходимо настраивать общие права работы";
	УстаревшееПравило.Код = "Функ.0393";
	
	Возврат ТаблицаПравил;
	
КонецФункции

// Содержит таблицу устаревших ошибок, заполняется вручную.
//
Функция ПолучитьТаблицуУстаревшихОшибок()
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Наименование");
	ТаблицаОшибок.Колонки.Добавить("Код");
	
	УстаревшаяОшибка = ТаблицаОшибок.Добавить();
	УстаревшаяОшибка.Наименование = "Обнаружен реквизит, содержащий отрицание";
	УстаревшаяОшибка.Код = "АПК_Функц.106";
	
	УстаревшаяОшибка = ТаблицаОшибок.Добавить();
	УстаревшаяОшибка.Наименование = "Объект не включен ни в одну подсистему.";
	УстаревшаяОшибка.Код = "АПК_Функц.212";
	
	УстаревшаяОшибка = ТаблицаОшибок.Добавить();
	УстаревшаяОшибка.Наименование =
		"Объект включен в обе служебные подсистемы ""Управление торговлей"" и ""Управление предприятием"".";
	УстаревшаяОшибка.Код = "АПК_Функц.213";
	
	УстаревшаяОшибка = ТаблицаОшибок.Добавить();
	УстаревшаяОшибка.Наименование = "Проверка условных вызовов (БСП)";
	УстаревшаяОшибка.Код = "АПК_Функц.268";
	
	УстаревшаяОшибка = ТаблицаОшибок.Добавить();
	УстаревшаяОшибка.Наименование = "Отсутствует справочная информация";
	УстаревшаяОшибка.Код = "АПК_Функц.130";
	
	УстаревшаяОшибка = ТаблицаОшибок.Добавить();
	УстаревшаяОшибка.Наименование = "Справочная информация";
	УстаревшаяОшибка.Код = "АПК_Функц.129";
	
	УстаревшаяОшибка = ТаблицаОшибок.Добавить();
	УстаревшаяОшибка.Наименование = "Имя предопределенного элемента содержит кириллицу и латиницу.";
	УстаревшаяОшибка.Код = "АПК_Функц.266";
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// Обработчик обновления. Удаляет устаревшие стандарты (требования, правила, ошибки).
//
Процедура УдалитьУстаревшиеСтандарты()
	
	УдалитьУстаревшиеТребования();
	
	УдалитьУстаревшиеПравила();
	
	УдалитьУстаревшиеОшибки();
	
КонецПроцедуры

Процедура УдалитьУстаревшиеТребования()
	
	ТаблицаТребований = ПолучитьТаблицуУстаревшихТребований();
	
	Для Каждого Строка Из ТаблицаТребований Цикл
		
		ТребованиеСсылка = ПолучитьТребованиеПоНаименованиюИСсылкеНаСтандарт(Строка.Наименование, Строка.СсылкаНаСтандарт);
		Если НЕ ЗначениеЗаполнено(ТребованиеСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ТребованиеОбъект = ТребованиеСсылка.ПолучитьОбъект();
		ТребованиеОбъект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьУстаревшиеПравила()
	
	ТаблицаПравил = ПолучитьТаблицуУстаревшихПравил();
	
	Для Каждого Строка Из ТаблицаПравил Цикл
		
		ПравилоСсылка = ПолучитьПравилоПоНаименованиюИКоду(Строка.Наименование, Строка.Код);
		Если НЕ ЗначениеЗаполнено(ПравилоСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ПравилоОбъект = ПравилоСсылка.ПолучитьОбъект();
		ПравилоОбъект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьУстаревшиеОшибки()
	
	ТаблицаОшибок = ПолучитьТаблицуУстаревшихОшибок();
	
	Для Каждого Строка Из ТаблицаОшибок Цикл
		
		ОшибкаСсылка = ПолучитьОшибкуПоНаименованиюИКоду(Строка.Наименование, Строка.Код);
		Если НЕ ЗначениеЗаполнено(ОшибкаСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ОшибкаОбъект = ОшибкаСсылка.ПолучитьОбъект();
		ОшибкаОбъект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТребованиеПоНаименованиюИСсылкеНаСтандарт(Наименование, СсылкаНаСтандарт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Наименование = &Наименование
	|	И Требования.СсылкаНаСтандарт = &СсылкаНаСтандарт";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("СсылкаНаСтандарт", СсылкаНаСтандарт);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТребованиеСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ТребованиеСсылка = Справочники.Требования.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТребованиеСсылка;
	
КонецФункции

Функция ПолучитьПравилоПоНаименованиюИКоду(Наименование, Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Правила.Ссылка
	|ИЗ
	|	Справочник.Правила КАК Правила
	|ГДЕ
	|	Правила.Наименование = &Наименование
	|	И Правила.Код = &Код";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Код", Код);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПравилоСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ПравилоСсылка = Справочники.Правила.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПравилоСсылка;
	
КонецФункции

Функция ПолучитьОшибкуПоНаименованиюИКоду(Наименование, Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ошибки.Ссылка
	|ИЗ
	|	Справочник.ОбнаруживаемыеОшибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Наименование = &Наименование
	|	И Ошибки.Код = &Код";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Код", Код);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОшибкаСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ОшибкаСсылка = Справочники.ОбнаруживаемыеОшибки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОшибкаСсылка;
	
КонецФункции

Функция ПолучитьВложенныеТребования(ГруппаТребований)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", ГруппаТребований);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УдалитьТребование(ТребованиеСсылка)
	
	Попытка
		ТребованиеОбъект = ТребованиеСсылка.ПолучитьОбъект();
		ТребованиеОбъект.Удалить();
	Исключение
		Сообщение = НСтр("ru='Не удалось удалить требование ""%Наименование%""'");
		Если ТребованиеСсылка.ЭтоГруппа Тогда
			Сообщение = СтрЗаменить(Сообщение, "требование", НСтр("ru='группу требований'"));
		КонецЕсли;
		Сообщение = СтрЗаменить(Сообщение, "%Наименование%", ТребованиеСсылка.Наименование);
		Сообщить(Сообщение + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьДубльПредопределеннойГруппыТребований(ПредопределеннаяГруппаТребований)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Предопределенный
	|	И Требования.ЭтоГруппа
	|	И Требования.Родитель = &Родитель
	|	И Требования.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Родитель", Справочники.Требования.ПустаяСсылка());
	Запрос.УстановитьПараметр("Наименование", ПредопределеннаяГруппаТребований.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоГрупп = Выборка.Количество();
	Если КоличествоГрупп = 0 Тогда
		
		Возврат;
		
	ИначеЕсли КоличествоГрупп = 1 Тогда
		
		// Если в группе есть записи, то все верно - выходим.
		Выборка.Следующий();
		ГруппаТребований = Выборка.Ссылка;
		ВложенныеТребования = ПолучитьВложенныеТребования(ГруппаТребований);
		Если ВложенныеТребования.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		// В группе нет записей, ищем непредопределенный дубль этой записи.
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Требования.Ссылка
		|ИЗ
		|	Справочник.Требования КАК Требования
		|ГДЕ
		|	НЕ Требования.Предопределенный
		|	И Требования.ЭтоГруппа
		|	И Требования.Родитель = &Родитель
		|	И Требования.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Родитель", Справочники.Требования.ПустаяСсылка());
		Запрос.УстановитьПараметр("Наименование", ПредопределеннаяГруппаТребований.Наименование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			// дубля нет, выходим
			Возврат;
		КонецЕсли;
		
		// Нашли дубль, проверим, что у него заполнены вложенные требования.
		Пока Выборка.Следующий() Цикл
			ВложенныеТребования = ПолучитьВложенныеТребования(Выборка.Ссылка);
			Если ВложенныеТребования.Количество() > 0 Тогда
				// перенесем требования
				ИзменитьРодителяТребований(Выборка.Ссылка, ГруппаТребований);
			КонецЕсли;
			УдалитьТребование(Выборка.Ссылка);
		КонецЦикла;
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
			ТребованиеСсылка = Выборка.Ссылка;
			ВложенныеТребования = ПолучитьВложенныеТребования(ТребованиеСсылка);
			Если ВложенныеТребования.Количество() = 0 Тогда
				УдалитьТребование(ТребованиеСсылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДубльПредопределенногоТребования(ПредопределенноеТребование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Предопределенный
	|	И НЕ Требования.ЭтоГруппа
	|	И Требования.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ПредопределенноеТребование.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоТребований = Выборка.Количество();
	
	Если КоличествоТребований = 0 Тогда
		
		Возврат;
		
	ИначеЕсли КоличествоТребований = 1 Тогда
		
		Выборка.Следующий();
		ТребованиеСсылка = Выборка.Ссылка;
		// Если предопределенное требование одно и лежит не в корне справочника, то все верно - выходим.
		Если ТребованиеСсылка.Родитель <> Справочники.Требования.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
		
		// если предопределенное лежит в корне справочника, то найдем его дубль.
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Требования.Ссылка
		|ИЗ
		|	Справочник.Требования КАК Требования
		|ГДЕ
		|	Требования.Наименование = &Наименование
		|	И НЕ Требования.ЭтоГруппа
		|	И НЕ Требования.Предопределенный";
		
		Запрос.УстановитьПараметр("Наименование", ПредопределенноеТребование.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			// если нашли дубль, то удалим его
			Выборка.Следующий();
			УдалитьТребование(Выборка.Ссылка);
		КонецЕсли;
		
		// Т.к. требование лежит в корне справочника, надо перенести его в группу "Организация работы конфигурации".
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Требования.Ссылка
		|ИЗ
		|	Справочник.Требования КАК Требования
		|ГДЕ
		|	НЕ Требования.Предопределенный
		|	И Требования.ЭтоГруппа
		|	И Требования.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", НСтр("ru='Организация работы конфигурации'"));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			// группы нет, выходим
			Возврат;
		КонецЕсли;
		
		// перенесем в группу
		Выборка.Следующий();
		ТребованиеОбъект = ТребованиеСсылка.ПолучитьОбъект();
		ТребованиеОбъект.Родитель = Выборка.Ссылка;
		ТребованиеОбъект.Записать();
		
	Иначе
		
		// если требований несколько, надо удалить те, что лежат в корне справочника
		Пока Выборка.Следующий() Цикл
			ТребованиеСсылка = Выборка.Ссылка;
			Если ТребованиеСсылка.Родитель = Справочники.Требования.ПустаяСсылка() Тогда
				УдалитьТребование(ТребованиеСсылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДублиТребований()
	
	УдалитьДубльПредопределеннойГруппыТребований(Справочники.Требования.СистемаСтандартов);
	УдалитьДубльПредопределеннойГруппыТребований(Справочники.Требования.Орфография);
	УдалитьДубльПредопределеннойГруппыТребований(Справочники.Требования.Совместимо);
	УдалитьДубльПредопределенногоТребования(Справочники.Требования.ПлатформеннаяПроверкаКонфигурации);
	
КонецПроцедуры

Процедура УдалитьДубльПричиныОсобенности(ПредопределеннаяПричина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПричиныОсобенности.Ссылка
	|ИЗ
	|	Справочник.ПричиныОсобенности КАК ПричиныОсобенности
	|ГДЕ
	|	ПричиныОсобенности.Предопределенный
	|	И ПричиныОсобенности.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ПредопределеннаяПричина.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ПричинаСсылка = Выборка.Ссылка;
		Если ПричинаСсылка = ПредопределеннаяПричина Тогда
			ПричинаОбъект = ПричинаСсылка.ПолучитьОбъект();
			ПричинаОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДублиПричинОсобенностей()
	
	УдалитьДубльПричиныОсобенности(Справочники.ПричиныОсобенности.НеполныйОрфографическийСловарь);
	
КонецПроцедуры

Процедура УдалитьДубльОбнаруживаемойОшибки(ПредопределеннаяОшибка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбнаруживаемыеОшибки.Ссылка
	|ИЗ
	|	Справочник.ОбнаруживаемыеОшибки КАК ОбнаруживаемыеОшибки
	|ГДЕ
	|	ОбнаруживаемыеОшибки.Предопределенный
	|	И ОбнаруживаемыеОшибки.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ПредопределеннаяОшибка.Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ОшибкаСсылка = Выборка.Ссылка;
		Если НЕ ЗначениеЗаполнено(ОшибкаСсылка.Критичность) Тогда
			ОшибкаОбъект = ОшибкаСсылка.ПолучитьОбъект();
			ОшибкаОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДублиОбнаруживаемыхОшибок()
	
	УдалитьДубльОбнаруживаемойОшибки(Справочники.ОбнаруживаемыеОшибки.ОшибкаАудита);
	УдалитьДубльОбнаруживаемойОшибки(Справочники.ОбнаруживаемыеОшибки.ОшибкаИнтерфейса);
	УдалитьДубльОбнаруживаемойОшибки(Справочники.ОбнаруживаемыеОшибки.ОшибкаФункциональности);
	
КонецПроцедуры

Процедура УдалитьДубльПравила(ПредопределенноеПравило)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Правила.Ссылка
	|ИЗ
	|	Справочник.Правила КАК Правила
	|ГДЕ
	|	Правила.Предопределенный
	|	И Правила.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ПредопределенноеПравило.Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ПравилоСсылка = Выборка.Ссылка;
		Если ПравилоСсылка.ОбнаруживаемыеОшибки.Количество() = 0 Тогда
			ПравилоОбъект = ПравилоСсылка.ПолучитьОбъект();
			ПравилоОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДублиПравил()
	
	УдалитьДубльПравила(Справочники.Правила.Аудит);
	УдалитьДубльПравила(Справочники.Правила.Интерфейс);
	УдалитьДубльПравила(Справочники.Правила.ТестированиеФункциональности);
	
КонецПроцедуры

Процедура ДобавитьПредопределеннуюПричинуОсобенности(ПричинаНаименование)
	
	ПричинаСсылка = Справочники.ПричиныОсобенности.НайтиПоНаименованию(ПричинаНаименование, Истина);
	
	Если ЗначениеЗаполнено(ПричинаСсылка) Тогда
		Если ПричинаСсылка.Предопределенный Тогда
			Возврат;
		КонецЕсли;
		ПричинаОбъект = ПричинаСсылка.ПолучитьОбъект();
	Иначе
		ПричинаОбъект = Справочники.ПричиныОсобенности.СоздатьЭлемент();
		ПричинаОбъект.Наименование = ПричинаНаименование;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	Попытка
		ПричинаОбъект.ИмяПредопределенныхДанных = "#" + УникальныйИдентификатор;
		ПричинаОбъект.Записать();
	Исключение
		Событие = НСтр("ru='Обновление информационной базы'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось добавить предопределенную причину особенности ""%1"" по причине:
			|%2'"), ПричинаНаименование, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьПредопределенныеПричиныОсобенностей()
	
	СтрокаПричин = "Неполный орфографический словарь
		|Проектное решение
		|Не проверять в старых исправительных релизах
		|Не проверять орфографию (идентификатор объекта метаданных, имя переменной и т.п.)
		|Обратная совместимость (ошибка есть, но не может быть исправлена)
		|Исправление отложено";
		
	МассивПричин = СтрРазделить(СтрокаПричин, Символы.ПС);
	
	Для Каждого Причина Из МассивПричин Цикл
		ДобавитьПредопределеннуюПричинуОсобенности(Причина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеСлужебноеТребование()
	
	Наименование = "!!! Новые и измененные разделы";
	СсылкаНаСтандарт = "http://its.1c.ru/db/translate/?db=v8std&path=src/d810/I8102100.htm";
	ТребованиеСсылка = ПолучитьТребованиеПоНаименованиюИСсылкеНаСтандарт(Наименование, СсылкаНаСтандарт);
	
	Если НЕ ЗначениеЗаполнено(ТребованиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТребованиеОбъект = ТребованиеСсылка.ПолучитьОбъект();
		ТребованиеОбъект.УстановитьПометкуУдаления(Истина);
	Исключение
		Событие = НСтр("ru='Обновление информационной базы'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось установить пометку удаления служебного требования ""%1"" по причине:
			|%2'"), Наименование, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПользователейОС()
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		Если НЕ ПользовательИБ.АутентификацияОС ИЛИ НЕ ЗначениеЗаполнено(ПользовательИБ.ПользовательОС) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПользователя = ?(ЗначениеЗаполнено(ПользовательИБ.ПолноеИмя), ПользовательИБ.ПолноеИмя, ПользовательИБ.Имя);
		
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя, Истина);
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектПользователь = Пользователь.ПолучитьОбъект();
		ОбъектПользователь.ПользовательОС = ПользовательИБ.ПользовательОС;
		ОбъектПользователь.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектВРегистреКомментариевОшибок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КомментарииНайденныхОшибок.Номер,
	|	НайденныеОшибки.Объект,
	|	КомментарииНайденныхОшибок.Комментарий
	|ИЗ
	|	РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ПО КомментарииНайденныхОшибок.Номер = НайденныеОшибки.Номер";
	
	ТаблицаНайденныхОшибок = Запрос.Выполнить().Выгрузить();
	
	КомментарииНаборЗаписей = РегистрыСведений.КомментарииНайденныхОшибок.СоздатьНаборЗаписей();
	КомментарииНаборЗаписей.Прочитать();
	КомментарииНаборЗаписей.Загрузить(ТаблицаНайденныхОшибок);
	КомментарииНаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПометитьНаУдалениеУстаревшиеДокументы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПроверкаВерсии.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
	|ГДЕ
	|	ПроверкаВерсии.ВерсияКонфигурации.ПометкаУдаления
	|	И ПроверкаВерсии.Эталон.ПометкаУдаления
	|	И НЕ ПроверкаВерсии.ПометкаУдаления";
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ТекущаяСсылка Из МассивСсылок Цикл
		ОбъектДокумент = ТекущаяСсылка.ПолучитьОбъект();
		ОбъектДокумент.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРасширеннуюПроверкуДляКонфигурации(КонфигурацияСсылка)
	
	Попытка
		КонфигурацияОбъект = КонфигурацияСсылка.ПолучитьОбъект();
		КонфигурацияОбъект.РасширеннаяПроверкаПоДополнительнымТребованиям = Истина;
		КонфигурацияОбъект.Записать();
	Исключение
		Событие = НСтр("ru='Обновление информационной базы'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось установить расширенную проверку для конфигурации %1 по причине:
			|%2'"), КонфигурацияСсылка.Наименование, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
		
		Сообщить(Сообщение);
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьРасширеннуюПроверкуДляКонфигураций()
	
	// Устанавливаем расширенную проверку для конфигураций,
	// у которых выбран вариант проверки = "Полная проверка".
	ЗапросПоПолнойПроверке = Новый Запрос;
	ЗапросПоПолнойПроверке.Текст = "
	|ВЫБРАТЬ
	|	Конфигурации.Ссылка КАК Конфигурация
	|ИЗ
	|	Справочник.Конфигурации КАК Конфигурации
	|ГДЕ
	|	Конфигурации.ВариантПроверкиВручную = &ПолнаяПроверка
	|	И НЕ Конфигурации.РасширеннаяПроверкаПоДополнительнымТребованиям
	|	И НЕ Конфигурации.ПометкаУдаления";
	
	ЗапросПоПолнойПроверке.УстановитьПараметр("ПолнаяПроверка", Справочники.ВариантыПроверки.ПолнаяПроверка);
	
	ВыборкаПоПолнойПроверке = ЗапросПоПолнойПроверке.Выполнить().Выбрать();
	
	Пока ВыборкаПоПолнойПроверке.Следующий() Цикл
		УстановитьРасширеннуюПроверкуДляКонфигурации(ВыборкаПоПолнойПроверке.Конфигурация);
	КонецЦикла;
	
	// Устанавливаем расширенную проверку для конфигураций,
	// у которых в варианте проверки вручную выбраны все внутренние требования, кроме новых внутренних требований в 1.1.12,
	// т.к. они еще не включены в проверку конфигураций.
	МассивВнутреннихТребований = ПолучитьВнутренниеТребования(Ложь);
	
	ЗапросПоВариантамПроверки = Новый Запрос;
	ЗапросПоВариантамПроверки.Текст = "
	|ВЫБРАТЬ
	|	ТребованияККонфигурации.Конфигурация КАК Конфигурация,
	|	ТребованияККонфигурации.Требование КАК Требование
	|ИЗ
	|	РегистрСведений.ТребованияККонфигурации КАК ТребованияККонфигурации
	|ГДЕ
	|	ТребованияККонфигурации.ВариантПроверки = ТребованияККонфигурации.Конфигурация.ВариантПроверкиВручную
	|	И ТребованияККонфигурации.Конфигурация.ВариантПроверкиВручную <> &ПолнаяПроверка
	|	И НЕ ТребованияККонфигурации.Конфигурация.ПометкаУдаления
	|	И НЕ ТребованияККонфигурации.Конфигурация.РасширеннаяПроверкаПоДополнительнымТребованиям
	|	И НЕ ТребованияККонфигурации.Требование.ПометкаУдаления
	|	И НЕ ТребованияККонфигурации.Требование.ЭтоГруппа";
	
	ЗапросПоВариантамПроверки.УстановитьПараметр("ПолнаяПроверка", Справочники.ВариантыПроверки.ПолнаяПроверка);
	
	ТаблицаТребованийКонфигураций = ЗапросПоВариантамПроверки.Выполнить().Выгрузить();
	
	ТаблицаКонфигураций = ТаблицаТребованийКонфигураций.Скопировать();
	ТаблицаКонфигураций.Свернуть("Конфигурация");
	
	ТаблицаТребованийКонфигураций.Индексы.Добавить("Конфигурация");
	
	СтруктураОтбора = Новый Структура;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонфигураций Цикл
		
		КонфигурацияСсылка = СтрокаТаблицы.Конфигурация;
		
		СтруктураОтбора.Вставить("Конфигурация", КонфигурацияСсылка);
		ТаблицаТребованийКонфигурации = ТаблицаТребованийКонфигураций.Скопировать(СтруктураОтбора);
		
		НужнаРасширеннаяПроверка = Истина;
		
		Для Каждого ВнутреннееТребование Из МассивВнутреннихТребований Цикл
			Если ТаблицаТребованийКонфигурации.Найти(ВнутреннееТребование, "Требование") = Неопределено Тогда
				НужнаРасширеннаяПроверка = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НужнаРасширеннаяПроверка Тогда
			УстановитьРасширеннуюПроверкуДляКонфигурации(КонфигурацияСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНовоеРасписаниеРегламентногоЗаданияУведомлениеОтветственных()
	
	Попытка
		УведомленияОтветственных = Метаданные.РегламентныеЗадания.УведомленияОтветственных;
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(УведомленияОтветственных);
		
		Расписание = РегламентноеЗадание.Расписание;
		Расписание.ПериодПовтораВТечениеДня = 3600;
		
		РегламентноеЗадание.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Сообщение = НСтр("ru='Не удалось установить новое расписание регламентного задания ""Уведомления ответственных"" по причине:%1%2'");
		Сообщение = СтрШаблон(Сообщение, Символы.ПС, ОписаниеОшибки);
		
		Сообщить(Сообщение);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиФлагиСобранныхДанныхВТабличнуюЧасть()
	
	ВыборкаПоВерсиям = Справочники.Версии.Выбрать();
	Пока ВыборкаПоВерсиям.Следующий() Цикл
		
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанные", ВыборкаПоВерсиям.УдалитьСобраныДанные);
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанныеОМетаданных", ВыборкаПоВерсиям.УдалитьСобраныДанныеОМетаданных);
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанныеОФормах", ВыборкаПоВерсиям.УдалитьСобраныДанныеОФормах);
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанныеОМодулях", ВыборкаПоВерсиям.УдалитьСобраныДанныеОМодулях);
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанныеОРолях", ВыборкаПоВерсиям.УдалитьСобраныДанныеОРолях);
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанныеОМакетах", ВыборкаПоВерсиям.УдалитьСобраныДанныеОМакетах);
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанныеОСправке", ВыборкаПоВерсиям.УдалитьСобраныДанныеОСправке);
		ВерсияУстановитьФлагСбораДанных(ВыборкаПоВерсиям.Ссылка, "СобраныДанныеПоПроверкеКонфигурации", ВыборкаПоВерсиям.УдалитьСобраныДанныеПоПроверкеКонфигурации);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает записи РС "Комментарии найденных ошибок",
// для которых нет соответствия в РС "Найденные ошибки", и удаляет их.
//
Процедура УдалитьКомментарииОтсутствующихОшибок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КомментарииНайденныхОшибок.Номер,
	|	КомментарииНайденныхОшибок.Объект,
	|	КомментарииНайденныхОшибок.Комментарий
	|ИЗ
	|	РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ПО КомментарииНайденныхОшибок.Номер = НайденныеОшибки.Номер";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	КомментарииНаборЗаписей = РегистрыСведений.КомментарииНайденныхОшибок.СоздатьНаборЗаписей();
	КомментарииНаборЗаписей.Прочитать();
	КомментарииНаборЗаписей.Загрузить(Результат);
	КомментарииНаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СинхронизироватьОшибкиИОсобенности()
	
	НомерЗаписи = ПолучитьМаксимальныйНомерОшибки() + 1;
	Состояние = Перечисления.СостояниеОшибки.Особенность;
	СоответствиеПравилИОшибок = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Конфигурации.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ПроверкаВерсии.Дата) КАК Дата
	|ИЗ
	|	Справочник.Конфигурации КАК Конфигурации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроверкаВерсии КАК ПроверкаВерсии
	|		ПО ПроверкаВерсии.Конфигурация = Конфигурации.Ссылка
	|ГДЕ
	|	НЕ Конфигурации.ЭтоГруппа
	|	И НЕ Конфигурации.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Конфигурации.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ПроверкаВерсии.Дата) УБЫВ";
	
	ВыборкаКонфигураций = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКонфигураций.Следующий() Цикл
		
		ТекущаяКонфигурация = ВыборкаКонфигураций.Ссылка;
		
		ПоследняяВерсия = НайтиПоследнююВерсию(ТекущаяКонфигурация, Ложь);
		ТаблицаОсобенностей = ПолучитьТаблицуОсобенностейКонфигурации(ТекущаяКонфигурация);
		
		Если ТаблицаОсобенностей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаОбъектов = ПолучитьТаблицуОбъектовКонфигурации(ПоследняяВерсия);
		
		СоответствиеНайденныхОшибок = ПолучитьСоответствиеЗаписейИзРСНайденныеОшибки(ПоследняяВерсия);
		
		СоответствиеОбъектов = Новый Соответствие;
		
		Для Каждого Особенность Из ТаблицаОсобенностей Цикл
			
			ПутьОбъекта = Особенность.Объект;
			Ошибка = Особенность.Ошибка;
			
			Ключ = СтрШаблон("%1.%2.%3", ПутьОбъекта, Ошибка.Код, Особенность.Уточнение);
			Ключ = ВРег(Ключ);
			Ключ = УдалитьНезначащиеСимволы(Ключ);
			
			СуществующаяЗапись = СоответствиеНайденныхОшибок[Ключ];
			Если СуществующаяЗапись <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныйОбъект = СоответствиеОбъектов[ПутьОбъекта];
			Если НайденныйОбъект = Неопределено Тогда
				НайденныйОбъектСтрока = ТаблицаОбъектов.Найти(ВРег(ПутьОбъекта), "ПутьОбъектаВРег");
				Если НайденныйОбъектСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НайденныйОбъект = НайденныйОбъектСтрока.Ссылка;
				СоответствиеОбъектов.Вставить(ПутьОбъекта, НайденныйОбъект);
			КонецЕсли;
			
			НайденноеПравило = СоответствиеПравилИОшибок[Ошибка];
			Если НайденноеПравило = Неопределено Тогда
				НайденноеПравило = ПолучитьПравилоПоОшибке(Ошибка);
				СоответствиеПравилИОшибок.Вставить(Ошибка, НайденноеПравило);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденноеПравило) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись = РегистрыСведений.НайденныеОшибки.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект						= НайденныйОбъект;
			НоваяЗапись.Номер						= НомерЗаписи;
			НоваяЗапись.Правило						= НайденноеПравило;
			НоваяЗапись.Ошибка						= Ошибка;
			НоваяЗапись.Состояние					= Состояние;
			НоваяЗапись.АвторОсобенности			= Особенность.АвторОсобенности;
			НоваяЗапись.ДатаПомещенияВОсобенности	= Особенность.ДатаПомещенияВОсобенности;
			НоваяЗапись.Уточнение					= Особенность.Уточнение;
			НоваяЗапись.ПричинаОсобенности			= Особенность.ПричинаОсобенности;
			
			НоваяЗапись.Записать();
			
			НомерЗаписи = НомерЗаписи + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуОсобенностейКонфигурации(Конфигурация)
	
	НаборЗаписей = РегистрыСведений.УдалитьОсобенности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Конфигурация.Установить(Конфигурация);
	НаборЗаписей.Прочитать();
	Возврат НаборЗаписей.Выгрузить();
	
КонецФункции

Функция ПолучитьСоответствиеЗаписейИзРСНайденныеОшибки(Версия)
	
	Особенности = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект.Путь КАК Объект,
	|	НайденныеОшибки.Ошибка.Код КАК Ошибка,
	|	НайденныеОшибки.Уточнение,
	|	НайденныеОшибки.МестоОбнаружения
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец = &Версия";
	
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Особенности;
	КонецЕсли;
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		Ключ = СтрШаблон("%1.%2.%3", СтрокаРезультата.Объект, СтрокаРезультата.Ошибка, СтрокаРезультата.Уточнение);
		
		Ключ = ВРег(Ключ);
		Ключ = УдалитьНезначащиеСимволы(Ключ);
		
		Особенности.Вставить(Ключ, СтрокаРезультата);
		
	КонецЦикла;
	
	Возврат Особенности;
	
КонецФункции

Функция ПолучитьПравилоПоОшибке(Ошибка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаОбнаруживаемыеОшибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Правила.ОбнаруживаемыеОшибки КАК ПравилаОбнаруживаемыеОшибки
	|ГДЕ
	|	ПравилаОбнаруживаемыеОшибки.Ошибка = &Ошибка
	|	И НЕ ПравилаОбнаруживаемыеОшибки.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ошибка", Ошибка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

Процедура УстановитьКодыОбъектовКонфигурации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Код = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.Владелец.Владелец.Наименование,
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОбъектов = Выборка.Количество();
	НомерОбъекта = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ОбъектКонфигурации = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектКонфигурации.Записать();
		Исключение
			
			Событие = НСтр("ru='Обновление информационной базы'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			ТекстОшибки = НСтр("ru = 'Не удалось перезаписать объект конфигурации ""%1"" по причине:%2%3%2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.ПутьОбъекта, Символы.ПС, ОписаниеОшибки);
			
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗаписиВРегистреСведенийТребованияККонфигурации()
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТребованияРеализацияТребования.Ссылка КАК Требование,
	|	ПравилаОбнаруживаемыеОшибки.Ошибка КАК Ошибка
	|ИЗ
	|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Правила.ОбнаруживаемыеОшибки КАК ПравилаОбнаруживаемыеОшибки
	|		ПО ТребованияРеализацияТребования.ПравилоПроверки = ПравилаОбнаруживаемыеОшибки.Ссылка
	|ГДЕ
	|	ПравилаОбнаруживаемыеОшибки.Ссылка.ИспользуетсяПриПроверке
	|	И НЕ ПравилаОбнаруживаемыеОшибки.Ссылка.ПолуавтоматическаяПроверка
	|	И НЕ ПравилаОбнаруживаемыеОшибки.Ссылка.ПометкаУдаления
	|ИТОГИ ПО
	|	ТребованияРеализацияТребования.Ссылка";
	
	ДеревоТребований = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаТребования Из ДеревоТребований.Строки Цикл
		
		Если СтрокаТребования.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ТребованияККонфигурации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Требование.Установить(СтрокаТребования.Требование);
		НаборЗаписей.Прочитать();
		
		КоличествоЗаписей = НаборЗаписей.Количество();
		
		Если КоличествоЗаписей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Счет = 0 По КоличествоЗаписей - 1 Цикл
			
			Запись = НаборЗаписей[Счет];
			
			ПерваяЗапись = Истина;
			Для Каждого СтрокаОшибки Из СтрокаТребования.Строки Цикл
				Если ПерваяЗапись Тогда
					РедактируемаяЗапись = Запись;
				Иначе
					РедактируемаяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(РедактируемаяЗапись, Запись);
				КонецЕсли;
				
				РедактируемаяЗапись.Ошибка = СтрокаОшибки.Ошибка;
				ПерваяЗапись = Ложь;
			КонецЦикла;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРасширенияСНевернымВладельцем()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонфигурацииРасширения.Расширение КАК Расширение,
	|	(КонфигурацииРасширения.Расширение.Владелец <> КонфигурацииРасширения.Ссылка) КАК ВладелецНеСовпадает
	|ПОМЕСТИТЬ ТаблицаРасширений
	|ИЗ
	|	Справочник.Конфигурации.Расширения КАК КонфигурацииРасширения
	|ГДЕ
	|	НЕ КонфигурацииРасширения.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасширений.Расширение КАК Расширение,
	|	ЕСТЬNULL(СтруктураКонфигурации.Ссылка, """") КАК Объект
	|ИЗ
	|	ТаблицаРасширений КАК ТаблицаРасширений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|		ПО СтруктураКонфигурации.Расширение = ТаблицаРасширений.Расширение
	|		И НЕ СтруктураКонфигурации.ПометкаУдаления
	|ГДЕ
	|	ТаблицаРасширений.ВладелецНеСовпадает
	|ИТОГИ ПО
	|	Расширение";
	
	ВыборкаРасширений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРасширений.Следующий() Цикл
		
		ВыборкаОбъектовКонфигурации = ВыборкаРасширений.Выбрать();
		Пока ВыборкаОбъектовКонфигурации.Следующий() Цикл
			
			ОбъектКонфигурации = ВыборкаОбъектовКонфигурации.Объект;
			Если НЕ ЗначениеЗаполнено(ОбъектКонфигурации) Тогда
				Продолжить;
			КонецЕсли;
			
			Элемент = ОбъектКонфигурации.ПолучитьОбъект();
			Элемент.УстановитьПометкуУдаления(Истина);
			Элемент.Записать();
			
		КонецЦикла;
		
		Элемент = ВыборкаРасширений.Расширение.ПолучитьОбъект();
		Элемент.УстановитьПометкуУдаления(Истина);
		Элемент.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#Область ФормированиеОписанияИзмененийПрограммы

Процедура ПоказатьОписаниеИзмененийСистемы() Экспорт
	
	#Если Клиент Тогда
	ПоказатьОписание = ВыводитьОписаниеПользователю();
	
	Если ПоказатьОписание Тогда
		ОткрытьФорму("ОбщаяФорма.ОписаниеИзмененийПрограммы");
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Функция ВыводитьОписаниеПользователю()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		// Анонимным пользователям новое в версии не показываем.
		Возврат Ложь;
	КонецЕсли;
	
	ПоследняяВерсия = ПоследняяВерсияОтображенияИзмененийСистемы();
	Если ПоследняяВерсия = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Разделы = РазделыОписанияИзменений();
	
	Если Разделы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПолучитьВерсииБольшеЗаданной(Разделы, ПоследняяВерсия).Количество() > 0;
	
КонецФункции

// Возвращает список разделов описания изменений системы.
//
// Возвращаемое значение:
//  СписокЗначение - Значение - вес версии (число),
//    Представление - строка версии.
//
Функция РазделыОписанияИзменений() Экспорт
	
	Разделы = Новый СписокЗначений;
	ВесВерсииМетаданных = ВесВерсии(Метаданные.Версия);
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийПрограммы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		ПредикатВерсии = "Версия";
		ПредикатШапки = "Шапка";
		Макет = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
		
		Для каждого Область Из Макет.Области Цикл
			Если СтрНайти(Область.Имя, ПредикатВерсии) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВерсияВФорматеОписания = Сред(Область.Имя, СтрДлина(ПредикатВерсии) + 1);
			
			Если Макет.Области.Найти(ПредикатШапки + ВерсияВФорматеОписания) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РазрядыВерсииСтроками = СтрРазделить(ВерсияВФорматеОписания, "_");
			Если РазрядыВерсииСтроками.Количество() <> 4 Тогда
				Продолжить;
			КонецЕсли;
			
			ВесВерсии = ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками);
			
			Если ВесВерсии < 1000001000 Тогда
				Продолжить;
			КонецЕсли;
			
			Версия = ""
				+ Число(РазрядыВерсииСтроками[0]) + "."
				+ Число(РазрядыВерсииСтроками[1]) + "."
				+ Число(РазрядыВерсииСтроками[2]) + "."
				+ Число(РазрядыВерсииСтроками[3]);
			
			Если ВесВерсии > ВесВерсииМетаданных Тогда
				ТекстИсключения = НСтр("ru = 'В общем макете ОписаниеИзмененийПрограммы для одного из разделов изменений
					|установлена версия выше, чем в метаданных. (%1, должна быть %2)'");
				ТекстИсключения = СтрШаблон(ТекстИсключения, Версия, Метаданные.Версия);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Разделы.Добавить(ВесВерсии, Версия);
		КонецЦикла;
		
		Разделы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	КонецЕсли;
	
	
	Возврат Разделы;
	
КонецФункции

Функция ПолучитьВерсииБольшеЗаданной(Разделы, Версия) Экспорт
	
	Результат = Новый Массив;
	
	ВесВерсии = ВесВерсии(Версия);
	Для каждого ЭлементСписка Из Разделы Цикл
		Если ЭлементСписка.Значение <= ВесВерсии Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВесВерсии(Знач Версия)
	
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ВесВерсииИзМассиваСтрок(СтрРазделить(Версия, "."));
	
КонецФункции

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
	КонецФункции

Функция ПоследняяВерсияОтображенияИзмененийСистемы() Экспорт
	
	ИмяПользователя = ИмяПользователя();
	
	ПоследняяВерсия = ХранилищеЗагрузить(ХранилищеОбщихНастроек, "ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы",,, ИмяПользователя);
	
	Возврат ПоследняяВерсия;
	
КонецФункции

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийПоТекущуюВерсию() Экспорт
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПользователя = ИмяПользователя();
	
	ХранилищеОбщихНастроек.Сохранить("ОбновлениеИБ", КлючНастроек("ПоследняяВерсияОтображенияИзмененийСистемы"),
		Метаданные.Версия, ИмяПользователя);
	
КонецПроцедуры

Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	
	Результат = Неопределено;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек(КлючНастроек),
			ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку ключа настроек, не превышающую допустимую длину 128 символов.
// Если указанная строка превышает 128, тогда вместо символов сверх 96 символов
// добавляется их хеш-сумма по алгоритму MD5 размером 32 символа.
//
// Параметры:
//  Строка - Строка - строка произвольной длины.
//
// Возвращаемое значение:
//  Строка - не более 128 символов.
//
Функция КлючНастроек(Знач Строка)
	Возврат СократитьСтрокуКонтрольнойСуммой(Строка, 128);
КонецФункции

// Сокращает строку до нужной длины, при этом обрезанная часть хешируется,
// обеспечивая уникальность строки. Проверяет длину строки на входе и, в случае
// превышения максимальной длины, преобразует ее конец по алгоритму MD5 в
// уникальную строку из 32 символов.
//
// Параметры:
//  Строка            - Строка - исходная строка произвольной длины.
//  МаксимальнаяДлина - Число  - требуемое максимальное количество символов в строке,
//                               минимальное значение: 32.
//
// Возвращаемое значение:
//   Строка - строка, не превышающая максимальную длину.
//
Функция СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина)
	
	Результат = Строка;
	Если СтрДлина(Строка) > МаксимальнаяДлина Тогда
		Результат = Лев(Строка, МаксимальнаяДлина - 32);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, МаксимальнаяДлина - 32 + 1));
		Результат = Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
