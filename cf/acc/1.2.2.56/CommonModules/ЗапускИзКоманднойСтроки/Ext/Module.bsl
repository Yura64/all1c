
#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьСведенияОКонфигурацииИзФайлаXML(КонфигурацияОбъект, ФайлНастроекПроверки) Экспорт
	
	ТекстОшибки = "";
	
	Если КонфигурацияОбъект = Неопределено Тогда
		КонфигурацияОбъект = Справочники.Конфигурации.СоздатьЭлемент();
	КонецЕсли;
	
	// Построение дерева значений на основании данных файла XML.
	ДеревоДанных = РазборФайловXML.XML_РазобратьФайлВыгрузки(ФайлНастроекПроверки);
	ДеревоКонфигурации = ПолучитьСтрокуЭлементаДереваДанных(ДеревоДанных, "Конфигурация");
	Если ДеревоКонфигурации = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Файл с настройками конфигурации имеет неверную структуру.'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	// Заполнение реквизитов конфигурации.
	КоллекцияРеквизитов = КонфигурацияОбъект.Метаданные().Реквизиты;
	ТекстОшибки = ЗаполнитьРеквизитыКонфигурации(ДеревоКонфигурации, "Реквизиты", КонфигурацияОбъект, КоллекцияРеквизитов,
		КонфигурацияОбъект.Ссылка);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонфигурацияОбъект.ОтветственныйЗаКонфигурацию) Тогда
		КонфигурацияОбъект.ОтветственныйЗаКонфигурацию = Справочники.Пользователи.НайтиПоНаименованию("Не авторизован");
	КонецЕсли;
	
	// Заполнение стандартных реквизитов конфигурации.
	КоллекцияРеквизитов = КонфигурацияОбъект.Метаданные().СтандартныеРеквизиты;
	ЗаполнитьРеквизитыКонфигурации(ДеревоКонфигурации, "СтандартныеРеквизиты", КонфигурацияОбъект, КоллекцияРеквизитов,
		КонфигурацияОбъект.Ссылка);
	
	// Если не удалось заполнить наименование конфигурации из файла,
	// тогда формирование наименования конфигурации по схеме: папка, в которой находится база + текущая дата.
	Если НЕ ЗначениеЗаполнено(КонфигурацияОбъект.Наименование) Тогда
		КаталогКонфигурации = ПолучитьСтрокуЭлементаДереваДанных(ДеревоКонфигурации, "Реквизиты.КаталогКонфигурации", Истина);
		
		Если НЕ ЗначениеЗаполнено(КаталогКонфигурации) Тогда
			ТекстОшибки = НСтр("ru='Не указан путь к проверяемой базе.'");
			Возврат ТекстОшибки;
		КонецЕсли;
		
		МассивПути = СтрРазделить(КаталогКонфигурации, "\");
		Если МассивПути.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='Путь к проверяемой базе указан неверно.'");
			Возврат ТекстОшибки;
		КонецЕсли;
		
		Папка = МассивПути[МассивПути.ВГраница()];
		КонфигурацияОбъект.Наименование = СтрШаблон("%1_%2", Папка, ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Проверка строки запуска платформы.
	Если НЕ ФайлСуществует(КонфигурацияОбъект.СтрокаЗапускаПлатформы) Тогда
		КаталогМаксимальногоРелиза = ПолучитьКаталогМаксимальногоРелизаПлатформы(КонфигурацияОбъект.ВерсияПлатформы);
		КонфигурацияОбъект.СтрокаЗапускаПлатформы = КаталогМаксимальногоРелиза + "\bin\1cv8.exe";
	КонецЕсли;
	
	// После заполнения реквизитов записываем конфигурацию, если она новая,
	// это необходимо для обновления списка расширений конфигурации,
	// заполнения справочников "Расширения" и "ВариантыПроверки".
	Если КонфигурацияОбъект.ЭтоНовый() Тогда
		Попытка
			КонфигурацияОбъект.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстОшибки = СтрШаблон(НСтр("ru='Запись конфигурации завершилась ошибкой:%1%2'"), Символы.ПС, ОписаниеОшибки);
			Возврат ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Ссылка = КонфигурацияОбъект.Ссылка;
	
	// Обновление вариантов проверки конфигурации.
	ВариантПроверкиВручную = ПолучитьВариантПроверкиКонфигурации(ДеревоКонфигурации,
		"Реквизиты.ВариантПроверкиВручную", Ссылка);
	КонфигурацияОбъект.ВариантПроверкиВручную = ВариантПроверкиВручную;
	
	// Заполнение табличных частей конфигурации.
	КоллекцияТабличныхЧастей = КонфигурацияОбъект.Метаданные().ТабличныеЧасти;
	СтрокаДерева = ПолучитьСтрокуЭлементаДереваДанных(ДеревоКонфигурации, "ТабличныеЧасти");
	Если СтрокаДерева = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Файл со сведениями конфигурации имеет неверную структуру.'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	СтрокиТабличныхЧастей = СтрокаДерева.Строки;
	
	Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличныхЧастей Цикл
		ИмяТабличнойЧасти = СтрокаТабличнойЧасти.Имя;
		ТаблицаКонфигурации = КонфигурацияОбъект[ИмяТабличнойЧасти];
		ТаблицаКонфигурации.Очистить();
		КоллекцияРеквизитовТабличнойЧасти = КоллекцияТабличныхЧастей[ИмяТабличнойЧасти].Реквизиты;
		МассивСтрокТабличнойЧасти = РазборФайловXML.НайтиСтрокиДереваДанных("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
		Для Каждого Строка Из МассивСтрокТабличнойЧасти Цикл
			НоваяСтрока = ТаблицаКонфигурации.Добавить();
			ЗаполнитьРеквизитыКонфигурации(Строка, "", НоваяСтрока, КоллекцияРеквизитовТабличнойЧасти, Ссылка);
			
			Если ИмяТабличнойЧасти = "Расписания" Тогда
				ВариантПроверкиПоРасписанию = ПолучитьВариантПроверкиКонфигурации(Строка,
					"ВариантПроверкиПоРасписанию", Ссылка);
				НоваяСтрока.ВариантПроверкиПоРасписанию = ВариантПроверкиПоРасписанию;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		КонфигурацияОбъект.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(НСтр("ru='Запись конфигурации завершилась с ошибкой:%1%2'"), Символы.ПС, ОписаниеОшибки);
		Возврат ТекстОшибки;
	КонецПопытки;
	
	// Запись требований в регистр сведений "ТребованияККонфигурации".
	МассивВариантовПроверки = РазборФайловXML.НайтиСтрокиДереваДанных("ТребованияКонфигурации", ДеревоКонфигурации);
	Если МассивВариантовПроверки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не удалось записать требования конфигурации.'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	СтрокиВариантовПроверки = МассивВариантовПроверки[0].Строки;
	
	НаборТребований = РегистрыСведений.ТребованияККонфигурации.СоздатьНаборЗаписей();
	НаборТребований.Отбор.Конфигурация.Установить(Ссылка);
	
	СтруктураОтбораКоллекцииОшибок = Новый Структура;
	СтруктураОтбораКоллекцииОшибок.Вставить("Имя", "КодОшибки");
	
	Для Каждого СтрокаВариантаПроверки Из СтрокиВариантовПроверки Цикл
		
		ИмяВариантаПроверки = ПолучитьСтрокуЭлементаДереваДанных(СтрокаВариантаПроверки, "Атрибуты.ИмяВарианта", Истина);
		Если ИмяВариантаПроверки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантПроверки = РаботаСИнтерфейсом.ПолучитьСсылкуВариантаПроверки(Ссылка, ИмяВариантаПроверки);
		Если НЕ ЗначениеЗаполнено(ВариантПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТребований = СтрокаВариантаПроверки.Строки;
		
		Для Каждого СтрокаТребования Из СтрокиТребований Цикл
			
			Если СтрСравнить(СтрокаТребования.Имя, "Требование") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Требование = ПолучитьСсылкуНаТребование(СтрокаТребования);
			
			Если НЕ ЗначениеЗаполнено(Требование) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиОшибок = СтрокаТребования.Строки.НайтиСтроки(СтруктураОтбораКоллекцииОшибок);
			Для Каждого СтрокаОшибки Из СтрокиОшибок Цикл
				
				Ошибка = Справочники.ОбнаруживаемыеОшибки.НайтиПоКоду(СтрокаОшибки.Значение);
				
				НоваяСтрока = НаборТребований.Добавить();
				НоваяСтрока.Конфигурация = Ссылка;
				НоваяСтрока.ВариантПроверки = ВариантПроверки;
				НоваяСтрока.Требование = Требование;
				НоваяСтрока.Ошибка = Ошибка;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	НаборТребований.Записать();
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ЗаполнитьРеквизитыКонфигурации(ДеревоДанных, ПутьПоиска, Объект, КоллекцияМетаданных, КонфигурацияСсылка)
	
	ТекстОшибки = "";
	
	Если НЕ ПустаяСтрока(ПутьПоиска) Тогда
		СтрокаДерева = ПолучитьСтрокуЭлементаДереваДанных(ДеревоДанных, ПутьПоиска);
		Если СтрокаДерева = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Файл со сведениями конфигурации имеет неверную структуру.'");
			Возврат ТекстОшибки;
		КонецЕсли;
		
		Коллекция = СтрокаДерева.Строки;
		
	Иначе
		Коллекция = ДеревоДанных.Строки
	КонецЕсли;
	
	Для Каждого СтрокаРеквизита Из Коллекция Цикл
		ИмяРеквизита = СтрокаРеквизита.Имя;
		Если ТипЗнч(КоллекцияМетаданных) = Тип("КоллекцияОбъектовМетаданных") Тогда
			ОбъектМетаданных = КоллекцияМетаданных.Найти(ИмяРеквизита);
		Иначе
			ОбъектМетаданных = КоллекцияМетаданных[ИмяРеквизита];
		КонецЕсли;
		
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеТипаОбъектаМетаданных = ОбъектМетаданных.Тип;
		Значение = СтрокаРеквизита.Значение;
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("Строка")) Тогда
			Значение = Строка(Значение);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("Число")) Тогда
			ЭтоЧисло(Значение);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("Булево")) Тогда
			ЭтоБулево(Значение);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("Дата")) Тогда
			Попытка
				Значение = Дата(Значение);
			Исключение
				ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заполнить реквизит ""%1""'"), ИмяРеквизита);
				Возврат ТекстОшибки;
			КонецПопытки;
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Значение = Новый ХранилищеЗначения(ЗначениеИзСтрокиВнутр(Значение));
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
			Значение = Справочники.Пользователи.НайтиПоНаименованию(Значение);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("СправочникСсылка.Расширения")) Тогда
			Значение = Справочники.Расширения.НайтиПоНаименованию(Значение,,, КонфигурацияСсылка);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("СправочникСсылка.Конфигурации")) Тогда
			Значение = Справочники.Конфигурации.НайтиПоНаименованию(Значение);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("СправочникСсылка.ПричиныОсобенности")) Тогда
			Значение = Справочники.ПричиныОсобенности.НайтиПоНаименованию(Значение);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("ПеречислениеСсылка.ВидыГруппировокСППР")) Тогда
			Значение = ПолучитьЗначениеПеречисленияПоСинониму("ВидыГруппировокСППР", Значение);
		ИначеЕсли ОписаниеТипаОбъектаМетаданных.СодержитТип(Тип("ПеречислениеСсылка.ВидыИсключенийИзПроверки")) Тогда
			Значение = ПолучитьЗначениеПеречисленияПоСинониму("ВидыИсключенийИзПроверки", Значение);
		КонецЕсли;
		
		Объект[ИмяРеквизита] = Значение;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьВариантПроверкиКонфигурации(ДеревоДанных, ПутьПоиска, Конфигурация)
	
	ВариантПроверки = ПолучитьСтрокуЭлементаДереваДанных(ДеревоДанных, ПутьПоиска, Истина);
	Если ВариантПроверки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВариантПроверки) Тогда
		Возврат Справочники.ВариантыПроверки.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыПроверки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыПроверки КАК ВариантыПроверки
	|ГДЕ
	|	ВариантыПроверки.Конфигурация = &Конфигурация
	|	И ВариантыПроверки.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", ВариантПроверки);
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НовыйВариант = Справочники.ВариантыПроверки.СоздатьЭлемент();
	НовыйВариант.Наименование = ВариантПроверки;
	НовыйВариант.Конфигурация = Конфигурация;
	НовыйВариант.Записать();
	
	Возврат НовыйВариант.Ссылка;
	
КонецФункции

Функция ПолучитьСтрокуЭлементаДереваДанных(ДеревоДанных, ПутьПоиска, ПолучитьЗначение = Ложь)
	
	МассивСтрок = РазборФайловXML.НайтиСтрокиДереваДанных(ПутьПоиска, ДеревоДанных);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ?(ПолучитьЗначение, СокрЛП(МассивСтрок[0].Значение), МассивСтрок[0]);
	
КонецФункции

Функция ПолучитьСсылкуНаТребование(СтрокаДерева);
	
	ИмяТребования = ПолучитьСтрокуЭлементаДереваДанных(СтрокаДерева, "Атрибуты.Имя", Истина);
	
	РодительТребования = ПолучитьСтрокуЭлементаДереваДанных(СтрокаДерева, "Атрибуты.Родитель", Истина);
	Если РодительТребования = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Требования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Наименование = &НаименованиеТребования
	|	"+ ?(ЗначениеЗаполнено(РодительТребования),"И Требования.Родитель.Наименование = &НаименованиеРодителя",
		"И Требования.Родитель = &ПустаяСсылка");
	
	Запрос.УстановитьПараметр("НаименованиеТребования", ИмяТребования);
	Запрос.УстановитьПараметр("НаименованиеРодителя", РодительТребования);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Требования.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ВыгрузитьОтчетВыполненияПроверкиВФорматJUnitXML(Результат, ФайлРезультата) Экспорт
	
	Конфигурация = Результат.Конфигурация;
	ДокументПроверки = Результат.ДокументПроверки;
	
	ИмяКонфигурации = ?(Конфигурация = Неопределено, "", Конфигурация.Наименование);
	КаталогКонфигурации = ?(Конфигурация = Неопределено, "", Конфигурация.КаталогКонфигурации);
	Версия = ?(ДокументПроверки = Неопределено, НайтиПоследнююВерсию(Конфигурация), ДокументПроверки.ВерсияКонфигурации);
	
	Если ДокументПроверки = Неопределено Тогда
		Версия = НайтиПоследнююВерсию(Конфигурация);
		ВремяНачала = 0;
		ВремяОкончания = 0;
		КоличествоОбъектов = 0;
		МассивОбъектов = Новый Массив;
		НомерПроверки = 1;
	Иначе
		Версия = ДокументПроверки.ВерсияКонфигурации;
		ВремяНачала = ДокументПроверки.ВремяНачала;
		ВремяОкончания = ДокументПроверки.ВремяОкончания;
		
		СоставОбъектов = ДокументПроверки.СоставОбъектов;
		КоличествоОбъектов = СоставОбъектов.Количество();
		Если КоличествоОбъектов = 0 Тогда
			КоличествоОбъектов = "все";
		КонецЕсли;
		МассивОбъектов = СоставОбъектов.ВыгрузитьКолонку("Объект");
		
		НомерПроверки = ДокументПроверки.Номер;
	КонецЕсли;
	
	ВремяВыполнения = ВремяОкончания - ВремяНачала;
	
	КоличествоПровалов = ?(Результат.Успешно, 0, 1);
	
	КоличествоОшибок = 0;
	ДеревоОшибок = Новый ДеревоЗначений;
	Если Результат.Успешно Тогда
		КоличествоОшибок = ПолучитьОбщееКоличествоОшибокПослеПроверки(Версия);
		ДеревоОшибок = ПолучитьНайденныеОшибкиПоМассивуОбъектов(Версия, КоличествоОбъектов, МассивОбъектов);
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Попытка
		
		// Создать объект записи XML и открыть файл
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(ФайлРезультата);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
		
		// общее описание теста
		
		НоваяЗаписьXML.ЗаписатьАтрибут("package", "acc");
		НоваяЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ВремяВыполнения));
		НоваяЗаписьXML.ЗаписатьАтрибут("timestamp", XMLСтрока(ТекущаяДата));
		
		Если Результат.Успешно И КоличествоОшибок > 0 Тогда
			КоллекцияОбъектовСОшибками = ДеревоОшибок.Строки;
			Для Каждого СтрокаОбъекта Из КоллекцияОбъектовСОшибками Цикл
				
				ПутьОбъекта = XMLСтрока(СтрокаОбъекта.Объект.Путь);
				
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
				НоваяЗаписьXML.ЗаписатьАтрибут("name", ПутьОбъекта);
				НоваяЗаписьXML.ЗаписатьАтрибут("time", "0");
				
				Для Каждого СтрокаОшибки Из СтрокаОбъекта.Строки Цикл
					
					Ошибка = Строка(СтрокаОшибки.Ошибка);
					
					Если НЕ ЗначениеЗаполнено(Ошибка) Тогда
						Продолжить;
					КонецЕсли;
					
					КодОшибки = XMLСтрока(СокрЛП(СтрокаОшибки.Ошибка.Код));
					
					КлючОшибки = СокрЛП(УдалитьНедопустимыеСимволыXML(СтрШаблон(
						НСтр("ru = 'АПК:%1 %2 %3 [N%4]'"),
						КодОшибки,
						ПутьОбъекта,
						СтрокаОшибки.МестоОбнаружения,
						XMLСтрока(СтрокаОшибки.Номер))));
					
					НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
					НоваяЗаписьXML.ЗаписатьАтрибут("name", КлючОшибки);
					
					НоваяЗаписьXML.ЗаписатьНачалоЭлемента("failure");
					НоваяЗаписьXML.ЗаписатьАтрибут("message", XMLСтрока(Ошибка));
					Сообщение = УдалитьНедопустимыеСимволыXML(СтрШаблон(
						НСтр("ru='Ошибка: %1
						         |Объект: %2
						         |Место: %3
						         |Уточнение:
						         |%4'"),
						Ошибка,
						ПутьОбъекта,
						СтрокаОшибки.МестоОбнаружения,
						СтрокаОшибки.Уточнение));
					НоваяЗаписьXML.ЗаписатьСекциюCDATA(Символы.ПС + XMLСтрока(Сообщение) + Символы.ПС);
					НоваяЗаписьXML.ЗаписатьКонецЭлемента();
					НоваяЗаписьXML.ЗаписатьКонецЭлемента();
					
				КонецЦикла;
				
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЦикла;
		ИначеЕсли Результат.Успешно И КоличествоОшибок = 0 Тогда
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
			НоваяЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(КаталогКонфигурации));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
			НоваяЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(НСтр("ru='Ошибка при подготовке к проверке'")));
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("error");
			НоваяЗаписьXML.ЗаписатьСекциюCDATA(XMLСтрока(УдалитьНедопустимыеСимволыXML(Результат.ТекстОшибки)));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.Закрыть();
		
	Исключение
		Событие = НСтр("ru='Запись результата проверки в JUnit файл'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось сформировать файл ""%1"" по причине:
			|%2'"), ФайлРезультата, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие,,,, Сообщение);
	КонецПопытки;
	
КонецПроцедуры

Функция УдалитьНедопустимыеСимволыXML(Знач Результат)
	Позиция = НайтиНедопустимыеСимволыXML(Результат);
	Пока Позиция > 0 Цикл
		Результат = Лев(Результат, Позиция - 1) + Сред(Результат, Позиция + 1);
		Позиция = НайтиНедопустимыеСимволыXML(Результат, Позиция);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьНайденныеОшибкиПоМассивуОбъектов(Версия, КоличествоОбъектов, МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НайденныеОшибки.Объект КАК Объект,
		|	НайденныеОшибки.Ошибка КАК Ошибка,
		|	НайденныеОшибки.Правило КАК Правило,
		|	НайденныеОшибки.МестоОбнаружения КАК МестоОбнаружения,
		|	НайденныеОшибки.Уточнение КАК Уточнение,
		|	НайденныеОшибки.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
		|ГДЕ
		|	НайденныеОшибки.Состояние = &Состояние
		|	И НайденныеОшибки.Объект.Владелец = &Версия
		|ИТОГИ ПО
		|	Объект";

	Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	
	Если КоличествоОбъектов = "все" Тогда
		Запрос.УстановитьПараметр("Версия", Версия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И НайденныеОшибки.Объект.Владелец = &Версия",
			"И НайденныеОшибки.Объект В (&МассивОбъектов)");
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#КонецОбласти