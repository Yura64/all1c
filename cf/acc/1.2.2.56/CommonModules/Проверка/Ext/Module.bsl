
#Область СлужебныеПроцедурыИФункции

#Область ПроведениеДокументаПроверкаВерсии

Процедура ОбработкаПроведенияДокументаПроверки(СтруктураПроверки, СтруктураПроверкиДляРегистрацииВСППР,
	ФайлРезультатаПлатформеннойПроверки = "", Расширение = Неопределено) Экспорт
	
	ПроверкаВерсии = СтруктураПроверки.ПроверкаВерсии;
	ТаблицаЖурнала = СтруктураПроверки.ТаблицаЖурнала;
	
	Конфигурация = ПроверкаВерсии.Конфигурация;
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	Дата = ПроверкаВерсии.Дата;
	ЖурналПроверки = ПроверкаВерсии.ЖурналПроверки;
	РегистрироватьВсеОшибкиКакОсобенности = ПроверкаВерсии.РегистрироватьВсеОшибкиКакОсобенности;
	
	ИспользоватьРегистрациюВСППР = ИнтеграцияССППР.ИспользоватьРегистрациюВСППР(Конфигурация);
	
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("Версия", Версия);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("Дата", Дата);
	СтруктураПроверкиДляРегистрацииВСППР.Вставить("ТаблицаЖурнала", ТаблицаЖурнала);
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ФайлРезультатаПлатформеннойПроверки", ФайлРезультатаПлатформеннойПроверки);
	ПараметрыПроведения.Вставить("ТаблицаЖурнала", ТаблицаЖурнала);
	
	// Устанавливаем максимальное количество ошибок, предполагаем, что больше 1 млрд ошибок не будет.
	МаксимальноеКоличествоОшибокОдногоВида = ?(РегистрироватьВсеОшибкиКакОсобенности, 1000000000, 10000);
	ПараметрыПроведения.Вставить("МаксимальноеКоличествоОшибокОдногоВида", МаксимальноеКоличествоОшибокОдногоВида);
	
	ПровестиДокумент(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, СтруктураПроверкиДляРегистрацииВСППР,
		Расширение);
	
	ПроверкаВерсии.ЖурналПроверки = ЖурналПроверки;
	
КонецПроцедуры

Процедура ПровестиДокумент(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, СтруктураПроверкиДляРегистрацииВСППР,
	Знач Расширение = Неопределено)
	
	РегистрироватьВсеОшибкиКакОсобенности = ПроверкаВерсии.РегистрироватьВсеОшибкиКакОсобенности;
	ОбнаруженоОшибок = ПроверкаВерсии.ОбнаруженоОшибок;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	Расширение = ПолучитьСсылкуРасширения(Расширение);
	
	ЗаполнитьКэшируемыеЗначения(ПроверкаВерсии, Расширение, ПараметрыПроведения);
	
	ПроверитьОбъекты(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки);
	
	// Удалим из ошибок помеченные на удаление объекты.
	УдалитьОшибкиОбъектовПомеченныхНаУдаление(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, Расширение);
	
	// Скопируем ошибки из эталона, необходимо для правильно синхронизации ошибок.
	ТаблицаНомеровОшибок = СкопироватьОшибкиКонфигурации(ПроверкаВерсии.Эталон, ПроверкаВерсии.ВерсияКонфигурации, Истина,
		Перечисления.СостояниеОшибки.Особенность);
	СкопироватьКомментарииНайденныхОшибок(ТаблицаНомеровОшибок);
	
	СинхронизироватьОшибкиИОсобенности(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки);
	
	// Если необходимо зарегистрировать все ошибки как особенности, то нет ограничения по количеству ошибок.
	Если РегистрироватьВсеОшибкиКакОсобенности Тогда
		// Можно вынести из цикла
		ЗарегистрироватьВсеОшибкиКакОсобенности(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки);
	Иначе
		// Иначе дополнительно регистрируем ошибки за конфигурацию с ограничением в 10000 ошибок.
		ДобавитьОшибкиЗаКонфигурацию(Расширение, ПроверкаВерсии, ПараметрыПроведения);
	КонецЕсли;
	
	Если СтруктураПроверкиДляРегистрацииВСППР.ИспользоватьРегистрациюВСППР Тогда
		
		СтруктураПроверкиДляРегистрацииВСППР.Вставить("ЖурналПроверки",  ЖурналПроверки);
		СтруктураПроверкиДляРегистрацииВСППР.Вставить("ТаблицаЖурнала",  ТаблицаЖурнала);
		СтруктураПроверкиДляРегистрацииВСППР.Вставить("ПравилаПроверки", ПараметрыПроведения.ПравилаПроверки);
		
		ТаблицаОшибокАПК = ПараметрыПроведения.ТаблицаОшибокАПК;
		
		ИнтеграцияССППР.ЗарегистрироватьОшибкиСППР(СтруктураПроверкиДляРегистрацииВСППР, ТаблицаОшибокАПК);
		
		ЖурналПроверки = СтруктураПроверкиДляРегистрацииВСППР.ЖурналПроверки;
		Если СтруктураПроверкиДляРегистрацииВСППР.Свойство("ОбнаруженоОшибок") Тогда
			ОбнаруженоОшибок = СтруктураПроверкиДляРегистрацииВСППР.ОбнаруженоОшибок;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьОшибкиАПК(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки);
	ПеренестиКомментарии(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки);
	
	ПроверкаВерсии.ОбнаруженоОшибок = ОбнаруженоОшибок;
	
КонецПроцедуры

Процедура ЗаполнитьКэшируемыеЗначения(ПроверкаВерсии, Расширение, ПараметрыПроведения)
	
	// Выполним кэширование вспомогательной информации.
	ТаблицаТребований = ПроверкаВерсии.СоставТребований.Выгрузить();
	
	ТаблицаОшибок = ТаблицаТребований.Скопировать(, "Ошибка");
	ТаблицаОшибок.Свернуть("Ошибка");
	МассивОшибок = ТаблицаОшибок.ВыгрузитьКолонку("Ошибка");
	РегистрируемыеОшибки = Новый Соответствие;
	Для Каждого СтрокаОшибки Из МассивОшибок Цикл
		РегистрируемыеОшибки.Вставить(СтрокаОшибки, Истина);
	КонецЦикла;
	
	ТаблицаТребований.Свернуть("Требование");
	Требования = ТаблицаТребований.ВыгрузитьКолонку("Требование");
	
	ТаблицаПравил = ПроверкаВерсии.СоставПравил.Выгрузить();
	ПравилаПроверки = ТаблицаПравил.ВыгрузитьКолонку("Правило");
	
	ИзмененныеПравила = ПолучитьИзмененныеПравила(ПроверкаВерсии, ПравилаПроверки);
	
	ПараметрыПроведения.Вставить("Требования", Требования);
	ПараметрыПроведения.Вставить("ПравилаПроверки", ПравилаПроверки);
	ПараметрыПроведения.Вставить("ИзмененныеПравила", ИзмененныеПравила);
	ПараметрыПроведения.Вставить("РегистрируемыеОшибки", РегистрируемыеОшибки);
	ПараметрыПроведения.Вставить("ПравилаПлатформеннойПроверки", ПолучитьПравилаПлатформеннойПроверки());
	
КонецПроцедуры

Функция ПолучитьИзмененныеПравила(ПроверкаВерсии, ПравилаПроверки)
	
	ИзмененныеПравила = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПроверкаВерсииСоставПравил.Правило КАК Правило,
	|	МАКСИМУМ(ПроверкаВерсииСоставПравил.Ссылка.Дата) КАК Дата
	|ПОМЕСТИТЬ ТаблицаДатПоследнихПроверокПравилом
	|ИЗ
	|	Документ.ПроверкаВерсии.СоставПравил КАК ПроверкаВерсииСоставПравил
	|ГДЕ
	|	ПроверкаВерсииСоставПравил.Ссылка <> &ПроверкаВерсии
	|	И ПроверкаВерсииСоставПравил.Ссылка.ВерсияКонфигурации = &Версия
	|	И ПроверкаВерсииСоставПравил.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверкаВерсииСоставПравил.Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДатПоследнихПроверокПравилом.Правило КАК Правило,
	|	ПроверкаВерсииСоставПравил.ХешСумма КАК ХешСумма
	|ПОМЕСТИТЬ ТаблицаПравилСХешСуммами
	|ИЗ
	|	ТаблицаДатПоследнихПроверокПравилом КАК ТаблицаДатПоследнихПроверокПравилом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроверкаВерсии.СоставПравил КАК ПроверкаВерсииСоставПравил
	|		ПО ТаблицаДатПоследнихПроверокПравилом.Правило = ПроверкаВерсииСоставПравил.Правило
	|			И ТаблицаДатПоследнихПроверокПравилом.Дата = ПроверкаВерсииСоставПравил.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверкаВерсииСоставПравил.Правило КАК Правило
	|ИЗ
	|	Документ.ПроверкаВерсии.СоставПравил КАК ПроверкаВерсииСоставПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПравилСХешСуммами КАК ТаблицаПравилСХешСуммами
	|		ПО ПроверкаВерсииСоставПравил.Правило = ТаблицаПравилСХешСуммами.Правило
	|			И ПроверкаВерсииСоставПравил.ХешСумма = ТаблицаПравилСХешСуммами.ХешСумма
	|ГДЕ
	|	ПроверкаВерсииСоставПравил.Ссылка = &ПроверкаВерсии
	|	И ТаблицаПравилСХешСуммами.Правило ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ПроверкаВерсии", ПроверкаВерсии.Ссылка);
	Запрос.УстановитьПараметр("Версия", ПроверкаВерсии.ВерсияКонфигурации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИзмененныеПравила.Вставить(Выборка.Правило, Истина);
	КонецЦикла;
	
	Возврат ИзмененныеПравила;
	
КонецФункции

Функция ПолучитьПравилаПлатформеннойПроверки()
	
	ТребованиеПлатформеннойПроверки = Справочники.Требования.ПлатформеннаяПроверкаКонфигурации;
	
	Если НЕ ЗначениеЗаполнено(ТребованиеПлатформеннойПроверки) Тогда
		НаименованиеТребования = НСтр("ru='Платформенная проверка конфигурации'");
		ТребованиеПлатформеннойПроверки = Справочники.Требования.НайтиПоНаименованию(НаименованиеТребования);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТребованиеПлатформеннойПроверки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ПравилаПлатформеннойПроверки = ТребованиеПлатформеннойПроверки.РеализацияТребования.ВыгрузитьКолонку("ПравилоПроверки");
	
	Возврат ПравилаПлатформеннойПроверки;
	
КонецФункции

Процедура ПроверитьОбъекты(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки)
	
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	Конфигурация = ПроверкаВерсии.Конфигурация;
	СоставОбъектов = ПроверкаВерсии.СоставОбъектов;
	РегистрируемыеОшибки = ПараметрыПроведения.РегистрируемыеОшибки;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	ЗамерВремениВыполнения = Новый ТаблицаЗначений;
	ЗамерВремениВыполнения.Колонки.Добавить("Объект");
	ЗамерВремениВыполнения.Колонки.Добавить("Правило");
	ЗамерВремениВыполнения.Колонки.Добавить("Время");
	
	ПараметрыПроведения.Вставить("ЗамерВремениВыполнения", ЗамерВремениВыполнения);
	
	// Инициализируем ядро для проверки.
	Ядро = Обработки.Ядро.Создать();
	Ядро.УстановитьКонтекстРасширения(Расширение);
	Ядро.УстановитьКонтекстВерсии(Версия);
	Ядро.УстановитьРегистрациюВТаблицу();
	Ядро.УстановитьМаксимальноеКоличествоОшибокОдногоВида(ПараметрыПроведения.МаксимальноеКоличествоОшибокОдногоВида);
	Ядро.СоответствиеРегистрируемыхОшибок = РегистрируемыеОшибки;
	
	Текст = НСтр("ru='Начало сбора исключений из проверки объектов %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	Ядро.ЗаполнитьТаблицуИсключенийИзПроверки();
	
	Текст = НСтр("ru='Сбор исключений из проверки объектов %1 завершен'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	ПроверенныеОбъекты = Новый Массив;
	
	// Определяем количество объектов для проверки.
	ЗапросПоОбъектам = Новый Запрос;
	ЗапросПоОбъектам.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Код КАК Код,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК ТипОбъекта,
	|	СтруктураКонфигурации.Путь КАК Путь,
	|	СтруктураКонфигурации.Родитель КАК Родитель,
	|	СтруктураКонфигурации.Родитель.ТипОбъекта КАК РодительТипОбъекта,
	|	СтруктураКонфигурации.СобраныСведения КАК СобраныСведения
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И НЕ СтруктураКонфигурации.Исключен
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И НЕ СтруктураКонфигурации.ТипОбъекта = &ТипОбъектаКорень
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|УПОРЯДОЧИТЬ ПО
	|	НомерПоПорядку";
	
	ЗапросПоОбъектам.УстановитьПараметр("Расширение", Расширение);
	ЗапросПоОбъектам.УстановитьПараметр("Владелец", Версия);
	ЗапросПоОбъектам.УстановитьПараметр("ТипОбъектаКорень", Перечисления.ТипыОбъектов.Корень);
	
	ВыборкаОбъектов = ЗапросПоОбъектам.Выполнить().Выбрать();
	
	СтруктураОбъектовДляПроверки = ПолучитьСоответствиеОбъектовИПравил(ПроверкаВерсии, ПараметрыПроведения, Расширение);
	ПараметрыПроведения.Вставить("СоответствиеОбъектовИПравил", СтруктураОбъектовДляПроверки.СоответствиеОбъектовИПравил);
	ПараметрыПроведения.Вставить("КоличествоОбъектовДляПроверки", СтруктураОбъектовДляПроверки.КоличествоОбъектовДляПроверки);
	
	СообщитьКоличествоОбъектовДляПроверки(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, Расширение);
	
	Текст = НСтр("ru='Начало проверки %1 на соответствие стандартам'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется проверка объектов (%1%%)'");
	ПараметрыПроведения.Вставить("Ядро", Ядро);
	ПараметрыПроведения.Вставить("ПроверкаВерсии", ПроверкаВерсии);
	ПараметрыПроведения.Вставить("Расширение", Расширение);
	ПараметрыПроведения.Вставить("ПроверенныеОбъекты", ПроверенныеОбъекты);
	ПараметрыПроведения.Вставить("ТекстСостоянияШаблон", ТекстСостоянияШаблон);
	ПараметрыПроведения.Вставить("ТолькоПравилаПлатформеннойПроверки", Ложь);
	
	ПроверитьВыборкуОбъектов(ВыборкаОбъектов, ПараметрыПроведения);
	
	ЗаписатьРезультатыПлатформеннойПроверки(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, Расширение);
	// Если данные о платформенной проверке не собраны, то запомним правила и ошибки платформенной проверки.
	Если НЕ ВерсияПолучитьФлагСбораДанных(ПроверкаВерсии.ВерсияКонфигурации, "СобраныДанныеПоПроверкеКонфигурации",
		Расширение) Тогда
		
		ВыборкаОбъектов.Сбросить();
		ТекстСостоянияШаблон = НСтр("ru='Выполняется платформенная проверка объектов (%1%%)'");
		ПараметрыПроведения.Вставить("ТекстСостоянияШаблон", ТекстСостоянияШаблон);
		ПараметрыПроведения.Вставить("ТолькоПравилаПлатформеннойПроверки", Истина);
		ПроверитьВыборкуОбъектов(ВыборкаОбъектов, ПараметрыПроведения);
		
	КонецЕсли;
	
	Ядро.ЗавершитьПроверку();
	НайденныеОшибки = Ядро.ПолучитьНайденныеОшибки();
	СоответствиеОшибокИИхКоличества = Ядро.ПолучитьСоответствиеОбнаруженныхОшибокИИхКоличества();
	
	ПараметрыПроведения.Вставить("НайденныеОшибки", НайденныеОшибки);
	ПараметрыПроведения.Вставить("СоответствиеОшибокИИхКоличества", СоответствиеОшибокИИхКоличества);
	
	СоответствиеВыполненныхПравил = Ядро.СоответствиеВыполненныхПравил;
	КоличествоВыполненныхПравил = СоответствиеВыполненныхПравил.Количество();
	КоличествоВыбранныхПравил = ПараметрыПроведения.ПравилаПроверки.Количество();
	
	ДополнитьСловарьВерныхСлов(Ядро.СловаИзЯндексСловаря);
	
	Ядро = Неопределено;
	
	// Валидируем проверку требований.
	Для Каждого Требование Из ПараметрыПроведения.Требования Цикл
		ВалидироватьПроверкуТребования(Требование);
	КонецЦикла;
	
	Текст = НСтр("ru='Проверка %1 на соответствие стандартам завершена, выполнено правил %2 из %3'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения, КоличествоВыполненныхПравил, КоличествоВыбранныхПравил);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	СообщитьВремяВыполненияПравил(ПараметрыПроведения, ПроверкаВерсии, ЖурналПроверки);
	
КонецПроцедуры

Процедура ПроверитьВыборкуОбъектов(ВыборкаОбъектов, ПараметрыПроведения)
	
	Ядро = ПараметрыПроведения.Ядро;
	ПроверкаВерсии = ПараметрыПроведения.ПроверкаВерсии;
	Расширение = ПараметрыПроведения.Расширение;
	ПроверенныеОбъекты = ПараметрыПроведения.ПроверенныеОбъекты;
	ТекстСостоянияШаблон = ПараметрыПроведения.ТекстСостоянияШаблон;
	ТолькоПравилаПлатформеннойПроверки = ПараметрыПроведения.ТолькоПравилаПлатформеннойПроверки;
	ЗамерВремениВыполнения = ПараметрыПроведения.ЗамерВремениВыполнения;
	
	Конфигурация = ПроверкаВерсии.Конфигурация;
	СоставОбъектов = ПроверкаВерсии.СоставОбъектов;
	СоответствиеОбъектовИПравил = ПараметрыПроведения.СоответствиеОбъектовИПравил;
	ПравилаПлатформеннойПроверки = ПараметрыПроведения.ПравилаПлатформеннойПроверки;
	
	// Получаем количество объектов с типом "Ветка метаданных", чтобы вычесть их из общего количества объектов.
	ТипОбъектаВеткаМетаданных = Перечисления.ТипыОбъектов.ВеткаМетаданных;
	
	ТаблицаОбъектовВеткаМетаданных = Ядро.ПолучитьОбъектыКонфигурации(ТипОбъектаВеткаМетаданных, Истина, Расширение);
	КоличествоОбъектовВеткаМетаданных = ТаблицаОбъектовВеткаМетаданных.Количество();
	
	ВсегоОбъектов = ВыборкаОбъектов.Количество() - КоличествоОбъектовВеткаМетаданных;
	
	Счетчик = 0;
	ПроцентОбработанныхОбъектов = 0;
	
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	ПропуститьОбъектыСПрефиксомУдалить = НЕ Конфигурация.ПроверятьОбъектыСПрефиксомУдалить;
	
	// Последовательно проверяем каждый объект структуры метаданных конфигурации.
	ОсобыйСостав = (СоставОбъектов.Количество() > 0);
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ЭтоВеткаМетаданных = (ВыборкаОбъектов.ТипОбъекта = ТипОбъектаВеткаМетаданных);
		Если НЕ ЭтоВеткаМетаданных Тогда
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		ОбъектСсылка = ВыборкаОбъектов.Ссылка;
		ОбъектНаименование = ВыборкаОбъектов.Наименование;
		ОбъектТип = ВыборкаОбъектов.ТипОбъекта;
		
		Если ПропуститьОбъектыСПрефиксомУдалить Тогда
			Если СтрНачинаетсяС(ВРег(ОбъектНаименование), ВРег("Удалить")) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ОсобыйСостав Тогда
			Если СоставОбъектов.Найти(ОбъектСсылка, "Объект") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Пропускаем проверку ролей с префиксом "Профиль_".
		Если ОбъектТип = Перечисления.ТипыОбъектов.Роль Тогда
			Если СтрНачинаетсяС(ВРег(ОбъектНаименование), ВРег("Профиль_")) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		#Если Клиент Тогда
		Если НЕ ЭтоВеткаМетаданных Тогда
			ТекущийПроцентОбъектов = Цел(100 * Счетчик / ВсегоОбъектов);
			
			Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
				ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
				ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
				Состояние(ТекстСостояния);
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
		
		СтруктураМассивовПравил = СоответствиеОбъектовИПравил[ОбъектСсылка];
		Если СтруктураМассивовПравил = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТолькоПравилаПлатформеннойПроверки Тогда
			МассивПравил = СтруктураМассивовПравил.МассивПравилПлатформеннойПроверки;
		Иначе
			МассивПравил = СтруктураМассивовПравил.МассивПравил;
		КонецЕсли;
		
		Если МассивПравил.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Ядро.ПроверитьОбъект(ВыборкаОбъектов, МассивПравил, ПараметрыПроведения);
		
		Если ПроверенныеОбъекты.Найти(ОбъектСсылка) = Неопределено Тогда
			ПроверенныеОбъекты.Добавить(ОбъектСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	ПараметрыПроведения.ПроверенныеОбъекты = ПроверенныеОбъекты;
	
КонецПроцедуры

Функция ПолучитьСоответствиеОбъектовИПравил(ПроверкаВерсии, ПараметрыПроведения, Расширение)
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("СоответствиеОбъектовИПравил", "");
	СтруктураРезультата.Вставить("КоличествоОбъектовДляПроверки", 0);
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Выполняется формирование состава проверки'"));
	#КонецЕсли
	
	СоответствиеОбъектовИПравил = Новый Соответствие;
	
	ПравилаПлатформеннойПроверки = ПараметрыПроведения.ПравилаПлатформеннойПроверки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СоставПравил.Правило КАК Правило,
	|	СоставПравил.ХешСумма КАК ХешСумма,
	|	СтруктураКонфигурации.Ссылка КАК Объект,
	|	СтруктураКонфигурации.ДатаСбораСведений КАК ДатаСбораСведений
	|ПОМЕСТИТЬ ТаблицаОбъектовСПравилами
	|ИЗ
	|	Справочник.Правила.ОбслуживаемыеТипы КАК ПравилаОбслуживаемыеТипы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроверкаВерсии.СоставПравил КАК СоставПравил
	|		ПО ПравилаОбслуживаемыеТипы.Ссылка = СоставПравил.Правило
	|		И СоставПравил.Ссылка = &ПроверкаВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|		ПО ПравилаОбслуживаемыеТипы.ТипОбъекта = СтруктураКонфигурации.ТипОбъекта
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Версия
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	И НЕ СтруктураКонфигурации.Исключен
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.ТипОбъекта <> &ТипОбъектаКорень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверкаВерсииСоставПравил.Правило КАК Правило,
	|	МАКСИМУМ(ПроверкаВерсииСоставПравил.Ссылка.Дата) КАК Дата
	|ПОМЕСТИТЬ ДатаПоследнейПроверкиПравилом
	|ИЗ
	|	Документ.ПроверкаВерсии.СоставПравил КАК ПроверкаВерсииСоставПравил
	|ГДЕ
	|	ПроверкаВерсииСоставПравил.Ссылка.ВерсияКонфигурации = &Версия
	|	И ПроверкаВерсииСоставПравил.Ссылка.Проведен
	|	И ПроверкаВерсииСоставПравил.Ссылка <> &ПроверкаВерсии
	|СГРУППИРОВАТЬ ПО
	|	ПроверкаВерсииСоставПравил.Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверкаВерсииСоставПравил.Правило КАК Правило,
	|	ПроверкаВерсииСоставПравил.ХешСумма КАК ХешСумма,
	|	ДатаПоследнейПроверкиПравилом.Дата КАК Дата
	|ПОМЕСТИТЬ ВыполненныеПравилаСХешСуммами
	|ИЗ
	|	ДатаПоследнейПроверкиПравилом КАК ДатаПоследнейПроверкиПравилом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроверкаВерсии.СоставПравил КАК ПроверкаВерсииСоставПравил
	|		ПО ДатаПоследнейПроверкиПравилом.Правило = ПроверкаВерсииСоставПравил.Правило
	|			И ДатаПоследнейПроверкиПравилом.Дата = ПроверкаВерсииСоставПравил.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектовСПравилами.Объект КАК Объект,
	|	ТаблицаОбъектовСПравилами.Правило КАК Правило,
	|	(ТаблицаОбъектовСПравилами.ХешСумма <> ВыполненныеПравилаСХешСуммами.ХешСумма) КАК ПравилоИзменилось,
	|	(ТаблицаОбъектовСПравилами.ДатаСбораСведений > ВыполненныеПравилаСХешСуммами.Дата) КАК ОбъектИзменился,
	|	(ВыполненныеПравилаСХешСуммами.Правило ЕСТЬ NULL) КАК ОбъектНеПроверялсяПравилом
	|ПОМЕСТИТЬ ОбъединеннаяТаблица
	|ИЗ
	|	ТаблицаОбъектовСПравилами КАК ТаблицаОбъектовСПравилами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполненныеПравилаСХешСуммами КАК ВыполненныеПравилаСХешСуммами
	|		ПО ТаблицаОбъектовСПравилами.Правило = ВыполненныеПравилаСХешСуммами.Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединеннаяТаблица.Объект КАК Объект,
	|	ОбъединеннаяТаблица.Правило КАК Правило
	|ИЗ
	|	ОбъединеннаяТаблица КАК ОбъединеннаяТаблица
	|ГДЕ
	|	(ОбъединеннаяТаблица.ПравилоИзменилось
	|			ИЛИ ОбъединеннаяТаблица.ОбъектИзменился
	|			ИЛИ ОбъединеннаяТаблица.ОбъектНеПроверялсяПравилом
	|			ИЛИ ОбъединеннаяТаблица.Объект.СобраныСведения)
	|ИТОГИ ПО
	|	ОбъединеннаяТаблица.Объект";
	
	Запрос.УстановитьПараметр("Версия", ПроверкаВерсии.ВерсияКонфигурации);
	Запрос.УстановитьПараметр("ПроверкаВерсии", ПроверкаВерсии.Ссылка);
	Запрос.УстановитьПараметр("Расширение", Расширение);
	Запрос.УстановитьПараметр("ТипОбъектаКорень", Перечисления.ТипыОбъектов.Корень);
	
	КоличествоОбъектовДляПроверки = 0;
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		МассивПравил = Новый Массив;
		МассивПравилПлатформеннойПроверки = Новый Массив;
		
		ВыборкаПравил = ВыборкаОбъектов.Выбрать();
		Пока ВыборкаПравил.Следующий() Цикл
			
			ТекущееПравило = ВыборкаПравил.Правило;
			
			Если МассивСодержитЭлемент(ПравилаПлатформеннойПроверки, ТекущееПравило) Тогда
				МассивПравилПлатформеннойПроверки.Добавить(ТекущееПравило);
			Иначе
				МассивПравил.Добавить(ТекущееПравило);
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураМассивов = Новый Структура;
		СтруктураМассивов.Вставить("МассивПравил", МассивПравил);
		СтруктураМассивов.Вставить("МассивПравилПлатформеннойПроверки", МассивПравилПлатформеннойПроверки);
		
		СоответствиеОбъектовИПравил.Вставить(ВыборкаОбъектов.Объект, СтруктураМассивов);
		
		Если ВыборкаОбъектов.Объект.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных Тогда
			Продолжить;
		КонецЕсли;
		КоличествоОбъектовДляПроверки = КоличествоОбъектовДляПроверки + 1;
		
	КонецЦикла;
	
	СтруктураРезультата.СоответствиеОбъектовИПравил = СоответствиеОбъектовИПравил;
	СтруктураРезультата.КоличествоОбъектовДляПроверки = КоличествоОбъектовДляПроверки;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Подготавливает валидируемые ошибки и выполняет алгоритм валидации, заложенный в требование.
//
Процедура ВалидироватьПроверкуТребования(Требование)
	
	ЗапросПоАлгоритму = Новый Запрос;
	ЗапросПоАлгоритму.Текст = "
	|ВЫБРАТЬ
	|	Требования.АлгоритмВалидации
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	Требования.Ссылка = &Ссылка";
	
	ЗапросПоАлгоритму.УстановитьПараметр("Ссылка", Требование);
	
	ВыборкаАлгоритма = ЗапросПоАлгоритму.Выполнить().Выбрать();
	Если ВыборкаАлгоритма.Следующий() Тогда
		
		Попытка
			
			Выполнить(ВыборкаАлгоритма.АлгоритмВалидации);
			
		Исключение
			
			Событие = НСтр("ru='Алгоритм валидации'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Сообщение = СтрШаблон(НСтр("ru='Не удалось выполнить алгоритм валидации по причине:
				|%1'"), ОписаниеОшибки);
			
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОшибкиОбъектовПомеченныхНаУдаление(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, Расширение)
	
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	Конфигурация = ПроверкаВерсии.Конфигурация;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	// Удалим из ошибок помеченные на удаление объекты.
	ЗапросПоПомеченнымНаУдаление = Новый Запрос;
	ЗапросПоПомеченнымНаУдаление.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|		ПО НайденныеОшибки.Объект = СтруктураКонфигурации.Ссылка
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.Расширение = &Расширение";
	
	ЗапросПоПомеченнымНаУдаление.УстановитьПараметр("Расширение", Расширение);
	ЗапросПоПомеченнымНаУдаление.УстановитьПараметр("Владелец", Версия);
	
	РезультатЗапроса = ЗапросПоПомеченнымНаУдаление.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Текст = НСтр("ru='Начало очистки ошибок объектов %1, помеченных на удаление'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	ТекстОшибки = "";
	МассивОбъектов = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НаборОшибок = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
		НаборОшибок.Отбор.Объект.Установить(Выборка.Ссылка);
		
		Попытка
			НаборОшибок.Записать();
		Исключение
			
			// Собираем объекты для записи ошибки в ЖР.
			Если МассивОбъектов.Количество() < 3 Тогда
				МассивОбъектов.Добавить(Выборка.Путь);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Пишем ошибку для первого объекта.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось очистить ошибки объектов, помеченных на удаление, по причине:%1%2'"),
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Текст = НСтр("ru='Очистка ошибок объектов %1, помеченных на удаление, завершена'");
		Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
		Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	Иначе
		ТекстОшибки = ТекстОшибки + СтрШаблон(НСтр("ru='%1для объектов:%1%2%1и др. Проверка будет продолжена'"),
			Символы.ПС,
			СтрСоединить(МассивОбъектов, Символы.ПС));
		
		Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ЖурналПроверки, ТаблицаЖурнала);
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьОшибкиИОсобенности(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки)
	
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	Конфигурация = ПроверкаВерсии.Конфигурация;
	
	Дата = ПроверкаВерсии.Дата;
	Номер = ПроверкаВерсии.Номер;
	
	НайденныеОшибки = ПараметрыПроведения.НайденныеОшибки;
	СоответствиеОбъектовИПравил = ПараметрыПроведения.СоответствиеОбъектовИПравил;
	ПравилаПлатформеннойПроверки = ПараметрыПроведения.ПравилаПлатформеннойПроверки;
	ПроверенныеОбъекты = ПараметрыПроведения.ПроверенныеОбъекты;
	ИзмененныеПравила = ПараметрыПроведения.ИзмененныеПравила;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Текст = НСтр("ru='Начало синхронизации ошибок и особенностей %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	ПустаяДата = Дата(1, 1, 1);
	СписокСвойствОсобенностей = "Состояние, ПричинаОсобенности, АвторОсобенности, ДатаПомещенияВОсобенности";
	
	ОсобенностиКонфигурацииИзРСНайденныеОшибки = ПолучитьОсобенностиКонфигурацииИзРСНайденныеОшибки(ПроверкаВерсии,
		ПараметрыПроведения);
	ОсобенностиБиблиотекКонфигурацииИзРСНайденныеОшибки =
		ПолучитьОсобенностиБиблиотекКонфигурацииИзРСНайденныеОшибки(ПроверкаВерсии, ПараметрыПроведения);
	
	ТаблицаОшибокАПК = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	НомерОбъекта = 0;
	ПроцентОбработанныхОбъектов = 0;
	ВсегоПроверенныхОбъектов = ПроверенныеОбъекты.Количество();
	
	// Определяем последний номер ошибки, записанный по диапазону данного документа.
	НомерОшибки = ПолучитьПоследнийНомерОшибки(Номер);
	
	НайденныеОшибки.Индексы.Добавить("Ключ");
	НайденныеОшибки.Индексы.Добавить("Объект");
	
	ТекущийПользовательСтрока = ПараметрыСеанса.ТекущийПользователь.Наименование;
	ТекущаяДата = ТекущаяДатаСеанса();
	ПричинаОсобенностиТехническийДолг = Справочники.ПричиныОсобенности.ТехническийДолг;
	СостояниеОсобенность = Перечисления.СостояниеОшибки.Особенность;
	СостояниеЗарегистрирована = Перечисления.СостояниеОшибки.Зарегистрирована;
	
	СоответствиеПутейОбъектовНеВключенныхВПроверку = ПолучитьПутиОбъектовНеВключенныхВПроверку(ПроверенныеОбъекты, Версия,
		Расширение);
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется синхронизация ошибок (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	// Синхронизируем ошибки в регистре отдельно по каждому проверявшемуся объекту.
	Для Каждого ПроверенныйОбъект Из ПроверенныеОбъекты Цикл
		
		НомерОбъекта = НомерОбъекта + 1;
		ПроверенныйОбъектПуть = ПроверенныйОбъект.Путь;
		МассивОшибокИзРегистраДляУдаления = Новый Массив;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		
		ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоПроверенныхОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		СтруктураМассивовПравил = СоответствиеОбъектовИПравил[ПроверенныйОбъект];
		
		НаборОшибокИзРегистра = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
		НаборОшибокИзРегистра.Отбор.Объект.Установить(ПроверенныйОбъект);
		НаборОшибокИзРегистра.Прочитать();
		Для Каждого ОшибкаИзРегистра Из НаборОшибокИзРегистра Цикл
			
			ОшибкаИзРегистраПравило = ОшибкаИзРегистра.Правило;
			ОшибкаИзРегистраОшибка = ОшибкаИзРегистра.Ошибка;
			ОшибкаИзРегистраОшибкаКод = ОшибкаИзРегистраОшибка.Код;
			ОшибкаИзРегистраУточнение = ОшибкаИзРегистра.Уточнение;
			ОшибкаИзРегистраМестоОбнаружения = ОшибкаИзРегистра.МестоОбнаружения;
			
			// Делаем поиск ошибок из регистра в найденных ошибках по ключу.
			Ключ = СтрШаблон("%1.%2.%3.%4.%5",
				ПроверенныйОбъект.Код,
				ОшибкаИзРегистраПравило.Код,
				ОшибкаИзРегистраОшибкаКод,
				ОшибкаИзРегистраУточнение,
				ОшибкаИзРегистраМестоОбнаружения);
			
			Ключ = ВРег(Ключ);
			Ключ = УдалитьНезначащиеСимволы(Ключ);
			
			СтрокаСНовойОшибкой = НайденныеОшибки.Найти(Ключ, "Ключ");
			
			// Если ошибка из регистра при повторной проверке не обнаружена.
			Если СтрокаСНовойОшибкой = Неопределено Тогда
				
				// Если правило проверки не было выбрано при проверке, то оставляем ошибку в прежнем состоянии.
				Если НЕ МассивСодержитЭлемент(СтруктураМассивовПравил.МассивПравил, ОшибкаИзРегистраПравило) Тогда
					Продолжить;
				КонецЕсли;
				
				// Иначе - правило выбиралось, но ошибка не найдена - анализируем имеющиеся особенности.
				Если ОшибкаИзРегистра.Состояние = СостояниеОсобенность Тогда
					
					// Пропускаем особенности по платформенной проверке.
					Если МассивСодержитЭлемент(ПравилаПлатформеннойПроверки, ОшибкаИзРегистраПравило) Тогда
						Продолжить;
					КонецЕсли;
					
					// Пропускаем особенности с причиной "Технический долг".
					Если ОшибкаИзРегистра.ПричинаОсобенности = ПричинаОсобенностиТехническийДолг Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				// Ошибка на объект была зарегистрирована при проверке другого объекта,
				// который не был включен в текущую проверку, то такую ошибку не надо удалять.
				Если СоответствиеПутейОбъектовНеВключенныхВПроверку[ОшибкаИзРегистраМестоОбнаружения] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Если ошибка из регистра не найдена, добавим ее в массив для удаления.
				МассивОшибокИзРегистраДляУдаления.Добавить(ОшибкаИзРегистра);
				
			Иначе
				
				// Иначе - ошибка из регистра найдена при повторной проверке - удалим ее из таблицы найденных ошибок.
				НайденныеОшибки.Удалить(СтрокаСНовойОшибкой);
				
				// Проверяем, является ли особенностью существующая ошибка в регистре ошибок.
				Если ОшибкаИзРегистра.Состояние = СостояниеОсобенность Тогда
					
					// Проверяем, заполнены ли все поля для особенности.
					Если ПустаяСтрока(ОшибкаИзРегистра.АвторОсобенности) Тогда
						// Если автор пустой, то перезаполняем его текущим пользователем.
						ОшибкаИзРегистра.АвторОсобенности = ТекущийПользовательСтрока;
					КонецЕсли;
					
					Если ОшибкаИзРегистра.ДатаПомещенияВОсобенности = ПустаяДата Тогда
						// Если дата особенности пустая, то перезаполняем ее текущей датой.
						ОшибкаИзРегистра.ДатаПомещенияВОсобенности = ТекущаяДата;
					КонецЕсли;
					
					// Пропускаем особенность.
					Продолжить;
					
				КонецЕсли;
				
				КлючОсобенности = СтрШаблон("%1.%2",
					ПроверенныйОбъектПуть,
					ОшибкаИзРегистраОшибкаКод);
				
				// Если алгоритм правила не был изменен после последней проверки этим правилом, то добавляем в ключ уточнение.
				Если ИзмененныеПравила[ОшибкаИзРегистраПравило] = Неопределено Тогда
					КлючОсобенности = КлючОсобенности + "." + ОшибкаИзРегистраУточнение;
				КонецЕсли;
				
				КлючОсобенности = УдалитьНезначащиеСимволы(КлючОсобенности);
				
				// Искать среди особенностей из РС "Найденные ошибок" по текущей конфигурации не имеет смысла,
				// т.к. проверяем эти же ошибки из регистра.
				// Поэтому сразу ищем ошибку в РС "Найденные ошибок" по эталонам конфигурации.
				СуществующаяОсобенность = ОсобенностиБиблиотекКонфигурацииИзРСНайденныеОшибки[КлючОсобенности];
				Если СуществующаяОсобенность <> Неопределено Тогда
					// Если ошибка является особенностью, то перебиваем значения свойств особенности из РС "Найденные ошибки".
					ЗаполнитьЗначенияСвойств(ОшибкаИзРегистра, СуществующаяОсобенность, СписокСвойствОсобенностей);
					Продолжить;
				КонецЕсли;
				
				// Если ошибка не особенность, то возвращаем состояние "Зарегистрирована".
				// Например, у ошибки могли установить состояние "Исправлена", но не исправить ее в конфигурации.
				ОшибкаИзРегистра.Состояние = Перечисления.СостояниеОшибки.Зарегистрирована;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОшибокИзРегистраДляУдаления.Количество() > 0 Тогда
			// Удалим из регистра ошибки, которые не были найдены при повторной проверке.
			Для Каждого УдаляемаяОшибка Из МассивОшибокИзРегистраДляУдаления Цикл
				НаборОшибокИзРегистра.Удалить(УдаляемаяОшибка);
			КонецЦикла;
			
			// Если по этому объекту больше нет ошибок, то запишем результат сразу в регистр.
			// Смысл в следующем: если новых ошибок по этому объекту нет, то позже при записи ТаблицаОшибокАПК
			// будет работать отбор по объекту, а т.к. ошибок по объекту в ТаблицаОшибокАПК нет,
			// то и ненайденные ошибки останутся в регистре.
			// Поэтому приходится предварительно очищать и перезаписывать НаборОшибокИзРегистра.
			Если НаборОшибокИзРегистра.Количество() = 0 Тогда
				// В данном случае удаление комментариев ошибок происходит в процедуре УдалитьКомментарийОшибки(),
				// которая вызывается в обработчике перед записью набора записей РС "Найденные ошибки",
				// поэтому вызывать отдельно удаление комментариев не требуется.
				НаборОшибокИзРегистра.Записать();
			Иначе
				// Если удаляются не все ошибки по объекту, то напрямую удаляем комментарии только для удаляемых ошибок.
				УдалитьКомментарииУдаляемыхОшибок(ПроверенныйОбъект, МассивОшибокИзРегистраДляУдаления);
			КонецЕсли;
		КонецЕсли;
		
		// Оставшиеся найденные ошибки по объекту необходимо добавить как новые.
		ОтборПоОбъекту = Новый Структура;
		ОтборПоОбъекту.Вставить("Объект", ПроверенныйОбъект);
		НовыеОшибки = НайденныеОшибки.НайтиСтроки(ОтборПоОбъекту);
		
		Для Каждого НоваяОшибка Из НовыеОшибки Цикл
			
			НомерОшибки = НомерОшибки + 1;
			
			ДобавленнаяОшибка = НаборОшибокИзРегистра.Добавить();
			
			ЗаполнитьЗначенияСвойств(ДобавленнаяОшибка, НоваяОшибка, "Объект, Правило, Ошибка, Уточнение, МестоОбнаружения");
			ДобавленнаяОшибка.Номер = НомерОшибки;
			ДобавленнаяОшибка.ДатаРегистрации = Дата;
			
			КлючОсобенности = СтрШаблон("%1.%2",
				ПроверенныйОбъектПуть,
				НоваяОшибка.Ошибка.Код);
			
			// Если алгоритм правила не был изменен после последней проверки этим правилом, то добавляем в ключ уточнение.
			Если ИзмененныеПравила[НоваяОшибка.Правило] = Неопределено Тогда
				КлючОсобенности = КлючОсобенности + "." + НоваяОшибка.Уточнение;
			КонецЕсли;
			
			КлючОсобенности = УдалитьНезначащиеСимволы(КлючОсобенности);
			
			// Ищем ошибку в особенностях из РС "Найденные ошибки" по текущей конфигурации.
			СуществующаяОсобенность = ОсобенностиКонфигурацииИзРСНайденныеОшибки[КлючОсобенности];
			Если СуществующаяОсобенность <> Неопределено Тогда
				// Если ошибка является особенностью, то заполняем значения свойств особенности из существующей особенности.
				ЗаполнитьЗначенияСвойств(ДобавленнаяОшибка, СуществующаяОсобенность, СписокСвойствОсобенностей);
				Продолжить;
			КонецЕсли;
			
			// Ищем ошибку в особенностях из РС "Найденные ошибки" по эталонам конфигурации.
			СуществующаяОсобенность = ОсобенностиБиблиотекКонфигурацииИзРСНайденныеОшибки[КлючОсобенности];
			Если СуществующаяОсобенность <> Неопределено Тогда
				// Если ошибка является особенностью, то заполняем значения свойств особенности из существующей особенности.
				ЗаполнитьЗначенияСвойств(ДобавленнаяОшибка, СуществующаяОсобенность, СписокСвойствОсобенностей);
				Продолжить;
			КонецЕсли;
			
			ДобавленнаяОшибка.Состояние = СостояниеЗарегистрирована;
			
		КонецЦикла;
		
		Для Каждого ТекущаяЗапись Из НаборОшибокИзРегистра Цикл
			НоваяСтрока = ТаблицаОшибокАПК.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяЗапись);
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПроведения.НайденныеОшибки = Неопределено;
	ОсобенностиКонфигурацииИзРСОсобенности = Неопределено;
	ОсобенностиКонфигурацииИзРСНайденныеОшибки = Неопределено;
	ОсобенностиБиблиотекКонфигурацииИзРСНайденныеОшибки = Неопределено;
	
	Текст = НСтр("ru='Синхронизация ошибок и особенностей %1 завершена'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	ПараметрыПроведения.Вставить("ТаблицаОшибокАПК", ТаблицаОшибокАПК);
	
КонецПроцедуры

Функция ПолучитьОсобенностиКонфигурацииИзРСНайденныеОшибки(ПроверкаВерсии, ПараметрыПроведения)
	
	ИзмененныеПравила = ПараметрыПроведения.ИзмененныеПравила;
	
	Особенности = Новый Соответствие;
	
	ЗапросПоОсобенностям = Новый Запрос;
	ЗапросПоОсобенностям.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект.Путь КАК Объект,
	|	НайденныеОшибки.Ошибка.Код КАК Ошибка,
	|	НайденныеОшибки.Уточнение,
	|	НайденныеОшибки.Правило,
	|	НайденныеОшибки.МестоОбнаружения,
	|	НайденныеОшибки.Состояние,
	|	НайденныеОшибки.ПричинаОсобенности,
	|	НайденныеОшибки.АвторОсобенности,
	|	НайденныеОшибки.ДатаПомещенияВОсобенности
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|// Производим отбор по конфигурации, а не по версии, т.к. при изменении версии особенности предыдущей версии не копируются в текущую.
	|// Также нет смысла использовать отбор по эталону, т.к. при при подключении к хранилищу проверяются только измененные объекты,
	|// при этом версия конфигурации обновится, поэтому при следующей проверке эталон изменится.
	|	НайденныеОшибки.Объект.Владелец.Владелец = &Конфигурация
	|	И НайденныеОшибки.Состояние = &Состояние
	|
	|// Необходима сортировка по возрастанию даты особенности, чтобы значение соответствия было с максимальной датой.
	|УПОРЯДОЧИТЬ ПО
	|	НайденныеОшибки.ДатаПомещенияВОсобенности ВОЗР";
	
	ЗапросПоОсобенностям.УстановитьПараметр("Конфигурация", ПроверкаВерсии.Конфигурация);
	ЗапросПоОсобенностям.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Особенность);
	
	ТаблицаОсобенностей = ЗапросПоОсобенностям.Выполнить().Выгрузить();
	Если ТаблицаОсобенностей.Количество() = 0 Тогда
		Возврат Особенности;
	КонецЕсли;
	
	Для Каждого СтрокаОсобенности Из ТаблицаОсобенностей Цикл
		
		Ключ = СтрокаОсобенности.Объект + "." + СтрокаОсобенности.Ошибка;
		// Если алгоритм правила не был изменен после последней проверки этим правилом, то добавляем в ключ уточнение.
		Если ИзмененныеПравила[СтрокаОсобенности.Правило] = Неопределено Тогда
			Ключ = Ключ + "." + СтрокаОсобенности.Уточнение;
		КонецЕсли;
		
		Ключ = УдалитьНезначащиеСимволы(Ключ);
		
		Особенности.Вставить(Ключ, СтрокаОсобенности);
		
	КонецЦикла;
	
	Возврат Особенности;
	
КонецФункции

Функция ПолучитьОсобенностиБиблиотекКонфигурацииИзРСНайденныеОшибки(ПроверкаВерсии, ПараметрыПроведения)
	
	Конфигурация = ПроверкаВерсии.Конфигурация;
	ИзмененныеПравила = ПараметрыПроведения.ИзмененныеПравила;
	
	Особенности = Новый Соответствие;
	
	// Получаем версии эталонов библиотечных конфигураций.
	Эталоны = Новый Массив;
	Для Каждого БиблиотечнаяКонфигурация Из Конфигурация.Библиотеки Цикл
		ВерсияЭталон = НайтиПоследнююВерсию(БиблиотечнаяКонфигурация.БиблиотечнаяКонфигурация);
		Если ЗначениеЗаполнено(ВерсияЭталон) Тогда
			Эталоны.Добавить(ВерсияЭталон);
		КонецЕсли;
	КонецЦикла;
	
	Если Эталоны.Количество() = 0 Тогда
		Возврат Особенности;
	КонецЕсли;
	
	ЗапросПоОсобенностям = Новый Запрос;
	ЗапросПоОсобенностям.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект.Путь КАК Объект,
	|	НайденныеОшибки.Ошибка.Код КАК Ошибка,
	|	НайденныеОшибки.Уточнение,
	|	НайденныеОшибки.МестоОбнаружения,
	|	НайденныеОшибки.Состояние,
	|	НайденныеОшибки.ПричинаОсобенности,
	|	НайденныеОшибки.АвторОсобенности,
	|	НайденныеОшибки.ДатаПомещенияВОсобенности
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец В (&ВерсииЭталонов)
	|	И НайденныеОшибки.Состояние = &Состояние
	|
	|// Необходима сортировка по возрастанию даты особенности, чтобы значение соответствия было с максимальной датой.
	|УПОРЯДОЧИТЬ ПО
	|	НайденныеОшибки.ДатаПомещенияВОсобенности ВОЗР";
	
	ЗапросПоОсобенностям.УстановитьПараметр("ВерсииЭталонов", Эталоны);
	ЗапросПоОсобенностям.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Особенность);
	
	ТаблицаОсобенностей = ЗапросПоОсобенностям.Выполнить().Выгрузить();
	Если ТаблицаОсобенностей.Количество() = 0 Тогда
		Возврат Особенности;
	КонецЕсли;
	
	Для Каждого СтрокаОсобенности Из ТаблицаОсобенностей Цикл
		
		Ключ = СтрокаОсобенности.Объект + "." + СтрокаОсобенности.Ошибка;
		// Если алгоритм правила не был изменен после последней проверки этим правилом, то добавляем в ключ уточнение.
		Если ИзмененныеПравила[СтрокаОсобенности.Правило] = Неопределено Тогда
			Ключ = Ключ + "." + СтрокаОсобенности.Уточнение;
		КонецЕсли;
		
		Ключ = УдалитьНезначащиеСимволы(Ключ);
		
		Особенности.Вставить(Ключ, СтрокаОсобенности);
		
	КонецЦикла;
	
	Возврат Особенности;
	
КонецФункции

Процедура УдалитьКомментарииУдаляемыхОшибок(ПроверенныйОбъект, МассивУдаляемыхОшибокОбъекта)
	
	НаборЗаписей = РегистрыСведений.КомментарииНайденныхОшибок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПроверенныйОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Для Каждого ЗаписьМассива Из МассивУдаляемыхОшибокОбъекта Цикл
		
		НайденнаяСтрока = ТаблицаЗаписей.Найти(ЗаписьМассива.Номер, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаЗаписей.Удалить(НайденнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьПоследнийНомерОшибки(Номер)
	
	Множитель = 100000000000;
	
	ЗапросПоНомеру = Новый Запрос;
	ЗапросПоНомеру.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(НайденныеОшибки.Номер) КАК МаксимальныйНомерОшибки
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер МЕЖДУ &МинимальныйНомер И &МаксимальныйНомер";
	
	ЗапросПоНомеру.УстановитьПараметр("МинимальныйНомер", Номер * Множитель);
	ЗапросПоНомеру.УстановитьПараметр("МаксимальныйНомер", (Номер + 1) * Множитель);
	
	ВыборкаНомера = ЗапросПоНомеру.Выполнить().Выбрать();
	Если ВыборкаНомера.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаНомера.МаксимальныйНомерОшибки) Тогда
			НомерОшибки = ВыборкаНомера.МаксимальныйНомерОшибки + 1;
		Иначе
			НомерОшибки = Номер * Множитель + 1;
		КонецЕсли;
		
	Иначе
		НомерОшибки = Номер * Множитель + 1;
	КонецЕсли;
	
	Возврат НомерОшибки;
	
КонецФункции

Процедура ЗарегистрироватьВсеОшибкиКакОсобенности(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки)
	
	ТаблицаОшибокАПК = ПараметрыПроведения.ТаблицаОшибокАПК;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	Конфигурация = ПроверкаВерсии.Конфигурация;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	КоличествоОшибок = ТаблицаОшибокАПК.Количество();
	
	Текст = НСтр("ru='Начало регистрации особенностей %1 (%2)'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения, КоличествоОшибок);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	СостояниеОсобенность = Перечисления.СостояниеОшибки.Особенность;
	ПричинаОсобенностиТехническийДолг = Справочники.ПричиныОсобенности.ТехническийДолг;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураОтбора = Новый Структура;
		
		Счетчик = 0;
		ПроцентОбработанныхОбъектов = 0;
		ТекстСостоянияШаблон = НСтр("ru='Выполняется регистрация особенностей (%1%%)'");
		#Если Клиент Тогда
		Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
		#КонецЕсли
		
		Для Каждого СтрокаОшибки Из ТаблицаОшибокАПК Цикл
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Счетчик = Счетчик + 1;
			ТекущийПроцентОбъектов = Цел(100 * Счетчик / КоличествоОшибок);
			
			Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
				ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
				ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
				Состояние(ТекстСостояния);
			КонецЕсли;
			#КонецЕсли
			
			// Если состояние ошибки особенность, то пропускаем.
			Если СтрокаОшибки.Состояние = СостояниеОсобенность Тогда
				Продолжить;
			КонецЕсли;
			
			// Меняем состояние ошибки и заполняем необходимые поля.
			СтрокаОшибки.Состояние = СостояниеОсобенность;
			СтрокаОшибки.ПричинаОсобенности = ПричинаОсобенностиТехническийДолг;
			СтрокаОшибки.АвторОсобенности = Строка(ТекущийПользователь);
			СтрокаОшибки.ДатаПомещенияВОсобенности = ТекущаяДата;
			
		КонецЦикла;
		
		Текст = НСтр("ru='Регистрация особенностей %1 завершена'");
		Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
		Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстОшибки = НСтр("ru='Не удалось зарегистрировать особенности %1 по причине:%2%3'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеКонфигурацииИлиРасширения, Символы.ПС, ОписаниеОшибки);
		
		Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Ошибка, ОписаниеОшибки, ЖурналПроверки,
			ТаблицаЖурнала);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьОшибкиЗаКонфигурацию(Расширение, ПроверкаВерсии, ПараметрыПроведения)
	
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	Дата = ПроверкаВерсии.Дата;
	
	ТаблицаОшибокАПК = ПараметрыПроведения.ТаблицаОшибокАПК;
	СоответствиеОшибокИИхКоличества = ПараметрыПроведения.СоответствиеОшибокИИхКоличества;
	МаксимальноеКоличествоОшибокОдногоВида = ПараметрыПроведения.МаксимальноеКоличествоОшибокОдногоВида;
	
	Если ТаблицаОшибокАПК.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибокАПК.Сортировать("Номер Убыв");
	НомерОшибки = ТаблицаОшибокАПК[0].Номер + 1;
	
	ОбъектКонфигурация = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Перечисления.ТипыОбъектов.Конфигурация, Расширение);
	
	Уточнение = НСтр("ru='Обнаружено %1 ошибок данного вида. В отчете отражено %2 ошибок.'");
	
	// Получим количество реальных ошибок из таблицы без учета особенностей.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	
	// Проверим, если все ошибки были особенностями, то выходим.
	ТаблицаВидовОшибок = ТаблицаОшибокАПК.Скопировать(СтруктураОтбора, "Ошибка");
	Если ТаблицаВидовОшибок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовОшибок.Колонки.Добавить("Количество");
	ТаблицаВидовОшибок.ЗаполнитьЗначения(1, "Количество");
	ТаблицаВидовОшибок.Свернуть("Ошибка", "Количество");
	ТаблицаВидовОшибок.Индексы.Добавить("Ошибка");
	
	Для Каждого СтрокаСоответствия Из СоответствиеОшибокИИхКоличества Цикл
		
		// Проверим количество ошибок при регистрации.
		КоличествоОшибок = СтрокаСоответствия.Значение;
		Если КоличествоОшибок <= МаксимальноеКоличествоОшибокОдногоВида Тогда
			Продолжить;
		КонецЕсли;
		
		// Ключ состоит из кода правила и кода ошибки через перенос строки.
		МассивКодов = СтрРазделить(СтрокаСоответствия.Ключ, Символы.ПС);
		Правило = Справочники.Правила.НайтиПоКоду(МассивКодов[0]);
		Ошибка = Справочники.ОбнаруживаемыеОшибки.НайтиПоКоду(МассивКодов[1]);
		
		// Некоторые ошибки могут оказаться особенностями, поэтому перепроверим количество реальных ошибок из таблицы.
		СтрокаОшибки = ТаблицаВидовОшибок.Найти(Ошибка, "Ошибка");
		Если СтрокаОшибки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Если количество зарегистрированных ошибок без особенностей меньше максимального, то пропускаем этот вид ошибок.
		Если СтрокаОшибки.Количество < МаксимальноеКоличествоОшибокОдногоВида Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяОшибка = ТаблицаОшибокАПК.Добавить();
		НоваяОшибка.Объект = ОбъектКонфигурация;
		НоваяОшибка.Правило = Правило;
		НоваяОшибка.Номер = НомерОшибки;
		НоваяОшибка.Ошибка = Ошибка;
		НоваяОшибка.Состояние = Перечисления.СостояниеОшибки.Зарегистрирована;
		НоваяОшибка.МестоОбнаружения = "";
		НоваяОшибка.Уточнение = СтрШаблон(Уточнение, КоличествоОшибок, МаксимальноеКоличествоОшибокОдногоВида);
		НоваяОшибка.ДатаРегистрации = Дата;
		
		НомерОшибки = НомерОшибки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает связанные записи регистра сведений НайденныеОшибки.
//
Процедура ЗаписатьОшибкиАПК(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки)
	
	Конфигурация = ПроверкаВерсии.Конфигурация;
	
	ТаблицаОшибокАПК = ПараметрыПроведения.ТаблицаОшибокАПК;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Текст = НСтр("ru='Начало записи ошибок %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	ТаблицаОбъектов = ТаблицаОшибокАПК.Скопировать(, "Объект");
	ТаблицаОбъектов.Свернуть("Объект", "");
	
	НомерОбъекта = 0;
	ВсегоОбъектов = ТаблицаОбъектов.Количество();
	
	КоличествоНезаписанныхОбъектов = 0;
	ПроцентОбработанныхОбъектов = 0;
	
	ДатаПроверки = Формат(ТекущаяДатаСеанса(), "ДФ=""ггггММдд""");
	ИмяСобытия = СтрШаблон(НСтр("ru='Ошибка при записи найденных ошибок.%1.%2'", Метаданные.ОсновнойЯзык.КодЯзыка),
		СтрЗаменить(Конфигурация.Наименование, ".", "_"), ДатаПроверки);
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется запись найденных ошибок (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	СтруктураОтбора = Новый Структура;
	ТаблицаОшибокАПК.Индексы.Добавить("Объект");
	
	Для Каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ОбъектСсылка = СтрокаОбъекта.Объект;
		
		СтруктураОтбора.Вставить("Объект", ОбъектСсылка);
		СтрокиОшибок = ТаблицаОшибокАПК.НайтиСтроки(СтруктураОтбора);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НайденныеОшибки");
			ЭлементБлокировки.УстановитьЗначение("Объект", ОбъектСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			НаборОшибок = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
			НаборОшибок.Отбор.Объект.Установить(ОбъектСсылка);
			
			Для Каждого СтрокаОшибки Из СтрокиОшибок Цикл
				Запись = НаборОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаОшибки);
			КонецЦикла;
			
			СчетчикПопыток = 10;
			Пока СчетчикПопыток > 0 Цикл
				Попытка
					НаборОшибок.Записать(Истина);
					Прервать;
				Исключение
					СчетчикПопыток = СчетчикПопыток  - 1;
				КонецПопытки;
			КонецЦикла;
			
			НомерОбъекта = НомерОбъекта + 1;
			
			#Если Клиент Тогда
			ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоОбъектов);
			
			Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
				ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
				ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
				Состояние(ТекстСостояния);
			КонецЕсли;
			#КонецЕсли
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			КоличествоНезаписанныхОбъектов = КоличествоНезаписанныхОбъектов + 1;
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Сообщение = СтрШаблон(НСтр("ru='Не удалось записать ошибки объекта %1 по причине:
				|%2'"), ОбъектСсылка.Путь, ОписаниеОшибки);
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru='Запись ошибок %1 завершена'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	Если КоличествоНезаписанныхОбъектов > 0 Тогда
		Текст = НСтр("ru='Не удалось записать ошибки %1 объекта(ов). Подробности см. в журнале регистрации'");
		Текст = СтрШаблон(Текст, КоличествоНезаписанныхОбъектов);
		Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиКомментарии(Расширение, ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки)
	
	Конфигурация = ПроверкаВерсии.Конфигурация;
	
	ТаблицаОшибокАПК = ПараметрыПроведения.ТаблицаОшибокАПК;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	ЗапросПоКомментариям = Новый Запрос;
	ЗапросПоКомментариям.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Объект.Путь КАК Путь,
	|	НайденныеОшибки.Правило КАК Правило,
	|	НайденныеОшибки.Ошибка КАК Ошибка,
	|	НайденныеОшибки.Уточнение КАК Уточнение,
	|	НайденныеОшибки.МестоОбнаружения КАК МестоОбнаружения,
	|	НайденныеОшибки.ДатаРегистрации КАК ДатаРегистрации,
	|	КомментарииНайденныхОшибок.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|		ПО НайденныеОшибки.Номер = КомментарииНайденныхОшибок.Номер
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец.Владелец = &Конфигурация
	|	И НайденныеОшибки.Объект.Расширение = &Расширение";
	
	ЗапросПоКомментариям.УстановитьПараметр("Конфигурация", Конфигурация);
	ЗапросПоКомментариям.УстановитьПараметр("Расширение", Расширение);
	
	ТаблицаКомментариев = ЗапросПоКомментариям.Выполнить().Выгрузить();
	
	Если ТаблицаКомментариев.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Текст = НСтр("ru='Начало переноса комментариев к ошибкам %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	ТаблицаКомментариев.Индексы.Добавить("Номер");
	ТаблицаКомментариев.Индексы.Добавить("Путь, Правило, Ошибка, Уточнение, МестоОбнаружения");
	
	СтруктураОтбора = Новый Структура("Путь, Правило, Ошибка, Уточнение, МестоОбнаружения");
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется перенос комментариев к найденным ошибкам (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	СчетчикОшибок = 0;
	ПроцентОбработанныхОбъектов = 0;
	КоличествоОшибок = ТаблицаОшибокАПК.Количество();
	Для Каждого ОшибкаАПК Из ТаблицаОшибокАПК Цикл
		
		НомерОшибки = ОшибкаАПК.Номер;
		ОбъектКонфигурации = ОшибкаАПК.Объект;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		
		СчетчикОшибок = СчетчикОшибок + 1;
		ТекущийПроцентОбъектов = Цел(100 * СчетчикОшибок / КоличествоОшибок);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		// У этой ошибки уже есть комментарий, переносить не нужно.
		Если ТаблицаКомментариев.Найти(НомерОшибки, "Номер") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Ошибку не нашли по номеру, ищем похожие ошибки по различным полям.
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ОшибкаАПК);
		СтруктураОтбора.Путь = ОбъектКонфигурации.Путь;
		ТаблицаКомментариевКопия = ТаблицаКомментариев.Скопировать(СтруктураОтбора, "ДатаРегистрации, Комментарий");
		
		КоличествоКомментариев = ТаблицаКомментариевКопия.Количество();
		Если КоличествоКомментариев = 0 Тогда
			// Похожих ошибок по различным полям не нашлось, комментариев нет.
			Продолжить;
		КонецЕсли;
		
		Если КоличествоКомментариев > 1 Тогда
			// Сортируем комментарии по дате модификации ошибки, чтобы взять самый свежий комментарий.
			ТаблицаКомментариевКопия.Сортировать("ДатаРегистрации УБЫВ");
		КонецЕсли;
		
		Комментарий = ТаблицаКомментариевКопия[0].Комментарий;
		
		// Добавляем новый комментарий в регистр.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КомментарииНайденныхОшибок");
		ЭлементБлокировки.УстановитьЗначение("Объект", ОбъектКонфигурации);
		ЭлементБлокировки.УстановитьЗначение("Номер", НомерОшибки);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			КомментарииНайденныхОшибокНаборЗаписей = РегистрыСведений.КомментарииНайденныхОшибок.СоздатьНаборЗаписей();
			КомментарииНайденныхОшибокНаборЗаписей.Отбор.Объект.Установить(ОбъектКонфигурации);
			КомментарииНайденныхОшибокНаборЗаписей.Отбор.Номер.Установить(НомерОшибки);
			
			НоваяЗапись = КомментарииНайденныхОшибокНаборЗаписей.Добавить();
			НоваяЗапись.Номер = НомерОшибки;
			НоваяЗапись.Объект = ОбъектКонфигурации;
			НоваяЗапись.Комментарий = Комментарий;
			
			КомментарииНайденныхОшибокНаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru='Перенос комментариев к ошибкам %1 завершен'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
	#Если Клиент Тогда
	Состояние();
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьПутиОбъектовНеВключенныхВПроверку(ПроверенныеОбъекты, Версия, Расширение)
	
	СоответствиеПутейОбъектовНеВключенныхВПроверку = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	И НЕ СтруктураКонфигурации.Ссылка В(&ПроверенныеОбъекты)
	|	И СтруктураКонфигурации.ТипОбъекта <> &Корень
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Версия);
	Запрос.УстановитьПараметр("Расширение", Расширение);
	Запрос.УстановитьПараметр("Корень", Перечисления.ТипыОбъектов.Корень);
	Запрос.УстановитьПараметр("ПроверенныеОбъекты", ПроверенныеОбъекты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеПутейОбъектовНеВключенныхВПроверку.Вставить(Выборка.Путь, Истина);
	КонецЦикла;
	
	Возврат СоответствиеПутейОбъектовНеВключенныхВПроверку;
	
КонецФункции

Процедура СообщитьКоличествоОбъектовДляПроверки(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, Расширение)
	
	Текст = НСтр("ru='Выбрано всего объектов %1 для проверки: %2'");
	
	Конфигурация = ПроверкаВерсии.Конфигурация;
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	УровеньИнформация = УровеньЖурналаРегистрации.Информация;
	КоличествоДляПроверки = ПараметрыПроведения.КоличествоОбъектовДляПроверки;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	КоличествоВыборочно = ПроверкаВерсии.СоставОбъектов.Количество();
	КоличествоОбщее = ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация,, Расширение);
	КоличествоСобраныСведения = ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация, Истина, Расширение,, Истина);
	КоличествоНеИсключенных = ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация, Истина, Расширение,, Истина);
	
	// При проверке были выбраны конкретные объекты в дереве.
	Если КоличествоВыборочно > 0 Тогда
		КоличествоОбъектов = СтрШаблон(НСтр("ru='%1 из %2'"), КоличествоВыборочно, КоличествоОбщее);
	ИначеЕсли КоличествоДляПроверки = КоличествоОбщее Тогда
		// У конфигурации нет фильтров.
		КоличествоОбъектов = СтрШаблон(НСтр("ru='все (%1)'"), КоличествоОбщее);
	ИначеЕсли НЕ ЗначениеЗаполнено(Расширение) И КоличествоНеИсключенных <> КоличествоСобраныСведения Тогда
		// Выполняется проверка только измененных объектов из хранилища.
		КоличествоОбъектов = СтрШаблон(
			НСтр("ru='%1 из %2 с учетом реквизитов, табличных частей, форм и других дочерних объектов'"),
			КоличествоДляПроверки, КоличествоОбщее);
	Иначе
		// У конфигурации настроены фильтры для объектов.
		КоличествоОбъектов = СтрШаблон(НСтр("ru='%1 из %2 с учетом исключений'"), КоличествоДляПроверки,
			КоличествоОбщее);
	КонецЕсли;
	
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения, КоличествоОбъектов);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуЖурналаПроверки() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сообщение");
	Таблица.Колонки.Добавить("Время");
	Таблица.Колонки.Добавить("Порядок");
	
	Возврат Таблица;
	
КонецФункции

Процедура СортироватьЖурналПроверки(ПроверкаВерсии, СтруктураПроверки) Экспорт
	
	ТаблицаЖурнала = СтруктураПроверки.ТаблицаЖурнала;
	ТаблицаЖурнала.Сортировать("Время, Порядок");
	
	МассивЗаписей = ТаблицаЖурнала.ВыгрузитьКолонку("Сообщение");
	ЖурналПроверки = СтрСоединить(МассивЗаписей, Символы.ПС);
	
	Если ТипЗнч(ПроверкаВерсии) = Тип("ДокументСсылка.ПроверкаВерсии") Тогда
		ПроверкаОбъект = ПроверкаВерсии.ПолучитьОбъект();
		ПроверкаОбъект.ЖурналПроверки = ЖурналПроверки;
		ПроверкаОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьВремяВыполненияПравил(ПараметрыПроведения, ПроверкаВерсии, ЖурналПроверки)
	
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	Конфигурация = ПроверкаВерсии.Конфигурация;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(ПараметрыПроведения.Расширение);
	
	ЗамерВремениВыполнения = ПараметрыПроведения.ЗамерВремениВыполнения;
	ЗамерВремениВыполнения.Свернуть("Правило", "Время");
	ЗамерВремениВыполнения.Сортировать("Время Убыв");
	
	КоличествоПравил = ЗамерВремениВыполнения.Количество();
	КоличествоДляВывода = 0;
	
	Если КоличествоПравил = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоПравил = 1 Тогда
		Текст = СтрШаблон(НСтр("ru='Время проверки 1 выполненного правила для %1:'"), ОписаниеКонфигурацииИлиРасширения);
		КоличествоДляВывода = КоличествоПравил -1;
	ИначеЕсли КоличествоПравил < 6 Тогда
		Текст = СтрШаблон(НСтр("ru='Время проверки %1 выполненных правил для %2:'"), КоличествоПравил,
			ОписаниеКонфигурацииИлиРасширения);
		КоличествоДляВывода = КоличествоПравил - 1;
	Иначе
		Текст = СтрШаблон(НСтр("ru='Время проверки 5 самых длительных правил для %1:'"), ОписаниеКонфигурацииИлиРасширения);
		КоличествоДляВывода = 4;
	КонецЕсли;
	
	МассивПервыхПятиПравил = Новый Массив;
	Для Счет = 0 По КоличествоДляВывода Цикл
		
		СтрокаПравила = ЗамерВремениВыполнения[Счет];
		
		ВремяВМиллисекундах = СтрокаПравила.Время;
		Время = Окр((ВремяВМиллисекундах / 1000));
		Часы = Цел(Время / 3600);
		ДобавитьЛидирующиеНули(Часы, 2);
		Минуты = Цел((Время % 3600) / 60);
		ДобавитьЛидирующиеНули(Минуты, 2);
		Секунды = Время % 60;
		ДобавитьЛидирующиеНули(Секунды, 2);
		ВремяСтрокой = СтрШаблон("%1:%2:%3", Часы, Минуты, Секунды);
		
		ТекстЗамера = СтрШаблон("%1. %2 - %3", Счет + 1, ВремяСтрокой, СтрокаПравила.Правило);
		МассивПервыхПятиПравил.Добавить(ТекстЗамера);
		
	КонецЦикла;
	
	Текст = Текст + Символы.ПС + СтрСоединить(МассивПервыхПятиПравил, Символы.ПС);
	
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ЖурналПроверки, ТаблицаЖурнала);
	
КонецПроцедуры

Процедура ДобавитьЛидирующиеНули(Число, ДлинаСтроки)
	
	ФорматнаяСтрока = СтрШаблон("ЧЦ=%1; ЧВН=", ДлинаСтроки);
	Число = Формат(Число, ФорматнаяСтрока);
	
	Если ПустаяСтрока(Число) Тогда
		Для Счет = 1 По ДлинаСтроки Цикл
			Число = Число + "0";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаОрфографии

// Заполняет соответствие верных слов из словаря и регистра сведений "Верные слова":
//  ВерныеСлова - соответствие правильных слов,
//  ДополнитьИзРегистра - флаг, добавлять слова из регистра сведений.
//
Процедура ИнициализироватьСловарьВерныхСлов(ВерныеСлова, ДополнитьИзРегистра = Истина) Экспорт
	
	Если ТипЗнч(ВерныеСлова) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем словарь из макета.
	ИмяФайлаСловаря = ПолучитьИмяВременногоФайла("txt");
	ПолучитьОбщийМакет("СловарьВерныхСлов").Записать(ИмяФайлаСловаря);
	
	ВерныеСлова = Новый Соответствие;
	
	МакетСловаря = Новый ЧтениеТекста(ИмяФайлаСловаря, "windows-1251");
	Слово = МакетСловаря.ПрочитатьСтроку();
	Пока Слово <> Неопределено Цикл
		ВерныеСлова.Вставить(Слово, Истина);
		Слово = МакетСловаря.ПрочитатьСтроку();
	КонецЦикла;
	
	ФайлУдалить(ИмяФайлаСловаря);
	
	Если НЕ ДополнитьИзРегистра Тогда
		Возврат;
	КонецЕсли;
	
	// Внутренний словарь.
	ЗапросПоСловарю = Новый Запрос;
	ЗапросПоСловарю.Текст = "
	|ВЫБРАТЬ
	|	ВерныеСлова.Слово КАК Слово
	|ИЗ
	|	РегистрСведений.ВерныеСлова КАК ВерныеСлова";
	
	ВыборкаСлов = ЗапросПоСловарю.Выполнить().Выбрать();
	Пока ВыборкаСлов.Следующий() Цикл
		ВерныеСлова.Вставить(СокрЛП(ВРег(ВыборкаСлов.Слово)), Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуОрфографии(ТаблицаОшибокОрфографии, Текст, НомерСтроки, МестоПроверки, Дополнительно)
	
	ОшибкаОрфографии = ТаблицаОшибокОрфографии.Добавить();
	ОшибкаОрфографии.Текст = Текст;
	ОшибкаОрфографии.НомерСтроки = НомерСтроки;
	ОшибкаОрфографии.МестоПроверки = МестоПроверки;
	ОшибкаОрфографии.Дополнительно = Дополнительно;
	
КонецПроцедуры

// Процедура выполняет проверку правописания в переданном тексте.
//
Процедура ПроверитьПравописание(Знач ТекстДляПроверки, СтруктураПараметровПроверкиОрфографии) Экспорт
	
	ТаблицаОшибокОрфографии = СтруктураПараметровПроверкиОрфографии.ТаблицаОшибокОрфографии;
	СтруктураСоответствийВерныхСлов = СтруктураПараметровПроверкиОрфографии.СтруктураСоответствийВерныхСлов;
	МестоПроверки = СтруктураПараметровПроверкиОрфографии.МестоПроверки;
	Дополнительно = СтруктураПараметровПроверкиОрфографии.Дополнительно;
	РазбиватьСвязныеСлова = СтруктураПараметровПроверкиОрфографии.РазбиватьСвязныеСлова;
	СтруктураНастроекПодключенияКСловарю = СтруктураПараметровПроверкиОрфографии.СтруктураНастроекПодключенияКСловарю;
	
	ВерныеСлова					 = СтруктураСоответствийВерныхСлов.ВерныеСлова;
	СоответствиеСловПроверки	 = СтруктураСоответствийВерныхСлов.СоответствиеСлов;
	СловаИзЯндексСловаря		 = СтруктураСоответствийВерныхСлов.СловаИзЯндексСловаря;
	
	Если ВерныеСлова = Неопределено Тогда
		ИнициализироватьСловарьВерныхСлов(ВерныеСлова);
	КонецЕсли;
	
	ТекстДляПроверки = СтрЗаменить(ТекстДляПроверки, "Ё", "Е");
	ТекстДляПроверки = СтрЗаменить(ТекстДляПроверки, "ё", "е");
	
	НомерСтроки = 0;
	МассивСтрок = СтрРазделить(ТекстДляПроверки, Символы.ПС, Истина);
	Для Каждого СтрокаМодуля Из МассивСтрок Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		МассивСловСтроки = СтрРазделить(СтрокаМодуля, " ", Ложь);
		
		Для Каждого СвязноеСлово Из МассивСловСтроки Цикл
			
			// Аббревиатуры не проверяем.
			СвязноеСловоВРег = ВРег(СвязноеСлово);
			Если СвязноеСловоВРег = СвязноеСлово Тогда
				Продолжить;
			КонецЕсли;
			
			СловоНаписаноВерно = СоответствиеСловПроверки[СвязноеСлово];
			Если СловоНаписаноВерно = Истина Тогда
				Продолжить;
			ИначеЕсли СловоНаписаноВерно = Ложь Тогда
				ЗаписатьОшибкуОрфографии(ТаблицаОшибокОрфографии, СвязноеСлово, НомерСтроки, МестоПроверки, Дополнительно);
				Продолжить;
			КонецЕсли;
			
			Если ВерныеСлова[СвязноеСловоВРег] = Истина Тогда
				СоответствиеСловПроверки.Вставить(СвязноеСлово, Истина);
				Продолжить;
			КонецЕсли;
			
			Если РазбиватьСвязныеСлова Тогда
				МассивСлов = ПолучитьМассивСловПоЗаглавнымБуквам(СвязноеСлово);
			Иначе
				МассивСлов = Новый Массив;
				МассивСлов.Добавить(СвязноеСлово);
			КонецЕсли;
			
			СвязноеСловоНаписаноВерно = Истина;
			Для Каждого Слово Из МассивСлов Цикл
				
				СловоВРег = ВРег(Слово);
				
				ОтдельноеСловоНаписаноВерно = СоответствиеСловПроверки[Слово];
				Если ОтдельноеСловоНаписаноВерно = Истина Тогда
					Продолжить;
				ИначеЕсли ОтдельноеСловоНаписаноВерно = Ложь Тогда
					ЗаписатьОшибкуОрфографии(ТаблицаОшибокОрфографии, Слово, НомерСтроки, МестоПроверки, Дополнительно);
					СвязноеСловоНаписаноВерно = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если (ВерныеСлова[СловоВРег] = Истина)
				 ИЛИ (СловаИзЯндексСловаря[СловоВРег] = Истина)
				 ИЛИ (СтрДлина(Слово) = 1)
				 ИЛИ ЭтоЧисло(Слово)
				 ИЛИ СловоСодержитЛатиницу(Слово) Тогда
					
					СоответствиеСловПроверки.Вставить(Слово, Истина);
					Продолжить;
				КонецЕсли;
				
				Если СтруктураНастроекПодключенияКСловарю.Количество() > 0 Тогда
					
					WSПрокси = СтруктураНастроекПодключенияКСловарю.WSПрокси;
					Пакет = СтруктураНастроекПодключенияКСловарю.Пакет;
					
					Пакет.Text = Слово;
					
					РезультатВебОперации = WSПрокси.checkTexts(Пакет);
					Если РезультатВебОперации.ArrayOfSpellResult.SpellResult[0].Error.Количество() = 0 Тогда
						СоответствиеСловПроверки.Вставить(Слово, Истина);
						СловаИзЯндексСловаря.Вставить(СловоВРег, Истина);
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ЗаписатьОшибкуОрфографии(ТаблицаОшибокОрфографии, Слово, НомерСтроки, МестоПроверки, Дополнительно);
				СоответствиеСловПроверки.Вставить(Слово, Ложь);
				СвязноеСловоНаписаноВерно = Ложь;
			КонецЦикла;
			
			Если СвязноеСловоНаписаноВерно Тогда
				СоответствиеСловПроверки.Вставить(СвязноеСлово, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураСоответствийВерныхСлов.ВерныеСлова = ВерныеСлова;
	СтруктураСоответствийВерныхСлов.СоответствиеСлов = СоответствиеСловПроверки;
	СтруктураСоответствийВерныхСлов.СловаИзЯндексСловаря = СловаИзЯндексСловаря;
	
	СтруктураПараметровПроверкиОрфографии.ТаблицаОшибокОрфографии = ТаблицаОшибокОрфографии ;
	СтруктураПараметровПроверкиОрфографии.СтруктураСоответствийВерныхСлов = СтруктураСоответствийВерныхСлов;
	
КонецПроцедуры

// Функция возвращает строку, полученную путем преобразования переданной строки кода или текстового документа с кодом.
// Выполняется преобразование:
//  1. Убираются комментарии.
//  2. Символы форматирования заменяются на пробелы.
//  3. Сокращаются повторяющиеся пробелы.
//  4. Сокращаются повторяющиеся ";".
//  5. Образуются пробелы слева и справа.
//  6. Выполняется перевод в верхний регистр.
//  7. Суммируется через пробел в результирующую строку.
//
Функция ПолучитьДайджестСтрокиКода(СтрокаКода) Экспорт
	
	Буфер = Новый ТекстовыйДокумент;
	
	Если ТипЗнч(СтрокаКода) = Тип("Строка") Тогда
		Буфер.УстановитьТекст(СтрокаКода);
	ИначеЕсли ТипЗнч(СтрокаКода) = Тип("ТекстовыйДокумент") Тогда
		Буфер.УстановитьТекст(СтрокаКода.ПолучитьТекст());
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = "";
	
	ВсегоСтрок = Буфер.КоличествоСтрок();
	
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Порция = Буфер.ПолучитьСтроку(Счетчик);
		
		// 1. Убираются комментарии.
		ПозицияКомментария = СтрНайти(Порция, "//");
		Если ПозицияКомментария > 0 Тогда
			Порция = Лев(Порция, ПозицияКомментария - 1);
		КонецЕсли;
		
		// 2. Символы форматирования заменяются на пробелы.
		Порция = СтрЗаменить(Порция, Символы.ВК, 	" ");
		Порция = СтрЗаменить(Порция, Символы.ВТаб, 	" ");
		Порция = СтрЗаменить(Порция, Символы.НПП, 	" ");
		Порция = СтрЗаменить(Порция, Символы.ПС, 	" ");
		Порция = СтрЗаменить(Порция, Символы.ПФ, 	" ");
		Порция = СтрЗаменить(Порция, Символы.Таб, 	" ");
		
		// 3. Сокращаются повторяющиеся пробелы.
		Пока СтрНайти(Порция, "  ") > 0 Цикл
			Порция = СтрЗаменить(Порция, "  ", " ");
		КонецЦикла;
		
		// 4. Сокращаются повторяющиеся ";".
		Пока СтрНайти(Порция, ";;") > 0 Цикл
			Порция = СтрЗаменить(Порция, ";;", ";");
		КонецЦикла;
		
		// 5. Обрезаются пробелы слева и справа.
		Порция = СокрЛП(Порция);
		
		// 6. Выполняется перевод в верхний регистр.
		Порция = ВРЕГ(Порция);
		
		// 7. Суммируется через пробел в результирующую строку.
		Если НЕ ПустаяСтрока(Порция) Тогда
			Результат = Результат + Порция;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСловарьВерныхСлов(СловаИзЯндексСловаря)
	
	Если СловаИзЯндексСловаря.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Слово Из СловаИзЯндексСловаря Цикл
		Запись = РегистрыСведений.ВерныеСлова.СоздатьМенеджерЗаписи();
		Запись.Слово = Слово.Ключ;
		Запись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Разбиваем слово на несколько по заглавным буквам.
//
Функция ПолучитьМассивСловПоЗаглавнымБуквам(Знач Слово) Экспорт
	
	Если ПустаяСтрока(Слово) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Строка = "";
	
	ДлинаСлова = СтрДлина(Слово);
	Для Счетчик = 1 По ДлинаСлова Цикл
		
		Буква = Сред(Слово, Счетчик, 1);
		Если Буква = ВРег(Буква) Тогда
			Строка = Строка + " ";
		КонецЕсли;
		
		Строка = Строка + Буква;
		
	КонецЦикла;
	
	Возврат СтрРазделить(Строка, " ", Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Процедура реализует обработчик событий обработки удаления проведения документа.
// Предназначения для пометки недействительными ошибок, которые записываются в результате проведения этого документа.
//
Процедура ОбработкаУдаленияПроведенияПроверкаВерсии(Источник, Отказ) Экспорт
	
	// Отмечаем ошибки, которые выпадают из поля проверки.
	ЗапросПоПравиламДокумента = Новый Запрос;
	ЗапросПоПравиламДокумента.Текст = "
	|ВЫБРАТЬ
	|	ТребованияРеализацияТребования.ПравилоПроверки КАК Правило
	|ИЗ
	|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
	|ГДЕ
	|	ТребованияРеализацияТребования.Ссылка В
	|		(ВЫБРАТЬ
	|			ПроверкаВерсииСоставТребований.Требование КАК Требование
	|		ИЗ
	|			Документ.ПроверкаВерсии.СоставТребований КАК ПроверкаВерсииСоставТребований
	|		ГДЕ
	|			ПроверкаВерсииСоставТребований.Ссылка = &Ссылка)
	|	И НЕ ТребованияРеализацияТребования.ПравилоПроверки.РучнаяПроверка";
	
	ЗапросПоПравиламДокумента.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ПравилаДокумента = ЗапросПоПравиламДокумента.Выполнить().Выгрузить().ВыгрузитьКолонку("Правило");
	
	ЗапросПоПравиламДругихДокументов = Новый Запрос;
	ЗапросПоПравиламДругихДокументов.Текст = "
	|ВЫБРАТЬ
	|	ТребованияРеализацияТребования.ПравилоПроверки КАК Правило
	|ИЗ
	|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
	|ГДЕ
	|	ТребованияРеализацияТребования.Ссылка В
	|		(ВЫБРАТЬ
	|			ПроверкаВерсииСоставТребований.Требование КАК Требование
	|		ИЗ
	|			Документ.ПроверкаВерсии.СоставТребований КАК ПроверкаВерсииСоставТребований
	|		ГДЕ
	|			  (ПроверкаВерсииСоставТребований.Ссылка <> &Ссылка)
	|			И (ПроверкаВерсииСоставТребований.Ссылка.ВерсияКонфигурации = &Версия)
	|			И (НЕ ПроверкаВерсииСоставТребований.Ссылка.ПометкаУдаления))
	|	И НЕ ТребованияРеализацияТребования.ПравилоПроверки.РучнаяПроверка";
	
	ЗапросПоПравиламДругихДокументов.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ЗапросПоПравиламДругихДокументов.УстановитьПараметр("Версия", Источник.ВерсияКонфигурации);
	
	ПравилаДругихДокументов = ЗапросПоПравиламДругихДокументов.Выполнить().Выгрузить().ВыгрузитьКолонку("Правило");
	
	Для Каждого ОбщееПравило Из ПравилаДругихДокументов Цикл
		ИндексПравила = ПравилаДокумента.Найти(ОбщееПравило);
		Если ИндексПравила <> Неопределено Тогда
			ПравилаДокумента.Удалить(ИндексПравила);
		КонецЕсли;
	КонецЦикла;
	
	// Получаем список ошибок для удаления.
	ЗапросПоОшибкам = Новый Запрос;
	ЗапросПоОшибкам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Номер,
	|	НайденныеОшибки.Правило,
	|	НайденныеОшибки.Объект
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец = &Версия
	|	И НайденныеОшибки.Правило В(&Правила)
	|	И НайденныеОшибки.Состояние <> &Состояние";
	
	ЗапросПоОшибкам.УстановитьПараметр("Версия", Источник.ВерсияКонфигурации);
	ЗапросПоОшибкам.УстановитьПараметр("Правила", ПравилаДокумента);
	ЗапросПоОшибкам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Особенность);
	
	ВыборкаОшибок = ЗапросПоОшибкам.Выполнить().Выбрать();
	
	МенеджерОшибки = РегистрыСведений.НайденныеОшибки.СоздатьМенеджерЗаписи();
	
	Пока ВыборкаОшибок.Следующий() Цикл
		// Удаляем ошибку, так как она не действительна.
		МенеджерОшибки.Номер = ВыборкаОшибок.Номер;
		МенеджерОшибки.Объект = ВыборкаОшибок.Объект;
		МенеджерОшибки.Правило = ВыборкаОшибок.Правило;
		
		МенеджерОшибки.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура реализует обработчик событий перед записью документа.
// Предназначения для проверки возможности редактирования документа.
// Запрещает редактирование документа ранее даты запрета редактирования.
//
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПоДате = Новый Запрос;
	ЗапросПоДате.Текст = "
	|ВЫБРАТЬ
	|	Константы.ДатаЗапретаРедактирования КАК ДатаЗапретаРедактирования
	|ИЗ
	|	Константы КАК Константы";
	
	Выборка = ЗапросПоДате.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Источник.Дата <= Выборка.ДатаЗапретаРедактирования Тогда
		Отказ = Истина;
		#Если Клиент Тогда
		Предупреждение(НСтр("ru='Нельзя изменять документы с датой, ранее даты запрета редактирования.'"));
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПлатформеннаяПроверкаКонфигурации

Процедура ЗаписатьРезультатыПлатформеннойПроверки(ПроверкаВерсии, ПараметрыПроведения, ЖурналПроверки, Расширение)
	
	ФайлРезультата = ПараметрыПроведения.ФайлРезультатаПлатформеннойПроверки;
	ТаблицаЖурнала = ПараметрыПроведения.ТаблицаЖурнала;
	
	Если НЕ ЗначениеЗаполнено(ФайлРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	Конфигурация = ПроверкаВерсии.Конфигурация;
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	Операция = НСтр("ru='Платформенная проверка %1'");
	Операция = СтрШаблон(Операция, ОписаниеКонфигурацииИлиРасширения);
	Статус = ОжиданиеЗавершенияПлатформеннойПроверки(ФайлРезультата, Операция);
	Если ПустаяСтрока(Статус) Тогда
		
		// Если платформенная проверка завершилась успешно, то пишем ошибки в РС.
		ЗаписатьОшибкиПлатформеннойПроверкиКонфигурации(ПроверкаВерсии, Расширение, ФайлРезультата);
		ВремяИзменения = ПолучитьВремяИзмененияФайла(ФайлРезультата);
		ФайлУдалить(ФайлРезультата);
		
		Текст = СтрШаблон(НСтр("ru='Платформенная проверка %1 завершена'"), ОписаниеКонфигурацииИлиРасширения);
		ЗафиксироватьСПроизвольнойДатой(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ВремяИзменения,
			ЖурналПроверки, ТаблицаЖурнала);
		
		// Устанавливаем флаг, если в статусе нет ошибки.
		ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеПоПроверкеКонфигурации",, Расширение);
		
	Иначе
		// Если не удалось записать ошибки платформенной проверки, сообщаем об ошибке.
		Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Статус, ЖурналПроверки, ТаблицаЖурнала);
	КонецЕсли;
	
КонецПроцедуры

Функция ОжиданиеЗавершенияПлатформеннойПроверки(ФайлРезультатаОперации, НаименованиеОперации = "")
	
	Статус = "";
	
	#Если Клиент Тогда
	
	НачалоОжидания = ТекущаяДатаСеанса();
	
	ФайлСкриптаПаузы = ПолучитьИмяВременногоФайла("vbs");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку("WScript.Sleep WScript.Arguments(0)");
	ТекстовыйДокумент.Записать(ФайлСкриптаПаузы, КодировкаТекста.ANSI);
	
	ОбъектWScript = Новый COMОбъект("WScript.Shell");
	КомандаПаузы = "WScript.exe ""%1"" %2";
	КомандаПаузы = СтрШаблон(КомандаПаузы, ФайлСкриптаПаузы, "10000");
	
	ЧтениеТекста = Новый ЧтениеТекста;
	
	ТекстСостояния = НСтр("ru='Ожидание завершения операции ""%1""'");
	ТекстСостояния = СтрШаблон(ТекстСостояния, НаименованиеОперации);
	Состояние(ТекстСостояния);
	
	Пока Истина Цикл
		
		// Ожидаем не более 5 часов.
		ВремяОжидания = ТекущаяДатаСеанса() - НачалоОжидания;
		Если ВремяОжидания > 5 * 60 * 60 Тогда
			Статус = НСтр("ru='Время ожидания завершения операции ""%1"" превышает 5 часов.'");
			Статус = СтрШаблон(Статус, НаименованиеОперации);
			Прервать;
		КонецЕсли;
		
		Если НЕ ФайлСуществует(ФайлРезультатаОперации) Тогда
			Статус = НСтр("ru='Не найден файл с результатами операции ""%1"" по пути: %2'");
			Статус = СтрШаблон(Статус, НаименованиеОперации, ФайлРезультатаОперации);
			Возврат Статус;
		КонецЕсли;
		
		// Проверяем, можно ли открыть файл на чтение монопольно.
		Попытка
			ЧтениеТекста.Открыть(ФайлРезультатаОперации);
			ЧтениеТекста.Закрыть();
			
			// Если да, то платформенная проверка закончилась, прерываем цикл.
			Прервать;
		Исключение
		КонецПопытки;
		
		ОбработкаПрерыванияПользователя();
		
		// Пауза 10 секунд.
		ОбъектWScript.Run(КомандаПаузы, 0, 1);
		
	КонецЦикла;
	
	Состояние("");
	
	ФайлУдалить(ФайлСкриптаПаузы);
	ОбъектWScript = Неопределено;
	
	#КонецЕсли
	
	Возврат Статус;
	
КонецФункции

Функция УдалитьОшибкиПлатформеннойПроверкиКонфигурации(Версия, Расширение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОшибкиПроверкиКонфигурации.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ОшибкиПроверкиКонфигурации КАК ОшибкиПроверкиКонфигурации
	|ГДЕ
	|	ОшибкиПроверкиКонфигурации.Объект.Расширение = &Расширение
	|	И ОшибкиПроверкиКонфигурации.Версия = &Версия";
	
	Запрос.УстановитьПараметр("Расширение", Расширение);
	Запрос.УстановитьПараметр("Версия", Версия);
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	ТаблицаОбъектов.Свернуть("Объект");
	
	НаборЗаписей = РегистрыСведений.ОшибкиПроверкиКонфигурации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	
	Для Каждого СтрокаТаблицыОбъектов Из ТаблицаОбъектов Цикл
		НаборЗаписей.Отбор.Объект.Установить(СтрокаТаблицыОбъектов.Объект);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецФункции

// Получает отчет о проверке конфигурации, записывает ошибки в регистр сведений,
// в случае ошибки возвращает сообщение об ошибке, иначе пустую строку.
//
Функция ЗаписатьОшибкиПлатформеннойПроверкиКонфигурации(ПроверкаВерсии, Расширение, ИмяФайлаРезультата)
	
	Версия = ПроверкаВерсии.ВерсияКонфигурации;
	
	ТекстОшибки = "";
	
	ТаблицаОшибок = ПолучитьОшибкиПроверкиКонфигурации(Версия, Расширение, ИмяФайлаРезультата);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиПроверкиКонфигурации");
		ЭлементБлокировки.УстановитьЗначение("Версия", Версия);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		УдалитьОшибкиПлатформеннойПроверкиКонфигурации(Версия, Расширение);
		
		НаборЗаписей = РегистрыСведений.ОшибкиПроверкиКонфигурации.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТаблицаОшибок);
		НаборЗаписей.Записать(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось записать ошибки платформенной проверки по причине: %1%2'"),
			Символы.ПС,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПолучитьОшибкиПроверкиКонфигурации(Версия, Расширение, ИмяФайлаРезультата)
	
	ТаблицаОшибок = Новый ТаблицаЗначений();
	ТаблицаОшибок.Колонки.Добавить("Версия");
	ТаблицаОшибок.Колонки.Добавить("Объект");
	ТаблицаОшибок.Колонки.Добавить("ВременныйПуть");
	ТаблицаОшибок.Колонки.Добавить("МестоОбнаружения");
	ТаблицаОшибок.Колонки.Добавить("Уточнение");
	ТаблицаОшибок.Колонки.Добавить("Критичная");
	ТаблицаОшибок.Колонки.Добавить("ОписаниеОшибки");
	
	Если НЕ ФайлСуществует(ИмяФайлаРезультата) Тогда
		Возврат ТаблицаОшибок;
	КонецЕсли;
	
	ПроверкаРасширения = ЗначениеЗаполнено(Расширение);
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ИмяФайлаРезультата);
	ТекстФайлаПроверкиКонфигурации = ДокументТекст.ПолучитьТекст();
	ТекстФайлаПроверкиКонфигурации = СокрЛП(ТекстФайлаПроверкиКонфигурации);
	
	Если (СтрСравнить(ТекстФайлаПроверкиКонфигурации, НСтр("ru='Ошибок не обнаружено'")) = 0)
	 ИЛИ (СтрСравнить(ТекстФайлаПроверкиКонфигурации, НСтр("ru='No errors found'")) = 0) Тогда
		Возврат ТаблицаОшибок;
	КонецЕсли;
	
	ТипыОбъектов = ЗаполнитьТаблицуТиповОбъектов();
	ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	
	ТипОбъектаКонфигурация = Перечисления.ТипыОбъектов.Конфигурация;
	ОбъектКореньКонфигурации = ПолучитьЭлементСтруктурыМетаданных(Версия,,, ТипОбъектаКонфигурация, Расширение);
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Строка = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Если СтрНайти(Строка, "<<?>>") > 0
		 ИЛИ СтрНайти(Строка, НСтр("ru='Неправильные пути к данным'")) > 0
		 ИЛИ СтрНайти(Строка, НСтр("ru='Неразрешимые ссылки на типы'")) > 0
		 ИЛИ СтрНайти(Строка, НСтр("ru='Неразрешимые ссылки на картинки'")) > 0
		 ИЛИ СтрНайти(Строка, НСтр("ru='Неразрешимые ссылки на цвета'")) > 0
		 ИЛИ СтрНайти(Строка, НСтр("ru='Неразрешимые ссылки на элементы стиля'")) > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверкаРасширения Тогда
			ПозицияПервогоПробела = СтрНайти(Строка, " ");
			Если ПозицияПервогоПробела = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяРасширения = Лев(Строка, ПозицияПервогоПробела - 1);
			// Платформа выдает также некоторые ошибки самой конфигурации(например, синтаксические), если объект добавлен в расширение.
			// Такие ошибки необходимо пропускать.
			Если СтрНайти(ИмяРасширения, "}") > 0 Тогда
				Продолжить;
			КонецЕсли;
			Строка = Сред(Строка, ПозицияПервогоПробела + 1);
			Если Лев(ИмяРасширения, 1) = "{" Тогда
				ИмяРасширения = Сред(ИмяРасширения, 2);
				Строка = "{" + Строка;
			КонецЕсли;
		КонецЕсли;
		
		ПозицияПервогоПробела = СтрНайти(Строка, " ");
		Если ПозицияПервогоПробела = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияКруглойСкобки = СтрНайти(Строка, "(");
		ПозицияФигурнойСкобки = СтрНайти(Строка, "{");
		Если ПозицияФигурнойСкобки = 0 Тогда
			
			ПутьКОбъекту = Лев(Строка, ПозицияПервогоПробела - 1);
			ОписаниеОшибки = Сред(Строка, ПозицияКруглойСкобки);
			
			// Не регистрируем ошибки вида "Не обнаружено ссылок на" для подключаемых процедур и функций.
			Если СтрНайти(ОписаниеОшибки, НСтр("ru='Не обнаружено ссылок на'")) > 0
			   И СтрНайти(ВРег(ОписаниеОшибки), "ПОДКЛЮЧАЕМЫЙ_") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Уточнение = Прав(Строка, СтрДлина(Строка) - ПозицияПервогоПробела);
			
			// Не регистрируем ошибка вида "Неразрешимые ссылки на объекты метаданных" для всех объектов, кроме справки.
			Если СтрНайти(Уточнение, НСтр("ru='Неразрешимые ссылки на объекты метаданных'")) > 0 Тогда
				ПоследнийЭлементПути = ПолучитьПоследнийЭлементПути(ПутьКОбъекту);
				Если СтрСравнить(ПоследнийЭлементПути, "Справка") <> 0  Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МестоОбнаружения = ПолучитьТипМодуля(ПутьКОбъекту);
			КритичнаяОшибка = Ложь;
			
		Иначе
			
			ПозицияПервойЗапятой = СтрНайти(Строка, ",");
			ПутьКОбъекту = Сред(Строка, ПозицияФигурнойСкобки + 1, ПозицияКруглойСкобки - ПозицияФигурнойСкобки - 1);
			ОписаниеОшибки = Сред(Строка, ПозицияКруглойСкобки);
			Уточнение = СокрЛП(Сред(Строка, ПозицияПервогоПробела));
			НомерСтрокиОшибки = Сред(Строка, ПозицияКруглойСкобки + 1, ПозицияПервойЗапятой - ПозицияКруглойСкобки - 1);
			
			ТипМодуля = ПолучитьТипМодуля(ПутьКОбъекту);
			ТипМодуля = ?(ЗначениеЗаполнено(ТипМодуля), ТипМодуля, НСтр("ru='Модуль'"));
			МестоОбнаружения = СтрШаблон(НСтр("ru='%1, стр. %2'"), ТипМодуля, НомерСтрокиОшибки);
			КритичнаяОшибка = Истина;
			
		КонецЕсли;
		
		ПараметрыОтбора = Неопределено;
		ПутьКОбъекту = ЗаменитьАнглийскиеЭлементыПути(ПутьКОбъекту, ТаблицаТиповОбъектов);
		ОбъектСсылка = ПолучитьСсылкуНаОбъектПоПути(Версия, ПутьКОбъекту, ТипыОбъектов, Расширение);
		
		Если ОбъектСсылка.Пустая() Тогда
			ОбъектСсылка = ОбъектКореньКонфигурации;
		КонецЕсли;
		
		НоваяОшибка = ТаблицаОшибок.Добавить();
		НоваяОшибка.Версия = Версия;
		НоваяОшибка.Объект = ОбъектСсылка;
		НоваяОшибка.ВременныйПуть = ПутьКОбъекту;
		НоваяОшибка.Уточнение = Уточнение;
		НоваяОшибка.МестоОбнаружения = МестоОбнаружения;
		НоваяОшибка.Критичная = КритичнаяОшибка;
		НоваяОшибка.ОписаниеОшибки = ОписаниеОшибки;
		
		СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
		
		Если СтрНайти(СледующаяСтрока, "<<?>>") > 0 Тогда
			НоваяОшибка.Уточнение = Уточнение + Символы.ПС + СокрЛП(СледующаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПолучитьТипМодуля(ПутьКОбъекту)
	
	Если НЕ ЗначениеЗаполнено(ПутьКОбъекту) Тогда
		Возврат "";
	КонецЕсли;
	
	ПоследнийЭлементПути = ПолучитьПоследнийЭлементПути(ПутьКОбъекту);
	
	// Если путь к объекту заканчивается на "Форма", то это модуль формы.
	Если ПоследнийЭлементПути = "Форма" Тогда
		ПоследнийЭлементПути = "Модуль";
	ИначеЕсли СтрНайти(ПоследнийЭлементПути, "Модуль") = 0 Тогда
		Возврат ПоследнийЭлементПути;
	КонецЕсли;
	
	Значение = Метаданные.Перечисления.ИдентификаторыСодержанияОбъектов.ЗначенияПеречисления.Найти(ПоследнийЭлементПути);
	Если Значение = Неопределено Тогда
		Возврат ПоследнийЭлементПути;
	КонецЕсли;
	
	Возврат Значение.Синоним;
	
КонецФункции

Функция ПолучитьПоследнийЭлементПути(ПутьКОбъекту)
	
	МассивЭлементовПути = СтрРазделить(ПутьКОбъекту, ".", Ложь);
	ПоследнийЭлементПути = МассивЭлементовПути[МассивЭлементовПути.ВГраница()];
	
	Возврат ПоследнийЭлементПути;
	
КонецФункции

Функция ЗаменитьАнглийскиеЭлементыПути(ПутьКОбъекту, ТаблицаТиповОбъектов)
	
	МассивЭлементовПути = СтрРазделить(ПутьКОбъекту, ".", Ложь);
	
	КоличествоЭлементов = МассивЭлементовПути.Количество();
	Если КоличествоЭлементов = 0 Тогда
		Возврат ПутьКОбъекту;
	КонецЕсли;
	
	МассивЭлементовПути[0] = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, МассивЭлементовПути[0], "ИмяАнгл", "Имя");
	
	ПутьКОбъекту = СтрСоединить(МассивЭлементовПути, ".");
	
	Возврат ПутьКОбъекту;
	
КонецФункции

Процедура ЗафиксироватьСПроизвольнойДатой(Конфигурация, Уровень, Текст, ВремяИзменения, ЖурналПроверки, ТаблицаЖурнала)
	
	ДатаПроверки = Формат(ТекущаяДатаСеанса(), "ДФ=""ггггММдд""");
	
	ИмяСобытия = СтрЗаменить(Конфигурация, ".", "_");
	ИмяСобытия = СтрШаблон(НСтр("ru='Проверка конфигурации.%1.%2'", Метаданные.ОсновнойЯзык.КодЯзыка),
		ИмяСобытия, ДатаПроверки);
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,, Текст);
	
	ТекстСообщения = СтрШаблон("[%1]: %2", ВремяИзменения, Текст);
	
	#Если Клиент Тогда
	Сообщить(ТекстСообщения);
	#КонецЕсли
	
	Если ПустаяСтрока(ЖурналПроверки) Тогда
		ЖурналПроверки = ТекстСообщения;
	Иначе
		ЖурналПроверки = ЖурналПроверки + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	
	Порядок = 1;
	КоличествоСтрок = ТаблицаЖурнала.Количество();
	Если КоличествоСтрок > 0 Тогда
		ПоследняяСтрока = ТаблицаЖурнала[КоличествоСтрок - 1];
		Порядок = ПоследняяСтрока.Порядок + 1;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаЖурнала.Добавить();
	НоваяСтрока.Сообщение = ТекстСообщения;
	НоваяСтрока.Время = ВремяИзменения;
	НоваяСтрока.Порядок = Порядок;
	
КонецПроцедуры

Функция ПолучитьВремяИзмененияФайла(ФайлРезультата)
	
	Если НЕ ФайлСуществует(ФайлРезультата) Тогда
		Возврат ТекущаяДатаСеанса();
	КонецЕсли;
	
	Попытка
		Файл = Новый Файл(ФайлРезультата);
		ДатаИзменения = Файл.ПолучитьВремяИзменения();
	Исключение
		ДатаИзменения = ТекущаяДатаСеанса();
	КонецПопытки;
	
	Возврат ДатаИзменения;
	
КонецФункции

#КонецОбласти

#КонецОбласти