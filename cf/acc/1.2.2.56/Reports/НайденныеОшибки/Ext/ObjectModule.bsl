#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ТипыОбъектов;

Перем ДанныеРасшифровкиОтчета Экспорт;  // Служебные данные расшифровки
Перем СписокОтчетов;                    // Список доступных отчетов
Перем Разделители;                      // Символы-разделители

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает новый табличный документ с СКД из переданного отчета, с настройками по умолчанию.
// Параметры:
//   ИмяОтчета - Отчет-источник, откуда получаем макет СКД.
//   ПараметрыНастроек - Параметры для создания табличного документа.
//   Настройки - Настройки, для которых необходимо создать макет.
//   ТаблицаЗначенийРезультат - Таблица значений.
// Возвращаемое значение:
//   Табличный документ.
Функция СформироватьТабличныйДокумент(ИмяОтчета, ПараметрыНастроек, Настройки = Неопределено,
	ТаблицаЗначенийРезультат = Неопределено) Экспорт
	
	// Получаем СКД.
	Схема = ПолучитьМакет(ИмяОтчета);
	
	Для Каждого ЗначениеПараметра Из Схема.Параметры Цикл
		ЗначениеКУстановке = ПараметрыНастроек[ЗначениеПараметра.Имя];
		Если ЗначениеКУстановке <> Неопределено Тогда
			ЗначениеПараметра.Значение = ЗначениеКУстановке;
		КонецЕсли;
	КонецЦикла;
	
	// Получаем настройки по умолчанию.
	Если Настройки = Неопределено Тогда
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	// Создаем компоновщик.
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = Компоновщик.Выполнить(Схема, Настройки, ДанныеРасшифровкиОтчета);
	
	// Создаем процессор компоновки.
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОтчета);
	
	// Формируем табличный документ.
	ТабДокумент = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);
	СтандартнаяОбработка = Ложь;
	
	ПроцессорВывода.Вывести(Процессор, Истина);
	
	Если ТаблицаЗначенийРезультат = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	КомпоновщикДляТаблицыЗначений = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДляТаблицыЗначений = КомпоновщикДляТаблицыЗначений.Выполнить(Схема, Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорДляТаблицыЗначений = Новый ПроцессорКомпоновкиДанных;
	ПроцессорДляТаблицыЗначений.Инициализировать(МакетКомпоновкиДляТаблицыЗначений,, ДанныеРасшифровкиОтчета);
	
	ПроцессорВыводаВКоллекцию = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначенийРезультат = Новый ТаблицаЗначений;
	ПроцессорВыводаВКоллекцию.УстановитьОбъект(ТаблицаЗначенийРезультат);
	ПроцессорВыводаВКоллекцию.Вывести(ПроцессорДляТаблицыЗначений, Истина);
	
	Возврат ТабДокумент;
	
КонецФункции

// Возвращает список доступных для формирования отчетов в данном отчете.
//
Функция ПолучитьСписокОтчетов() Экспорт
	
	Если СписокОтчетов = Неопределено Тогда
		СписокОтчетов = Новый СписокЗначений;
		Для Каждого Макет Из Метаданные().Макеты Цикл
			Если СтрНачинаетсяС(Макет.Имя, "Удалить") Тогда
				Продолжить;
			КонецЕсли;
			СписокОтчетов.Добавить(Макет.Имя, Макет.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокОтчетов;
	
КонецФункции

// Присоединяет переданному строку в переданный текст с учетом переданных параметров форматирования.
//
Процедура ПрисоединитьСтрокуДереваВТекст(СтрокаВывода, ТаблицаВывода, МаксимальнаяШирина, АПК_УровеньВывода,
	НепустыеКолонки)
	
	ДобавленныеСтроки = Новый Массив;
	
	СчетчикКолонок = 0;
	ПоследняяКолонка = ТаблицаВывода.Колонки.Количество() - 1;
	ИмяКолонки = ТаблицаВывода.Колонки[СчетчикКолонок].Имя;
	
	Если СтрокаВывода.Родитель <> Неопределено Тогда
		Пока (СчетчикКолонок < ПоследняяКолонка)
			И (СтрокаВывода[ИмяКолонки] = СтрокаВывода.Родитель[ИмяКолонки]) Цикл
			
			СчетчикКолонок = СчетчикКолонок + 1;
			ИмяКолонки = ТаблицаВывода.Колонки[СчетчикКолонок].Имя;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КолонкаВывода Из ТаблицаВывода.Колонки Цикл
		
		Если КолонкаВывода.Имя = "АПК_УровеньВывода" Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолонкаВывода.Имя = "АПК_НачальнаяКолонка" Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем последовательно представление каждого значения из строки.
		Значение = СокрЛП(Строка(СтрокаВывода[КолонкаВывода.Имя]));
		Если НЕ ПустаяСтрока(Значение) Тогда
			НепустыеКолонки.Вставить(КолонкаВывода.Имя, Истина);
		КонецЕсли;
		// Обрезаем по 60 символов
		ВыровненноеЗначение = ОтформатироватьРазмерСтроки(Значение, 60);
		
		ВсегоСтрок = ВыровненноеЗначение.КоличествоСтрок();
		Для СчетчикСтрок = 1 По ВсегоСтрок Цикл
			// Определяемся куда надо добавлять текст.
			Если СчетчикСтрок > ДобавленныеСтроки.Количество() Тогда
				СтрокаДобавления = ТаблицаВывода.Добавить();
				СтрокаДобавления.АПК_УровеньВывода = АПК_УровеньВывода;
				СтрокаДобавления.АПК_НачальнаяКолонка = СчетчикКолонок;
				ДобавленныеСтроки.Добавить(СтрокаДобавления);
				
			Иначе
				СтрокаДобавления = ДобавленныеСтроки[СчетчикСтрок - 1];
			КонецЕсли;
			
			// Добавляем текст.
			СтрокаДобавления[КолонкаВывода.Имя] = ВыровненноеЗначение.ПолучитьСтроку(СчетчикСтрок);
			
			// Устанавливаем отслеживаемую максимальную ширину текста в колонке.
			Если СтрДлина(СтрокаДобавления[КолонкаВывода.Имя]) > МаксимальнаяШирина[КолонкаВывода.Имя] Тогда
				МаксимальнаяШирина.Вставить(КолонкаВывода.Имя,СтрДлина(СтрокаДобавления[КолонкаВывода.Имя]));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НепустыеКолонки = Новый Соответствие;
	
	Для Каждого ЛистВывода Из СтрокаВывода.Строки Цикл
		ПрисоединитьСтрокуДереваВТекст(ЛистВывода, ТаблицаВывода, МаксимальнаяШирина, АПК_УровеньВывода + 1, НепустыеКолонки);
	КонецЦикла;
	
	ПустыеКолонки = Новый Массив;
	
	Для Каждого КолонкаВывода Из ТаблицаВывода.Колонки Цикл
		Если КолонкаВывода.Имя = "АПК_УровеньВывода" Тогда
			Продолжить;
		КонецЕсли;
		Если КолонкаВывода.Имя = "АПК_НачальнаяКолонка" Тогда
			Продолжить;
		КонецЕсли;
		Если НепустыеКолонки[КолонкаВывода.Имя] = Неопределено Тогда
			// ПустаяКолонка
			ПустыеКолонки.Добавить(КолонкаВывода.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустыеКолонки.Количество() > 0 Тогда
		// есть пустые колонки
		Для Каждого ЛистВывода Из СтрокаВывода.Строки Цикл
			Для Каждого ПустаяКолонка Из ПустыеКолонки Цикл
				ЛистВывода[ПустаяКолонка] = Неопределено;
			КонецЦикла;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Форматирует строку в соответствии с переданным размером.
//
Функция ОтформатироватьРазмерСтроки(Источник, Размер)
	
	Приемник = Новый ТекстовыйДокумент;
	Если Разделители = Неопределено Тогда
		Разделители = Новый Соответствие;
		Разделители.Вставить(" ", Истина);
		Разделители.Вставить(".", Истина);
		Разделители.Вставить(",", Истина);
		Разделители.Вставить(";", Истина);
		Разделители.Вставить(":", Истина);
		Разделители.Вставить("?", Истина);
		Разделители.Вставить("!", Истина);
		Разделители.Вставить("-", Истина);
		Разделители.Вставить("+", Истина);
		Разделители.Вставить("*", Истина);
		Разделители.Вставить("/", Истина);
		Разделители.Вставить("\", Истина);
		Разделители.Вставить("%", Истина);
		Разделители.Вставить("=", Истина);
		Разделители.Вставить("<", Истина);
		Разделители.Вставить(">", Истина);
		Разделители.Вставить("[", Истина);
		Разделители.Вставить("]", Истина);
		Разделители.Вставить("(", Истина);
		Разделители.Вставить(")", Истина);
		Разделители.Вставить("{", Истина);
		Разделители.Вставить("}", Истина);
		Разделители.Вставить("'", Истина);
		Разделители.Вставить("|", Истина);
		Разделители.Вставить("~", Истина);
		Разделители.Вставить("@", Истина);
		Разделители.Вставить("#", Истина);
		Разделители.Вставить("$", Истина);
		Разделители.Вставить("^", Истина);
		Разделители.Вставить("&", Истина);
		Разделители.Вставить("—", Истина);
		Разделители.Вставить("№", Истина);
		Разделители.Вставить("`", Истина);
		Разделители.Вставить(Символ(9), Истина);
		Разделители.Вставить(Символ(10), Истина);
		Разделители.Вставить(Символ(13), Истина);
		Разделители.Вставить(Символ(160), Истина);
		
	КонецЕсли;
	
	НаибольшаяПозиция = Размер;
	
	Пока НаибольшаяПозиция > 0 Цикл
		Если СтрДлина(Источник) < Размер Тогда
			Прервать;
		КонецЕсли;
		ТекущийСимвол = Сред(Источник, НаибольшаяПозиция, 1);
		Если Разделители[ТекущийСимвол] = Истина Тогда
			// Нашли разделитель
			Если (ТекущийСимвол = Символ(10)) ИЛИ (ТекущийСимвол = Символ(13)) Тогда
				Приемник.ДобавитьСтроку(Лев(Источник, НаибольшаяПозиция - 1));
			Иначе
				Приемник.ДобавитьСтроку(Лев(Источник, НаибольшаяПозиция));
			КонецЕсли;
			
			Источник = Сред(Источник, НаибольшаяПозиция + 1);
			НаибольшаяПозиция = Размер;
		Иначе
			НаибольшаяПозиция = НаибольшаяПозиция - 1;
			
		КонецЕсли;
	КонецЦикла;
	
	// Разрезаем оставшийся кусок по строкам размером "размер".
	Пока СтрДлина(Источник) > 0 Цикл
		Приемник.ДобавитьСтроку(Лев(Источник, Размер));
		Источник = Сред(Источник, Размер + 1);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Функция находит номера ошибок в табличном документе, записывает в список значений и возвращает.
//
// Параметры:
//  ТаблицаОтчета - Поле табличного документа, источник определения номеров ошибок.
//
// Возвращаемое значение:
//   СписокЗначений - список номеров с ошибками.
//
Функция ОпределитьНомераОшибок(ТаблицаОтчета) Экспорт
	
	ВсегоКолонок = ТаблицаОтчета.ШиринаТаблицы;
	ВсегоСтрок = ТаблицаОтчета.ВысотаТаблицы;
	СписокНомеров = Новый СписокЗначений;
	
	Для СчетчикСтрок = 1 По ВсегоСтрок Цикл
		
		Для СчетчикКолонок = 1 По ВсегоКолонок Цикл
			
			ОбластьПробы = ТаблицаОтчета.Область(СчетчикСтрок, СчетчикКолонок, СчетчикСтрок, СчетчикКолонок);
			
			Попытка
				ИДРасшифровки = Число(ОбластьПробы.Расшифровка);
			Исключение
				Продолжить;
			КонецПопытки;
			
			ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[ИДРасшифровки];
			Попытка
				Если СтрСравнить(ЭлементРасшифровки.ПолучитьПоля()[0].Поле, "НОМЕР") = 0 Тогда
					НомерТекущейОшибки = ЭлементРасшифровки.ПолучитьПоля()[0].Значение;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если ЗначениеЗаполнено(НомерТекущейОшибки) Тогда
				СписокНомеров.Добавить(НомерТекущейОшибки);
			КонецЕсли;
			
			НомерТекущейОшибки = Неопределено;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокНомеров;
КонецФункции

// Функция анализирует выбранные строки в табличном документе,
// и находит номера ошибок, присутствующие в этих строках.
// Номера записываются в массив и возвращаются.
//
Функция ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета, ФлагНазначенияОтветственногоЗаОбъект = Ложь) Экспорт
	
	НомераКОбработке = Новый Массив;
	
	Если ТаблицаОтчета.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
		Начало = 0;
		Окончание = ТаблицаОтчета.ВысотаТаблицы;
		
		СформироватьМассивНомеровВыделенныхОшибок(ТаблицаОтчета, НомераКОбработке, Начало, Окончание,
			ФлагНазначенияОтветственногоЗаОбъект);
		
	Иначе
		
		СтрокиОшибок = ТаблицаОтчета.ВыделенныеОбласти;
		Для Каждого СтрокаОшибки Из СтрокиОшибок Цикл
			// Получаем полную расшифровку строки
			Начало = СтрокаОшибки.Верх;
			Окончание = СтрокаОшибки.Низ;
			
			СформироватьМассивНомеровВыделенныхОшибок(ТаблицаОтчета, НомераКОбработке, Начало, Окончание,
				ФлагНазначенияОтветственногоЗаОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НомераКОбработке;
	
КонецФункции

// Функция получает область табличного поля исходя из переданных координат,
// и находит в этих областях номера ошибок.
// Номера ошибок добавляются в переданный массив.
//
Процедура СформироватьМассивНомеровВыделенныхОшибок(ТаблицаОтчета, НомераКОбработке, Начало, Окончание,
	ФлагНазначенияОтветственногоЗаОбъект)
	
	ВсегоКолонок = ТаблицаОтчета.ШиринаТаблицы;
	
	Для СчетчикСтроки = Начало По Окончание Цикл
		Для СчетчикКолонки = 1 По ВсегоКолонок Цикл
			ОбластьПробы = ТаблицаОтчета.Область(СчетчикСтроки, СчетчикКолонки, СчетчикСтроки, СчетчикКолонки);
			
			Попытка
				ИДРасшифровки = Число(ОбластьПробы.Расшифровка);
			Исключение
				Продолжить;
			КонецПопытки;
			
			ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[ИДРасшифровки];
			Попытка
				
				Если (СтрСравнить(ЭлементРасшифровки.ПолучитьПоля()[0].Поле, "НОМЕР") = 0)
					ИЛИ (ФлагНазначенияОтветственногоЗаОбъект
						И (СтрСравнить(ЭлементРасшифровки.ПолучитьПоля()[0].Поле, "Объект.Путь") = 0)) Тогда
					
					НомераКОбработке.Добавить(ЭлементРасшифровки.ПолучитьПоля()[0].Значение);
					Прервать;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия кнопки "Назначить ответственного за подсистему".
//
Процедура НазначитьОтветственногоЗаПодсистему(ТаблицаОтчета, Версия) Экспорт
	
	Если ВыбранаРольПользователя() Тогда
		#Если Клиент Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа'"));
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	МассивВыделенныхСтрок = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета, Истина);
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыделенныхОбъектов = Новый Массив;
	ТаблицаВыделенныхОбъектов = Новый ТаблицаЗначений;
	ТаблицаВыделенныхОбъектов.Колонки.Добавить("Ссылка");
	ТаблицаВыделенныхОбъектов.Колонки.Добавить("Значение");
	
	ЗапросОшибки = Новый Запрос;
	ЗапросОшибки.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В (&Номер)";
	
	ЗапросОшибки.УстановитьПараметр("Номер", МассивВыделенныхСтрок);
	ТаблицаОшибки = ЗапросОшибки.Выполнить().Выгрузить();
	
	Если ТаблицаОшибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяСсылка = Справочники.СтруктураКонфигурации.ПустаяСсылка();
	
	Для Каждого Строка Из ТаблицаОшибки Цикл
		
		СсылкаНаОбъект = Строка.Объект;
		
		Если СсылкаНаОбъект = ПустаяСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		СсылкаНаОбъект = ПолучитьОсновнойОбъект(СсылкаНаОбъект);
		
		Если Не МассивВыделенныхОбъектов.Найти(СсылкаНаОбъект) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВыделенныхОбъектов.Добавить(СсылкаНаОбъект);
		
	КонецЦикла;
	
	НазначениеОтветственных = Обработки.НазначениеОтветственных.Создать();
	НазначениеОтветственных.Версия = Версия;
	
	НазначениеОтветственныхФорма = НазначениеОтветственных.ПолучитьФорму();
	
	ФлагНаличияПометок = Ложь;
	
	Для Каждого СсылкаНаОбъект Из МассивВыделенныхОбъектов Цикл
		
		ТаблицаПодсистемОбъекта = СсылкаНаОбъект.Подсистемы;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПодсистемОбъекта Цикл
			
			ПодсистемаСсылка = СтрокаТаблицы.Подсистема;
			
			УстановитьФлажкиОсновной(ТаблицаВыделенныхОбъектов, ПодсистемаСсылка, 1, Версия);
			ФлагНаличияПометок = Истина;
			НазначениеОтветственныхФорма.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ПодсистемаСсылка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ФлагНаличияПометок Тогда
		Сообщить(НСтр("ru='В выделенных строках нет объектов, входящих в подсистемы.'"));
	КонецЕсли;
	
	НазначениеОтветственныхФорма.КэшУстановленныхФлажков = ТаблицаВыделенныхОбъектов;
	НазначениеОтветственныхФорма.ОткрытьМодально();
	
КонецПроцедуры

Функция ПолучитьОсновнойОбъект(СсылкаНаОбъект, БезФормИТабличныхЧастей = Истина)
	
	Если ТипыОбъектов.Найти(СсылкаНаОбъект.ТипОбъекта) = Неопределено
		ИЛИ ?(БезФормИТабличныхЧастей, СсылкаНаОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.Форма
			ИЛИ СсылкаНаОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма
			ИЛИ СсылкаНаОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть, Ложь) Тогда
		
		Возврат ПолучитьОсновнойОбъект(СсылкаНаОбъект.Родитель, БезФормИТабличныхЧастей);
	Иначе
		Возврат СсылкаНаОбъект;
	КонецЕсли;
	
КонецФункции

// Обработчик нажатия кнопки "Назначить ответственного за объект".
//
Процедура НазначитьОтветственногоЗаОбъект(ТаблицаОтчета, Версия) Экспорт
	
	Если ВыбранаРольПользователя() Тогда
		#Если Клиент Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа'"));
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	МассивВыделенныхСтрок = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета, Истина);
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыделенныхОбъектов = Новый Массив;
	ТаблицаВыделенныхОбъектов = Новый ТаблицаЗначений;
	ТаблицаВыделенныхОбъектов.Колонки.Добавить("Ссылка");
	ТаблицаВыделенныхОбъектов.Колонки.Добавить("Значение");
	
	ЗапросОшибки = Новый Запрос;
	ЗапросОшибки.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В (&МассивНомеров)";
	
	ЗапросОшибки.УстановитьПараметр("МассивНомеров", МассивВыделенныхСтрок);
	ТаблицаОшибки = ЗапросОшибки.Выполнить().Выгрузить();
	
	Если ТаблицаОшибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяСсылка = Справочники.СтруктураКонфигурации.ПустаяСсылка();
	
	Для Каждого Ошибка Из ТаблицаОшибки Цикл
		
		СсылкаНаОбъект = Ошибка.Объект;
		
		Если СсылкаНаОбъект = ПустаяСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		СсылкаНаОбъект = ПолучитьОсновнойОбъект(СсылкаНаОбъект);
		
		Если НЕ МассивВыделенныхОбъектов.Найти(СсылкаНаОбъект) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВыделенныхОбъектов.Добавить(СсылкаНаОбъект);
		
	КонецЦикла;
	
	НазначениеОтветственных = Обработки.НазначениеОтветственных.Создать();
	НазначениеОтветственных.Версия = Версия;
	НазначениеОтветственныхФорма = НазначениеОтветственных.ПолучитьФорму();
	
	Если МассивВыделенныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СсылкаНаОбъект Из МассивВыделенныхОбъектов Цикл
		
		УстановитьФлажкиОсновной(ТаблицаВыделенныхОбъектов, СсылкаНаОбъект, 1, Версия);
		НазначениеОтветственныхФорма.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = СсылкаНаОбъект;
		
	КонецЦикла;
	
	НазначениеОтветственныхФорма.КэшУстановленныхФлажков = ТаблицаВыделенныхОбъектов;
	НазначениеОтветственныхФорма.ОткрытьМодально();
	
КонецПроцедуры

// Обработчик нажатия кнопки "Назначить ответственного".
//
Процедура НазначитьОтветственногоЗаОшибку(ТаблицаОтчета, Версия) Экспорт
	
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	
	Если НомераКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрежнийКомментарий = "";
	ФлагВыбранаОднаОшибка = НомераКОбработке.Количество() = 1;
	Если ФлагВыбранаОднаОшибка Тогда
		ПрежнийКомментарий = ПолучитьКомментарийОшибки(НомераКОбработке[0]);
	КонецЕсли;
	
	// Есть определены номера ошибок - можем выполнить действия над конкретной ошибкой.
	// Выбираем ответственного.
	ФормаВыбора = Справочники.Пользователи.ПолучитьФорму("ФормаВыбораСКомментарием");
	ФормаВыбора.НомераОшибок = НомераКОбработке;
	ФормаВыбора.РежимВыбора = Истина;
	Ответственный = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = ФормаВыбора.Комментарий;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Версия", Версия);
	ПараметрыПроцедуры.Вставить("Комментарий", Комментарий);
	ПараметрыПроцедуры.Вставить("ПрежнийКомментарий", ПрежнийКомментарий);
	ПараметрыПроцедуры.Вставить("Ответственный", Ответственный);
	ПараметрыПроцедуры.Вставить("НомераКОбработке", НомераКОбработке);
	ПараметрыПроцедуры.Вставить("ФлагВыбранаОднаОшибка", ФлагВыбранаОднаОшибка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Назначить ответственного за ошибку.'");
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.НайденныеОшибки.ФоновоеЗаданиеНазначитьОтветственногоЗаОшибку", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

// Меняет статус ошибки с "Зарегистрирована" на "Исправлена".
//
Функция ОтметитьКакИсправлена(ТаблицаОтчета) Экспорт
	
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	ОтменитьОсобенности(НомераКОбработке);
	
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Номер КАК Номер
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В(&Номера)
	|	И НайденныеОшибки.Состояние = &Состояние";
	
	ЗапросПоСвойствам.УстановитьПараметр("Номера", НомераКОбработке);
	ЗапросПоСвойствам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	
	РезультатЗапроса = ЗапросПоСвойствам.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаИсправленныхОшибок = РезультатЗапроса.Выгрузить();
	Если НЕ ПодтвердитьДействиеНадОшибками(ТаблицаИсправленныхОшибок.Количество(), "Исправление") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаИсправленныхОшибок;
	
КонецФункции

// Обработчик нажатия кнопки "В особенности".
//
Функция ОтметитьКакОсобенность(ТаблицаОтчета) Экспорт
	
	Результат = Неопределено;
	
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект КАК Объект,
	|	НайденныеОшибки.Объект.Владелец КАК Версия,
	|	НайденныеОшибки.Объект.Владелец.Владелец КАК Конфигурация,
	|	НайденныеОшибки.Ошибка КАК Ошибка,
	|	НайденныеОшибки.Ответственный КАК Ответственный,
	|	НайденныеОшибки.МестоОбнаружения КАК МестоОбнаружения,
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Правило КАК Правило,
	|	НайденныеОшибки.Уточнение КАК Уточнение,
	|	НайденныеОшибки.ПричинаОсобенности КАК ПричинаОсобенности,
	|	КомментарииНайденныхОшибок.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|		ПО НайденныеОшибки.Номер = КомментарииНайденныхОшибок.Номер
	|ГДЕ
	|	НайденныеОшибки.Номер В(&Номера)
	|	И НайденныеОшибки.Состояние <> &Состояние";
	
	ЗапросПоСвойствам.УстановитьПараметр("Номера", НомераКОбработке);
	ЗапросПоСвойствам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Особенность);
	
	Ошибки = ЗапросПоСвойствам.Выполнить().Выгрузить();
	КоличествоОшибок = Ошибки.Количество();
	
	Если КоличествоОшибок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Если выбрана одна ошибка для помещения в особенности.
	Если КоличествоОшибок = 1 Тогда
		
		Ошибка = Ошибки[0];
		
		// Проверить родителя, если ошибка принадлежит группе "Ошибки орфографии".
		Если СтрСравнить(СокрЛП(Ошибка.Ошибка.Родитель.Наименование), "Ошибки орфографии") = 0 Тогда
			// Найти все ошибки с таким же уточнением.
			Ошибки = ПолучитьТаблицуОшибокСОдинаковымУточнением(Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если одна ошибка, вывести форму назначения особенности.
	Если Ошибки.Количество() = 1 Тогда
		
		Ошибка = Ошибки[0];
		
		ФормаОсобенности = ПолучитьОбщуюФорму("ФормаНазначенияОсобенности");
		ФормаОсобенности.Заголовок = НСтр("ru='Новая особенность конфигурации'");
		ФормаОсобенности.Конфигурация = Ошибка.Конфигурация;
		ФормаОсобенности.Версия = Ошибка.Версия;
		ФормаОсобенности.Объект = Ошибка.Объект.Путь;
		ФормаОсобенности.Ошибка = Ошибка.Ошибка;
		ФормаОсобенности.Уточнение = Ошибка.Уточнение;
		ФормаОсобенности.Номер = Ошибка.Номер;
		ФормаОсобенности.Правило = Ошибка.Правило;
		ФормаОсобенности.Комментарий = Ошибка.Комментарий;
		
		ФормаОсобенности.ОткрытьМодально();
		
		Если ФормаОсобенности.ОтмеченаКакОсобенность = Истина Тогда
			СписокНомеров = Новый СписокЗначений;
			СписокНомеров.Добавить(Ошибка.Номер);
			ИзменитьСодержимоеОтчета(ТаблицаОтчета, СписокНомеров);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПодтвердитьДействиеНадОшибками(Ошибки.Количество(), "Особенность") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Иначе вывести форму назначения списка особенностей.
		ФормаНазначенияСпискаОсобенностей = ПолучитьОбщуюФорму("ФормаНазначенияСпискаОсобенностей");
		Для Каждого Ошибка Из Ошибки Цикл
			
			СтрокаОшибки = ФормаНазначенияСпискаОсобенностей.ТаблицаОшибок.Добавить();
			СтрокаОшибки.Объект = Ошибка.Объект;
			СтрокаОшибки.Уточнение = Ошибка.Уточнение;
			СтрокаОшибки.Ошибка = Ошибка.Ошибка;
			СтрокаОшибки.Номер = Ошибка.Номер;
			СтрокаОшибки.Комментарий = Ошибка.Комментарий;
			
		КонецЦикла;
		
		Результат = ФормаНазначенияСпискаОсобенностей.ОткрытьМодально();
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуОшибокСОдинаковымУточнением(Ошибка)
	
	ЗапросОшибки = Новый Запрос;
	ЗапросОшибки.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект КАК Объект,
	|	НайденныеОшибки.Объект.Владелец КАК Версия,
	|	НайденныеОшибки.Объект.Владелец.Владелец КАК Конфигурация,
	|	НайденныеОшибки.Ошибка КАК Ошибка,
	|	НайденныеОшибки.Ответственный КАК Ответственный,
	|	НайденныеОшибки.МестоОбнаружения КАК МестоОбнаружения,
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Правило КАК Правило,
	|	НайденныеОшибки.Уточнение КАК Уточнение,
	|	НайденныеОшибки.ПричинаОсобенности КАК ПричинаОсобенности,
	|	КомментарииНайденныхОшибок.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|		ПО НайденныеОшибки.Номер = КомментарииНайденныхОшибок.Номер
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец = &Владелец
	|	И НайденныеОшибки.Состояние = &Состояние
	|	И НайденныеОшибки.Уточнение = &Уточнение";
	
	ЗапросОшибки.УстановитьПараметр("Владелец", Ошибка.Версия);
	ЗапросОшибки.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	ЗапросОшибки.УстановитьПараметр("Уточнение", Ошибка.Уточнение);
	
	ТаблицаОшибок = ЗапросОшибки.Выполнить().Выгрузить();
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// Изменяет цвет шрифта и состояние ошибки у ячеек табличного поля
// при помещении зарегистрированной ошибки в "особенность" или "исправлена".
//
Процедура ИзменитьСодержимоеОтчета(ПолеТабличногоДокумента, СписокНомеров, ИгнорироватьВыделенныеОбласти = Ложь,
	ВариантОтчета = "", ЗарегистрированыВСППР = Ложь, ВыделенныеСтроки = Неопределено) Экспорт
	
	Если СписокНомеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтрокНаРедактирование = Новый ТаблицаЗначений;
	ТаблицаСтрокНаРедактирование.Колонки.Добавить("НомерСтроки");
	ТаблицаСтрокНаРедактирование.Колонки.Добавить("НомерОшибки");
	ВсегоКолонок = ПолеТабличногоДокумента.ШиринаТаблицы;
	ВсегоСтрок = ПолеТабличногоДокумента.ВысотаТаблицы;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		ВыделенныеСтроки = ПолеТабличногоДокумента.ВыделенныеОбласти;
	КонецЕсли;
	
	Если (ВыделенныеСтроки.Количество() = 0) Или ИгнорироватьВыделенныеОбласти Тогда
		Для СчетчикСтроки = 1 По ВсегоСтрок Цикл
			Для СчетчикКолонок = 1 По ВсегоКолонок Цикл
				
				ОбластьПробы = ПолеТабличногоДокумента.Область(СчетчикСтроки, СчетчикКолонок, СчетчикСтроки, СчетчикКолонок);
				
				Попытка
					ИДРасшифровки = Число(ОбластьПробы.Расшифровка);
				Исключение
					Продолжить;
				КонецПопытки;
				
				ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[ИДРасшифровки];
				Попытка
					Если СтрСравнить(ЭлементРасшифровки.ПолучитьПоля()[0].Поле, "НОМЕР") = 0 Тогда
						НомерТекущейОшибки = ЭлементРасшифровки.ПолучитьПоля()[0].Значение;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Если СписокНомеров.НайтиПоЗначению(НомерТекущейОшибки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаСтрокНаРедактирование.Добавить();
				НоваяСтрока.НомерСтроки = СчетчикСтроки;
				НоваяСтрока.НомерОшибки = НомерТекущейОшибки;
				НомерТекущейОшибки = Неопределено;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			Начало = ВыделеннаяСтрока.Верх;
			Окончание = ВыделеннаяСтрока.Низ;
			
			Для СчетчикСтроки = Начало По Окончание Цикл
				Для СчетчикКолонки = 1 По ВсегоКолонок Цикл
					ОбластьПробы = ПолеТабличногоДокумента.Область(СчетчикСтроки, СчетчикКолонки, СчетчикСтроки, СчетчикКолонки);
					
					Попытка
						ИДРасшифровки = Число(ОбластьПробы.Расшифровка);
					Исключение
						Продолжить;
					КонецПопытки;
					
					ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[ИДРасшифровки];
					Попытка
						Если СтрСравнить(ЭлементРасшифровки.ПолучитьПоля()[0].Поле, "НОМЕР") = 0 Тогда
							НомерТекущейОшибки = ЭлементРасшифровки.ПолучитьПоля()[0].Значение;
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					Если СписокНомеров.НайтиПоЗначению(НомерТекущейОшибки) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТаблицаСтрокНаРедактирование.Найти(СчетчикСтроки, "НомерСтроки") <> Неопределено Тогда
						НомерТекущейОшибки = Неопределено;
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаСтрокНаРедактирование.Добавить();
					НоваяСтрока.НомерСтроки = СчетчикСтроки;
					НоваяСтрока.НомерОшибки = НомерТекущейОшибки;
					НомерТекущейОшибки = Неопределено;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// 1. получаем текущее состояние записей.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В (&СписокНомеров)";
	
	Запрос.УстановитьПараметр("СписокНомеров", СписокНомеров);
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	// 2. меняем цвет у ячейки,
	// если колонка называется "Состояние", то меняется текстовое содержимое ячейки.
	
	Для Каждого Строка Из ТаблицаСтрокНаРедактирование Цикл
		
		НомерСтроки = Строка.НомерСтроки;
		НомерОшибки = Строка.НомерОшибки;
		ОшибкаСостояние = ТаблицаСостояний.Найти(НомерОшибки, "Номер").Состояние;
		
		СостоянияОшибки = Перечисления.СостояниеОшибки;
		
		Если ЗарегистрированыВСППР Тогда
			НовыйЦвет = WebЦвета.Синий;
		ИначеЕсли ОшибкаСостояние = СостоянияОшибки.Зарегистрирована Тогда
			НовыйЦвет = WebЦвета.Черный;
		ИначеЕсли ОшибкаСостояние = СостоянияОшибки.Исправлена Тогда
			НовыйЦвет = WebЦвета.ЦветМорскойВолныНейтральный;
		ИначеЕсли ОшибкаСостояние = СостоянияОшибки.Особенность Тогда
			НовыйЦвет = WebЦвета.Серый;
			Если ВариантОтчета = "Особенности по требованиям" ИЛИ ВариантОтчета = "Особенности" Тогда
				НовыйЦвет = WebЦвета.Черный;
			КонецЕсли;
		КонецЕсли;
		
		Для НомерКолонки = 1 По ВсегоКолонок Цикл
			ОбластьПробы = ПолеТабличногоДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ОбластьПробы.ЦветТекста = НовыйЦвет;
			
			Попытка
				ИДРасшифровки = Число(ОбластьПробы.Расшифровка);
			Исключение
				Продолжить;
			КонецПопытки;
			
			ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[ИДРасшифровки];
			Попытка
				Если СтрСравнить(ЭлементРасшифровки.ПолучитьПоля()[0].Поле, "Состояние") = 0 Тогда
					ОбластьПробы.Текст = ОшибкаСостояние;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик открытия ошибки.
//
Процедура ОткрытьОшибку(ФормаРабочийСтол) Экспорт
	
	ТаблицаОтчета = ФормаРабочийСтол.ЭлементыФормы.ПолеТабличногоДокументаОшибки;
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	
	Если НомераКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПоОшибкам = Новый Запрос;
	ЗапросПоОшибкам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НайденныеОшибки.Объект,
	|	НайденныеОшибки.Правило,
	|	НайденныеОшибки.Номер
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В(&СписокНомеров)";
	
	ЗапросПоОшибкам.УстановитьПараметр("СписокНомеров", НомераКОбработке);
	ВыборкаОшибок = ЗапросПоОшибкам.Выполнить().Выбрать();
	
	Пока ВыборкаОшибок.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.НайденныеОшибки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ВыборкаОшибок.Объект;
		МенеджерЗаписи.Правило = ВыборкаОшибок.Правило;
		МенеджерЗаписи.Номер = ВыборкаОшибок.Номер;
		МенеджерЗаписи.Прочитать();
		
		#Если Клиент Тогда
		Параметры = Новый Структура("Ключ", МенеджерЗаписи);
		ОткрытьФорму("РегистрСведений.НайденныеОшибки.Форма.ФормаЗаписи", Параметры, ФормаРабочийСтол);
		#КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия кнопки "Открыть правило".
//
Процедура ОткрытьПравило(ТаблицаОтчета) Экспорт
	
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	
	Если НомераКОбработке.Количество() > 0 Тогда
		// Есть определены номера ошибок - можем выполнить действия над конкретной ошибкой.
		
		ЗапросПоПравилам = Новый Запрос;
		ЗапросПоПравилам.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НайденныеОшибки.Правило
		|ИЗ
		|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
		|ГДЕ
		|	НайденныеОшибки.Номер В(&СписокНомеров)";
		
		ЗапросПоПравилам.УстановитьПараметр("СписокНомеров", НомераКОбработке);
		
		ВыборкаПравил = ЗапросПоПравилам.Выполнить().Выбрать();
		Пока ВыборкаПравил.Следующий() Цикл
			ВыборкаПравил.Правило.ПолучитьОбъект().ПолучитьФорму().Открыть();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия кнопки "Отменить особенность".
//
Процедура ОтменитьОсобенностиВОтчете(ТаблицаОтчета) Экспорт
	
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	Если НомераКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = ВвестиКомментарий();
	Если Комментарий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокНомеровОшибок = ОтменитьОсобенности(НомераКОбработке, Комментарий);
	ИзменитьСодержимоеОтчета(ТаблицаОтчета, СписокНомеровОшибок);
	
КонецПроцедуры

// Меняет причину особенности.
//
Процедура ИзменитьПричинуОсобенности(ТаблицаОтчета) Экспорт
	
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект КАК Объект,
	|	НайденныеОшибки.Объект.Владелец КАК Версия,
	|	НайденныеОшибки.Объект.Владелец.Владелец КАК Конфигурация,
	|	НайденныеОшибки.Ошибка КАК Ошибка,
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Правило КАК Правило,
	|	НайденныеОшибки.Уточнение КАК Уточнение,
	|	НайденныеОшибки.ПричинаОсобенности КАК Причина,
	|	КомментарииНайденныхОшибок.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
	|		ПО НайденныеОшибки.Номер = КомментарииНайденныхОшибок.Номер
	|ГДЕ
	|	НайденныеОшибки.Номер В(&Номера)";
	
	ЗапросПоСвойствам.УстановитьПараметр("Номера", НомераКОбработке);
	
	Особенности = ЗапросПоСвойствам.Выполнить().Выгрузить();
	КоличествоОсобенностей = Особенности.Количество();
	
	Если КоличествоОсобенностей = 0 Тогда
		
		Возврат;
		
	ИначеЕсли КоличествоОсобенностей = 1 Тогда
		
		Особенность = Особенности[0];
		
		ФормаОсобенности = ПолучитьОбщуюФорму("ФормаНазначенияОсобенности");
		ФормаОсобенности.Заголовок = НСтр("ru='Изменение особенности'");
		ФормаОсобенности.Конфигурация = Особенность.Конфигурация;
		ФормаОсобенности.Версия = Особенность.Версия;
		ФормаОсобенности.Объект = Особенность.Объект.Путь;
		ФормаОсобенности.Ошибка = Особенность.Ошибка;
		ФормаОсобенности.Уточнение = Особенность.Уточнение;
		ФормаОсобенности.Номер = Особенность.Номер;
		ФормаОсобенности.Правило = Особенность.Правило;
		ФормаОсобенности.Причина = Особенность.Причина;
		ФормаОсобенности.Комментарий = Особенность.Комментарий;
		ФормаОсобенности.ОткрытьМодально();
		
		Если ФормаОсобенности.ОтмеченаКакОсобенность = Истина Тогда
			СписокНомеров = Новый СписокЗначений;
			СписокНомеров.Добавить(Особенность.Номер);
			ИзменитьСодержимоеОтчета(ТаблицаОтчета, СписокНомеров);
		КонецЕсли;
		
	Иначе
		
		ФормаНазначенияСпискаОсобенностей = ПолучитьОбщуюФорму("ФормаНазначенияСпискаОсобенностей");
		
		Для Каждого Особенность Из Особенности Цикл
			
			СтрокаОшибки = ФормаНазначенияСпискаОсобенностей.ТаблицаОшибок.Добавить();
			СтрокаОшибки.Объект = Особенность.Объект;
			СтрокаОшибки.Уточнение = Особенность.Уточнение;
			СтрокаОшибки.Ошибка = Особенность.Ошибка;
			СтрокаОшибки.Номер = Особенность.Номер;
			
		КонецЦикла;
		
		ФормаНазначенияСпискаОсобенностей.ОткрытьМодально();
		
		СписокНомеровОсобенностей = ФормаНазначенияСпискаОсобенностей.СписокНомеровОсобенностей;
		
		Если СписокНомеровОсобенностей.Количество() > 0 Тогда
			ИзменитьСодержимоеОтчета(ТаблицаОтчета, СписокНомеровОсобенностей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Меняет статус ошибки с "Исправлена" на "Зарегистрирована".
//
Процедура ОтметитьКакЗарегистрирована(ТаблицаОтчета) Экспорт
	
	НомераКОбработке = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Номер КАК Номер
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Номер В(&Номера)
	|	И НайденныеОшибки.Состояние = &Состояние";
	
	ЗапросПоСвойствам.УстановитьПараметр("Номера", НомераКОбработке);
	ЗапросПоСвойствам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Исправлена);
	
	Выборка = ЗапросПоСвойствам.Выполнить();
	Если Выборка.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СписокНомеров = Новый СписокЗначений;
	СостояниеЗарегистрирована = Перечисления.СостояниеОшибки.Зарегистрирована;
	
	ТаблицаЗарегистрированныхОшибок = Выборка.Выгрузить();
	Для Каждого ЗарегистрированнаяОшибка Из ТаблицаЗарегистрированныхОшибок Цикл
		
		НомерОшибки = ЗарегистрированнаяОшибка.Номер;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НайденныеОшибки");
			ЭлементБлокировки.УстановитьЗначение("Номер", НомерОшибки);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			НаборЗаписейОшибок = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
			НаборЗаписейОшибок.Отбор.Номер.Установить(НомерОшибки);
			НаборЗаписейОшибок.Прочитать();
			НаборЗаписейОшибок[0].Состояние = СостояниеЗарегистрирована;
			НаборЗаписейОшибок.Записать();
			
			СписокНомеров.Добавить(НомерОшибки);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	ИзменитьСодержимоеОтчета(ТаблицаОтчета, СписокНомеров);
	
КонецПроцедуры

// Подтверждает исправление/отправку в особенности большого пакета ошибок (больше 30).
//
Функция ПодтвердитьДействиеНадОшибками(КоличествоВыбранныхОшибок, ТипДействия)
	
	Если КоличествоВыбранныхОшибок <= 30 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Внимание: выбрано %Количество% записей ошибок для %Действие%. Продолжить?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Количество%", КоличествоВыбранныхОшибок);
	
	Если ТипДействия = "Исправление" Тогда
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Действие%", НСтр("ru='исправления'"));
	ИначеЕсли  ТипДействия = "Особенность" Тогда
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Действие%", НСтр("ru='помещения в особенности'"));
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Результат = (Ответ = КодВозвратаДиалога.Да);
	#Иначе
	Результат = Истина;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Обработчик нажатия кнопки "Зарегистрировать в СППР".
//
Процедура ЗарегистрироватьВСППР(Версия, ТаблицаОтчета) Экспорт
	
	НомераОшибок = ОпределитьНомераВыделенныхОшибок(ТаблицаОтчета);
	
	ЗапросПоОшибкам = Новый Запрос;
	ЗапросПоОшибкам.Текст = "
	|ВЫБРАТЬ
	|	НайденныеОшибки.Объект КАК Объект,
	|	НайденныеОшибки.Правило КАК Правило,
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Ошибка КАК Ошибка,
	|	&Состояние КАК Состояние,
	|	НайденныеОшибки.Ответственный КАК Ответственный,
	|	НайденныеОшибки.МестоОбнаружения КАК МестоОбнаружения,
	|	НайденныеОшибки.Уточнение КАК Уточнение,
	|	НайденныеОшибки.ВнешнийИдентификаторОшибки КАК ВнешнийИдентификаторОшибки
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.Объект.Владелец = &Версия
	|	И НайденныеОшибки.Номер В(&Номера)
	|	И НайденныеОшибки.Состояние = &Состояние";
	
	ЗапросПоОшибкам.УстановитьПараметр("Версия", Версия);
	ЗапросПоОшибкам.УстановитьПараметр("Номера", НомераОшибок);
	ЗапросПоОшибкам.УстановитьПараметр("Состояние", Перечисления.СостояниеОшибки.Зарегистрирована);
	
	ТаблицаОшибокДоОтправки = ЗапросПоОшибкам.Выполнить().Выгрузить();
	Если ТаблицаОшибокДоОтправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибокДоОтправки.Индексы.Добавить("Номер");
	
	// Иначе вывести форму назначения списка особенностей.
	ФормаРегистрацииОшибокВСППР = ПолучитьОбщуюФорму("ФормаРегистрацииОшибокВСППР");
	ФормаРегистрацииОшибокВСППР.Версия = Версия;
	ФормаРегистрацииОшибокВСППР.Конфигурация = Версия.Владелец;
	ФормаРегистрацииОшибокВСППР.ТаблицаОшибок = ТаблицаОшибокДоОтправки.Скопировать();
	
	ФормаРегистрацииОшибокВСППР.ОткрытьМодально();
	
	ТаблицаОшибокПослеОтправки = ФормаРегистрацииОшибокВСППР.ТаблицаОшибок;
	ИзменитьДанныеОшибокПослеОтправкиВСППР(ТаблицаОшибокДоОтправки, ТаблицаОшибокПослеОтправки);
	
	СписокНомеров = ФормаРегистрацииОшибокВСППР.СписокНомеровОшибокОтправленныхВСППР;
	Если СписокНомеров.Количество() > 0 Тогда
		ИзменитьСодержимоеОтчета(ТаблицаОтчета, СписокНомеров, Истина,, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДанныеОшибокПослеОтправкиВСППР(ТаблицаОшибокДоОтправки, ТаблицаОшибокПослеОтправки)
	
	Если ТаблицаОшибокПослеОтправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если таблица ошибок не очистилась, то перезаписываем ошибки,
	// т.к. могли измениться ответственные и внешние идентификаторы.
	Для Каждого СтрокаОшибкиПослеОтправки Из ТаблицаОшибокПослеОтправки Цикл
		
		НомерОшибки = СтрокаОшибкиПослеОтправки.Номер;
		СтрокаОшибкиДоОтправки = ТаблицаОшибокДоОтправки.Найти(НомерОшибки, "Номер");
		Если СтрокаОшибкиДоОтправки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьОшибкиИзменена = Ложь;
		
		ВнешнийИдентификаторОшибкиПослеОтправки = СтрокаОшибкиПослеОтправки.ВнешнийИдентификаторОшибки;
		Если СтрокаОшибкиДоОтправки.ВнешнийИдентификаторОшибки <> ВнешнийИдентификаторОшибкиПослеОтправки Тогда
			ЗаписьОшибкиИзменена = Истина;
		КонецЕсли;
		
		ОтветственныйПослеОтправки = СтрокаОшибкиПослеОтправки.Ответственный;
		Если СтрокаОшибкиДоОтправки.Ответственный <> ОтветственныйПослеОтправки Тогда
			ЗаписьОшибкиИзменена = Истина;
		КонецЕсли;
		
		Если НЕ ЗаписьОшибкиИзменена Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерОшибки = РегистрыСведений.НайденныеОшибки.СоздатьМенеджерЗаписи();
		МенеджерОшибки.Объект  = СтрокаОшибкиПослеОтправки.Объект;
		МенеджерОшибки.Правило = СтрокаОшибкиПослеОтправки.Правило;
		МенеджерОшибки.Номер   = НомерОшибки;
		МенеджерОшибки.Прочитать();
		
		МенеджерОшибки.ВнешнийИдентификаторОшибки = ВнешнийИдентификаторОшибкиПослеОтправки;
		МенеджерОшибки.Ответственный = ОтветственныйПослеОтправки;
		
		МенеджерОшибки.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

СписокОтчетов = Неопределено;
Разделители = Неопределено;

ТипыОбъектов = ТипыОбъектовСоздать();

#КонецОбласти

#КонецЕсли