#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Устанавливает нового ответственного за ошибку, добавляет уведомление о перенаправленных ошибках.
//
Процедура ФоновоеЗаданиеНазначитьОтветственногоЗаОшибку(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	Версия = ПараметрыПроцедуры.Версия;
	Комментарий = ПараметрыПроцедуры.Комментарий;
	ПрежнийКомментарий = ПараметрыПроцедуры.ПрежнийКомментарий;
	Ответственный = ПараметрыПроцедуры.Ответственный;
	НомераКОбработке = ПараметрыПроцедуры.НомераКОбработке;
	ФлагВыбранаОднаОшибка = ПараметрыПроцедуры.ФлагВыбранаОднаОшибка;
	
	// Если комментарий поменялся с пустого на непустой, то проверим, указан ли автор комментария.
	Если ПустаяСтрока(ПрежнийКомментарий) И (НЕ ПустаяСтрока(Комментарий)) Тогда
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		// Если автор комментария не оставил своего имени, то добавим его автоматически.
		Если СтрНайти(ВРег(Комментарий), ВРег(ТекущийПользователь)) = 0 Тогда
			ВставитьСтрокуСАвторомВКомментарий(Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаНазначениеОтветственных = Обработки.НазначениеОтветственных.Создать();
	СтруктураОшибки = Новый Структура;
	
	ТаблицаОшибокДоПеренаправления = ПолучитьТаблицуОшибокПоОтветственному(Версия, Ответственный);
	
	Для Каждого НомерОшибки Из НомераКОбработке Цикл
		
		ЗапросПоСвойствам = Новый Запрос;
		ЗапросПоСвойствам.Текст = "
		|ВЫБРАТЬ
		|	НайденныеОшибки.Объект,
		|	НайденныеОшибки.Правило,
		|	НайденныеОшибки.Номер,
		|	НайденныеОшибки.Ответственный,
		|	КомментарииНайденныхОшибок.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомментарииНайденныхОшибок КАК КомментарииНайденныхОшибок
		|		ПО НайденныеОшибки.Номер = КомментарииНайденныхОшибок.Номер
		|ГДЕ
		|	НайденныеОшибки.Номер = &Номер";
		
		ЗапросПоСвойствам.УстановитьПараметр("Номер", НомерОшибки);
		
		ВыборкаСвойств = ЗапросПоСвойствам.Выполнить().Выбрать();
		Если ВыборкаСвойств.Следующий() Тогда
			
			КомментарийОшибки = ВыборкаСвойств.Комментарий;
			Если НЕ ПустаяСтрока(Комментарий) Тогда
				ДобавляемыйКомментарий = СокрЛП(Комментарий);
				Если ПустаяСтрока(КомментарийОшибки) Тогда
					КомментарийОшибки = ДобавляемыйКомментарий;
				Иначе
					КомментарийОшибки = ДобавляемыйКомментарий + Символы.ПС + Символы.ПС + КомментарийОшибки;
				КонецЕсли;
			КонецЕсли;
			КомментарийОшибки = ?(ФлагВыбранаОднаОшибка, Комментарий, КомментарийОшибки);
			
			ОбъектСсылка = ВыборкаСвойств.Объект;
			
			СтруктураОшибки.Вставить("Номер", ВыборкаСвойств.Номер);
			СтруктураОшибки.Вставить("Правило", ВыборкаСвойств.Правило);
			СтруктураОшибки.Вставить("Объект", ОбъектСсылка);
			СтруктураОшибки.Вставить("Ответственный", ВыборкаСвойств.Ответственный);
			СтруктураОшибки.Вставить("Комментарий", КомментарийОшибки);
			
			ОбработкаНазначениеОтветственных.ИзменитьОтветственногоЗаОшибку(СтруктураОшибки, Ответственный);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьУведомлениеОтветственномуОПеренаправленныхОшибках(Версия, Ответственный, ТаблицаОшибокДоПеренаправления);
	
КонецПроцедуры

// Меняет статус ошибки с "Зарегистрирована" на "Исправлена" с помощью фонового задания.
//
Функция ФоновоеЗаданиеОтметитьКакИсправлена(ТаблицаИсправленныхОшибок, АдресХранилища) Экспорт
	
	СостояниеИсправлена = Перечисления.СостояниеОшибки.Исправлена;
	МассивНомеров = Новый Массив;
	
	Для Каждого ИсправленнаяОшибка Из ТаблицаИсправленныхОшибок Цикл
		
		НомерОшибки = ИсправленнаяОшибка.Номер;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НайденныеОшибки");
			ЭлементБлокировки.УстановитьЗначение("Номер", НомерОшибки);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			НаборЗаписейОшибок = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
			НаборЗаписейОшибок.Отбор.Номер.Установить(НомерОшибки);
			НаборЗаписейОшибок.Прочитать();
			НаборЗаписейОшибок[0].Состояние = СостояниеИсправлена;
			НаборЗаписейОшибок.Записать();
			
			МассивНомеров.Добавить(НомерОшибки);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МассивНомеров, АдресХранилища);
	
КонецФункции

// Меняет статус ошибки на "Особенность" с помощью фонового задания.
//
Функция ФоновоеЗаданиеОтметитьКакОсобенность(СтруктураПараметров, АдресХранилища) Экспорт
	
	ТаблицаОшибок = СтруктураПараметров.ТаблицаОшибок;
	Комментарий = СтруктураПараметров.Комментарий;
	Причина = СтруктураПараметров.Причина;
	
	МассивНомеровОсобенностей = Новый Массив;
	
	Для Каждого СтрокаОшибка Из ТаблицаОшибок Цикл
		Номер = СтрокаОшибка.Номер;
		КомментарийОшибки = СтрокаОшибка.Комментарий;
		Если НЕ ПустаяСтрока(Комментарий) Тогда
			ДобавляемыйКомментарий = СокрЛП(Комментарий);
			Если ПустаяСтрока(КомментарийОшибки) Тогда
				КомментарийОшибки = ДобавляемыйКомментарий;
			Иначе
				КомментарийОшибки = ДобавляемыйКомментарий + Символы.ПС + Символы.ПС + КомментарийОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Статус = НазначитьОсобенность(Номер, Причина, КомментарийОшибки);
		Если НЕ ПустаяСтрока(Статус) Тогда
			Сообщить(Статус);
			Продолжить;
		КонецЕсли;
		
		МассивНомеровОсобенностей.Добавить(Номер);
	КонецЦикла;
	
	Для Каждого СтрокаОшибка Из ТаблицаОшибок Цикл
		ПричинаОсобенности = РегистрыСведений.УстановленныеПричиныОсобенностей.СоздатьМенеджерЗаписи();
		ПричинаОсобенности.Ошибка = СтрокаОшибка.Ошибка;
		ПричинаОсобенности.ПричинаОсобенности = Причина;
		ПричинаОсобенности.ДатаВыбораОсобенности = ТекущаяДатаСеанса();
		ПричинаОсобенности.Записать();
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МассивНомеровОсобенностей, АдресХранилища);
	
КонецФункции

// Создает новый табличный документ с СКД из переданного отчета, с настройками по умолчанию.
// Параметры:
//   ИмяОтчета - Отчет-источник, откуда получаем макет СКД.
//   ПараметрыНастроек - Параметры для создания табличного документа.
//   Настройки - Настройки, для которых необходимо создать макет.
//   ТаблицаЗначенийРезультат - Таблица значений.
// Возвращаемое значение:
//   Табличный документ.
Функция СформироватьТабличныйДокументИзФоновогоЗадания(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ИмяОтчета = ПараметрыОтчета.ИмяОтчета;
	ПараметрыНастроек = ПараметрыОтчета.ПараметрыНастроек;
	Настройки = ПараметрыОтчета.Настройки;
	ТаблицаЗначенийРезультат = ПараметрыОтчета.ТаблицаЗначенийРезультат;
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ИмяОтчета", ИмяОтчета);
	ДанныеОтчета.Вставить("ОписаниеОшибки", "");
	ДанныеОтчета.Вставить("ОжиданиеОтвета", Ложь);
	ДанныеОтчета.Вставить("ИмяТабличнойЧасти", ПараметрыОтчета.ИмяТабличнойЧасти);
	
	// Получаем СКД.
	Схема = Отчеты.НайденныеОшибки.ПолучитьМакет(ИмяОтчета);
	
	Для Каждого ЗначениеПараметра Из Схема.Параметры Цикл
		ЗначениеКУстановке = ПараметрыНастроек[ЗначениеПараметра.Имя];
		Если ЗначениеКУстановке <> Неопределено Тогда
			ЗначениеПараметра.Значение = ЗначениеКУстановке;
		КонецЕсли;
	КонецЦикла;
	
	// Получаем настройки по умолчанию.
	Если Настройки = Неопределено Тогда
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	// Создаем компоновщик.
	ДанныеРасшифровкиОтчета = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = Компоновщик.Выполнить(Схема, Настройки, ДанныеРасшифровкиОтчета);
	
	// Создаем процессор компоновки.
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОтчета);
	
	// Формируем табличный документ.
	ТабДокумент = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ПроцессорВывода.Вывести(Процессор, Истина);
	Исключение
		ДанныеОтчета.Вставить("ОписаниеОшибки", ОписаниеОшибки());
	КонецПопытки;
	
	Если ТаблицаЗначенийРезультат <> Неопределено Тогда
		
		КомпоновщикДляТаблицыЗначений = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДляТаблицыЗначений = КомпоновщикДляТаблицыЗначений.Выполнить(Схема, Настройки,,,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорДляТаблицыЗначений = Новый ПроцессорКомпоновкиДанных;
		ПроцессорДляТаблицыЗначений.Инициализировать(МакетКомпоновкиДляТаблицыЗначений,, ДанныеРасшифровкиОтчета);
		
		ПроцессорВыводаВКоллекцию = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТаблицаЗначенийРезультат = Новый ТаблицаЗначений;
		ПроцессорВыводаВКоллекцию.УстановитьОбъект(ТаблицаЗначенийРезультат);
		ПроцессорВыводаВКоллекцию.Вывести(ПроцессорДляТаблицыЗначений, Истина);
		
	КонецЕсли;
	
	ДанныеОтчета.Вставить("ТабличныйДокумент", ТабДокумент);
	ДанныеОтчета.Вставить("ДанныеРасшифровкиОтчета", ДанныеРасшифровкиОтчета);
	ПоместитьВоВременноеХранилище(ЗначениеВСтрокуXML(ДанныеОтчета), АдресХранилища);
	
КонецФункции

// Возвращает значение в виде XML-строки.
// Преобразованы в XML-строку (сериализованы) могут быть только те объекты,
// для которых в описании указано, что они сериализуются.
//
// Параметры:
//   Значение - Произвольный. Значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//   Строка - XML-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуXML(Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти

#КонецЕсли