
#Область ОписаниеПеременных

Перем ФормаРабочегоСтола Экспорт;				// Объект общей формы "Рабочий стол".
Перем ИнтервалОбработчикаОжидания;				// Интервал обработчика ожидания.
Перем ОткрытВопросОЗапускеПроверкиПоРасписанию;	// Флаг определяет открыт ли вопрос о запуске проверки по расписанию.
Перем ЗапущенныеЗадания Экспорт; 				// Массив запущенных фоновых заданий.
Перем ЗапущеноОбновлениеБазы Экспорт;			// Флаг для отслеживания фонового задания обновления ИБ.
Перем ПользовательОбновления;					// Имя пользователя, запустившего обновление базы.

#КонецОбласти

#Область Обработчики

// Обработчик, вызываемый при начале работы системы.
//
Процедура ПриНачалеРаботыСистемы()
	
	ФлагПакетныйЗапуск = (ЗначениеЗаполнено(ПараметрЗапуска));
	
	ИнтервалОбработчикаОжидания = 10;
	
	ЗапущенныеЗадания = Новый Массив;
	
	Если ВыбранаРольПолныеПрава() Тогда
		
		Если ФлагПакетныйЗапуск Тогда
			
			ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы();
			
		Иначе
			
			СтруктураФоновогоЗадания = Новый Структура("Ключ, Состояние", "ОбновлениеИБ", СостояниеФоновогоЗадания.Активно);
			
			МассивЗаданийОбновления = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураФоновогоЗадания);
			ЗапущеноОбновлениеБазы = МассивЗаданийОбновления.Количество() > 0;
			ПользовательОбновления = "";
			
			ПодключитьОбработчикОжидания("ПолучитьСообщенияИзФоновогоЗаданияОбновленияБазы", ИнтервалОбработчикаОжидания);
			
			ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазыФоновымЗаданием();
			
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСПочтовымиСообщениями.ЗаполнениеНастроекПоУмолчанию();
	
	ОткрытВопросОЗапускеПроверкиПоРасписанию = Ложь;
	
	ФормаРабочегоСтола = ПолучитьОбщуюФорму("РабочийСтол");
	ФормаРабочегоСтола.Открыть();
	
	Если НЕ ВыбранаРольПользователя() Тогда
		ПодключитьОбработчикОжидания("ЗапускПроверкиПоРасписанию", ИнтервалОбработчикаОжидания, Ложь);
		ПодключитьОбработчикОжидания("ВыгрузкаОсобенностейПоРасписанию", ИнтервалОбработчикаОжидания, Ложь);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПолучитьСообщенияИзФоновыхЗаданийПометкиУдаления", ИнтервалОбработчикаОжидания, Истина);
	
	Если ФлагПакетныйЗапуск Тогда
		ЗапускИзКоманднойСтрокиКлиент.ЗапускПроверкиИзКоманднойСтроки();
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПоказатьОписаниеИзмененийСистемы();
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	Если ВыбранаРольПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверить наличие активных фоновых заданий.
	Отбор = Новый Структура;
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("РегламентноеЗадание", Неопределено);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() <> 0 Тогда
		
		ТаблицаНаименованийФоновыхЗаданий = Новый ТаблицаЗначений;
		ТаблицаНаименованийФоновыхЗаданий.Колонки.Добавить("Имя");
		
		Для Каждого ТекущееФоновоеЗадание Из МассивФоновыхЗаданий Цикл
			Если ПустаяСтрока(ТекущееФоновоеЗадание.Наименование) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаНаименованийФоновыхЗаданий.Добавить();
			НоваяСтрока.Имя = ТекущееФоновоеЗадание.Наименование;
		КонецЦикла;
		
		ТаблицаНаименованийФоновыхЗаданий.Свернуть("Имя");
		МассивНаименованийФоновыхЗаданий = ТаблицаНаименованийФоновыхЗаданий.ВыгрузитьКолонку("Имя");
		
		СтрокаНаименованийФоновыхЗаданий = СтрСоединить(МассивНаименованийФоновыхЗаданий, Символы.ПС + "- ");
		
		ТекстВопроса = СтрШаблон(НСтр("ru='В данный момент выполняются фоновые задания: %1- %2.%1
			|Завершить работу системы?'"), Символы.ПС, СтрокаНаименованийФоновыхЗаданий);
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Завершить", "Завершить");
		СписокКнопок.Добавить("Отмена", "Отмена");
		
		Ответ = Вопрос(ТекстВопроса, СписокКнопок);
		Если Ответ = "Отмена" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверить наличие запускаемых проверок в течение этого дня (или более).
	ТаблицаКонфигураций = УправлениеРасписанием.ПолучитьКонфигурацииДляПроверкиПоРасписанию(Истина);
	Если ТаблицаКонфигураций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонфигурации = ТаблицаКонфигураций[0];
	ТекстВопроса = СтрШаблон(НСтр("ru='Сегодня запланирован запуск проверки конфигурации <%1> в %2.
		|Завершить работу системы?'"), СтрокаКонфигурации.Наименование, СтрокаКонфигурации.ВремяЗапуска);
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Завершить", "Завершить");
	СписокКнопок.Добавить("Отмена", "Отмена");
	
	Ответ = Вопрос(ТекстВопроса, СписокКнопок);
	Если Ответ = "Отмена" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОжидания

// Обработчик ожидания, вызываемый для получения сообщений из фонового задания обновления информационной базы.
//
Процедура ПолучитьСообщенияИзФоновогоЗаданияОбновленияБазы() Экспорт
	
	Если НЕ ЗапущеноОбновлениеБазы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ИмяПользователя();
	
	ЗначениеКонстанты = СокрЛП(Константы.НомерВерсииКонфигурации.Получить());
	МассивЭлементовКонстанты = СтрРазделить(ЗначениеКонстанты, Символы.Таб);
	Если МассивЭлементовКонстанты.Количество() < 3 Тогда
		Если ПользовательОбновления = ТекущийПользователь Тогда
			ТекстСообщения = НСтр("ru='Фоновое задание обновления базы завершено успешно.'");
			Сообщить(ТекстСообщения);
		КонецЕсли;
		
		ЗапущеноОбновлениеБазы = Ложь;
		Возврат;
	КонецЕсли;
	
	ПользовательОбновления = МассивЭлементовКонстанты[1];
	Если ПользовательОбновления <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = МассивЭлементовКонстанты[2];
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	ЗаданиеОбновления = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	Если ЗаданиеОбновления = Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Фоновое задание обновления базы завершено аварийно %1'"), ИдентификаторЗадания);
		Сообщить(ТекстСообщения);
		ЗапущеноОбновлениеБазы = Ложь;
		Возврат;
	КонецЕсли;
	
	Сообщения = ЗаданиеОбновления.ПолучитьСообщенияПользователю(Истина);
	Если Сообщения.Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Сообщения фонового задания ""%1"", УИД: %2, начало: %3:'"),
			ЗаданиеОбновления.Наименование,
			ЗаданиеОбновления.УникальныйИдентификатор,
			ЗаданиеОбновления.Начало);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
	Для Каждого Сообщение Из Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Если ЗаданиеОбновления.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		Сообщить(Строка(ЗаданиеОбновления.Состояние));
		ЗапущеноОбновлениеБазы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ожидания, вызываемый для получения сообщений из фоновых заданий установки/снятия
// пометки удаления объектов.
//
Процедура ПолучитьСообщенияИзФоновыхЗаданийПометкиУдаления() Экспорт
	
	ФлагОповестить = Ложь;
	
	Если ТипЗнч(ЗапущенныеЗадания) <> Тип("Массив") Тогда
		ЗапущенныеЗадания = Новый Массив;
	КонецЕсли;
	
	НомерЗадания = 0;
	Пока НомерЗадания <= ЗапущенныеЗадания.Количество() - 1 Цикл
		
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ЗапущенныеЗадания[НомерЗадания]);
		Если Задание = Неопределено Тогда
			ЗапущенныеЗадания.Удалить(НомерЗадания);
			Продолжить;
		КонецЕсли;
		
		Сообщения = Задание.ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		
		ФлагОповестить = Истина;
		
		Если Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			ЗапущенныеЗадания.Удалить(НомерЗадания);
			Продолжить;
		КонецЕсли;
		
		НомерЗадания = НомерЗадания + 1;
		
	КонецЦикла;
	
	Если ФлагОповестить Тогда
		Оповестить("ИзмениласьПометкаУдаления");
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПолучитьСообщенияИзФоновыхЗаданийПометкиУдаления", ИнтервалОбработчикаОжидания, Истина);
	
КонецПроцедуры

// Обработчик ожидания, вызываемый для запуска проверки конфигураций по расписанию.
//
Процедура ЗапускПроверкиПоРасписанию() Экспорт
	
	// Если вопрос открыт, то выходим.
	Если ОткрытВопросОЗапускеПроверкиПоРасписанию Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКонфигураций = УправлениеРасписанием.ПолучитьКонфигурацииДляПроверкиПоРасписанию();
	
	ТаблицаРазличныхКонфигураций = ТаблицаКонфигураций.Скопировать();
	ТаблицаРазличныхКонфигураций.Свернуть("Ссылка, Наименование");
	КоличествоКонфигураций = ТаблицаРазличныхКонфигураций.Количество();
	Если КоличествоКонфигураций = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивКонфигураций = ТаблицаРазличныхКонфигураций.ВыгрузитьКолонку("Наименование");
	СтрокаКонфигураций = СтрСоединить(МассивКонфигураций, Символы.ПС);
	
	ТекстВопроса = СтрШаблон(НСтр("ru='Предстоит запуск проверок конфигураций (%3):%1%2%1%1Запустить проверку сейчас?'"),
		Символы.ПС, СтрокаКонфигураций, КоличествоКонфигураций);
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Запустить", "Запустить");
	СписокКнопок.Добавить("Отмена", "Отмена");
	
	ОткрытВопросОЗапускеПроверкиПоРасписанию = Истина;
	
	Ответ = Вопрос(ТекстВопроса, СписокКнопок, 30, "Запустить",, "Запустить");
	ЗапуститьПроверку = (Ответ = КодВозвратаДиалога.Таймаут) ИЛИ (Ответ = "Запустить");
	
	Для Каждого СтрокаКонфигурации Из ТаблицаКонфигураций Цикл
		
		ТекущаяКонфигурация = СтрокаКонфигурации.Ссылка;
		ТекущееРасписание = СтрокаКонфигурации.Расписание;
		ТекущийНомерСтроки = СтрокаКонфигурации.НомерСтроки;
		ШаблонПисьмаОтветственному = СтрокаКонфигурации.ШаблонПисьмаОтветственному;
		ШаблонПисьмаРазработчику = СтрокаКонфигурации.ШаблонПисьмаРазработчику;
		ДатаНачалаПоследнегоЗапуска = ТекущаяДатаСеанса();
		
		// Установить новое время запуска.
		УправлениеРасписанием.ЗаписатьСледующееВремяЗапуска(ТекущаяКонфигурация, ТекущееРасписание, ТекущийНомерСтроки,
			ДатаНачалаПоследнегоЗапуска);
		
		Если НЕ ЗапуститьПроверку Тогда
			Продолжить;
		КонецЕсли;
		
		ФормаЗапускаПроверки = ПолучитьФорму("Обработка.ЗапускПроверки.Форма",,, Истина);
		ФормаЗапускаПроверки.Конфигурация = ТекущаяКонфигурация;
		ФормаЗапускаПроверки.ФлагПроверкаПоРасписанию = Истина;
		ФормаЗапускаПроверки.ШаблонПисьмаОтветственному = ШаблонПисьмаОтветственному;
		ФормаЗапускаПроверки.ШаблонПисьмаРазработчику = ШаблонПисьмаРазработчику;
		ФормаЗапускаПроверки.ВариантПроверкиПоРасписанию = СтрокаКонфигурации.ВариантПроверкиПоРасписанию;
		ФормаЗапускаПроверки.РегистрироватьВсеОшибкиКакОсобенности =
			СтрокаКонфигурации.РегистрироватьВсеОшибкиКакОсобенностиПоРасписанию;
		
		ФормаЗапускаПроверки.Открыть();
		ФормаЗапускаПроверки.ВыполнитьПроверку();
		ФормаЗапускаПроверки.Закрыть();
		
	КонецЦикла;
	
	ОткрытВопросОЗапускеПроверкиПоРасписанию = Ложь;
	
КонецПроцедуры

// Обработчик ожидания, вызываемый для выгрузки особенностей по расписанию.
//
Процедура ВыгрузкаОсобенностейПоРасписанию() Экспорт
	
	ВыборкаДетальныеЗаписи = УправлениеРасписанием.ПолучитьВыборкуВыгрузкиОсобенностей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Конфигурация = ВыборкаДетальныеЗаписи.Ссылка;
		ВыгружатьАвтораОсобенности = Конфигурация.ВыгружатьАвтораОсобенности;
		
		// Установить новое время выгрузки особенностей.
		ДатаНачалаПоследнегоЗапуска = ТекущаяДатаСеанса();
		УправлениеРасписанием.ЗаписатьСледующееВремяВыгрузкиОсобенностей(Конфигурация, ДатаНачалаПоследнегоЗапуска);
		
		ПутьКФайлуВыгрузкиОсобенностей = ВыборкаДетальныеЗаписи.ПутьКФайлуВыгрузкиОсобенностей;
		
		ИмпортЭкспортКлиент.ВыгрузитьОсобенности(ПутьКФайлуВыгрузкиОсобенностей, Конфигурация, ВыгружатьАвтораОсобенности);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
