#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мОбработанныеОбъекты Экспорт;					// Обработанные объекты.
Перем СведенияОбОбъектах;							// Сведения об объектах.
Перем ПредставлениеТипа;							// Соответствие представления типа.
Перем Типы;											// Перечисление ТипыОбъектов.

Перем ТаблицаРазрешенийКонфигурации;				// Исключения конфигурации с видом "Включать ...".
Перем ЕстьРазрешенияКонфигурации;					// Есть ли разрешения конфигурации.
Перем ТаблицаИсключенийКонфигурации;				// Исключения конфигурации с видом "Исключать ...".
Перем ЕстьИсключенияКонфигурации; 					// Есть ли исключения конфигурации.
Перем СоответствиеОбъектовРазрешенийИИсключений;	// Соответствие объектов исключений.

Перем ВеткаПодсистемы; 								// Ссылка на элемент справочника СтруктураКонфигурации.
Перем СоответствияНазванийПрав;						// Структура соответствий русских и английских названий прав.
Перем ТаблицаТиповОбъектов;							// Таблица соответствий русских и английских названий типов объектов.
Перем СоответствияОбъектов;							// Соответствие объекта конфигурации и английского пути.
Перем СоответствияПодсистем;						// Соответствие ссылки на подсистему и ее строковое представление.
Перем СписокПравПоТипуОбъекта;

Перем СтруктураПроверки Экспорт;					// Структура проверки: ЖурналПроверки, ВремяНачала, ВремяОкончания, ОбщееВремя.

Перем Расширение Экспорт;							// Расширение, по которому собираются данные, если Неопределено или пустая ссылка,
													// то проверяется конфигурация.

Перем ПоказыватьПредупреждения Экспорт;				// Флаг, определяющий необходимость показывать предупреждения пользователю.

Перем УровеньИнформация;
Перем УровеньОшибка;
Перем УровеньПредупреждение;

#КонецОбласти

#Область ЗаполнениеСтруктурыКонфигурации

Функция ПолучитьПутьОбъекта(СтруктураОбъекта)
	
	ПутьОбъекта = СтруктураОбъекта.Наименование;
	РодительОбъекта = СтруктураОбъекта.Родитель;
	
	Пока Истина Цикл
		
		Если РодительОбъекта = Неопределено Или РодительОбъекта.ТипОбъекта = Типы.Корень Тогда
			Прервать;
		КонецЕсли;
		
		РодительПуть = РодительОбъекта.Путь;
		Если НЕ ПустаяСтрока(РодительПуть) Тогда
			ПутьОбъекта = РодительПуть + "." + ПутьОбъекта;
			Прервать;
		КонецЕсли;
		
		ПутьОбъекта = РодительОбъекта.Наименование + "." + ПутьОбъекта;
		
		РодительОбъекта = РодительОбъекта.Родитель;
		
	КонецЦикла;
	
	Возврат ПутьОбъекта;
	
КонецФункции

Функция ОбъектВходитВРазрешенияКонфигурации(ОбъектСсылка)
	
	ОбъектВходитВРазрешения = Ложь;
	
	Для Каждого РазрешениеКонфигурации Из ТаблицаРазрешенийКонфигурации Цикл
		
		Если ОбъектСсылка.Расширение <> РазрешениеКонфигурации.Расширение Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРазрешения = РазрешениеКонфигурации.Значение;
		ВидРазрешения = РазрешениеКонфигурации.ВидРазрешения;
		
		Если ВидРазрешения = Перечисления.ВидыИсключенийИзПроверки.ВключатьПодсистему Тогда
			
			Если ОбъектВходитВПодсистему(ОбъектСсылка, ЗначениеРазрешения, Истина, СоответствияПодсистем) Тогда
				ОбъектВходитВРазрешения = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ВидРазрешения = Перечисления.ВидыИсключенийИзПроверки.ВключатьСПрефиксом Тогда
			
			Если СтрНачинаетсяС(ОбъектСсылка.Наименование, ЗначениеРазрешения) Тогда
				ОбъектВходитВРазрешения = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ВидРазрешения = Перечисления.ВидыИсключенийИзПроверки.ВключатьТипОбъектов Тогда
			
			Если Строка(ОбъектСсылка.ТипОбъекта) = ЗначениеРазрешения Тогда
				ОбъектВходитВРазрешения = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ВидРазрешения = Перечисления.ВидыИсключенийИзПроверки.ВключатьОбъект Тогда
			
			Если СтрСравнить(ОбъектСсылка.Путь, ЗначениеРазрешения) = 0 Тогда
				ОбъектВходитВРазрешения = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектВходитВРазрешения;
	
КонецФункции

Функция ОбъектВходитВИсключенияКонфигурации(ОбъектСсылка)
	
	ОбъектВходитВИсключения = Ложь;
	
	Для Каждого ИсключениеКонфигурации Из ТаблицаИсключенийКонфигурации Цикл
		
		Если ОбъектСсылка.Расширение <> ИсключениеКонфигурации.Расширение Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеИсключения = ИсключениеКонфигурации.Значение;
		ВидИсключения = ИсключениеКонфигурации.ВидИсключения;
		
		Если ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьПодсистему Тогда
			
			Если ОбъектВходитВПодсистему(ОбъектСсылка, ЗначениеИсключения, Истина, СоответствияПодсистем) Тогда
				ОбъектВходитВИсключения = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьСПрефиксом Тогда
			
			Если СтрНачинаетсяС(ОбъектСсылка.Наименование, ЗначениеИсключения) Тогда
				ОбъектВходитВИсключения = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьТипОбъектов Тогда
			
			Если Строка(ОбъектСсылка.ТипОбъекта) = ЗначениеИсключения Тогда
				ОбъектВходитВИсключения = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьОбъект Тогда
			
			Если СтрСравнить(ОбъектСсылка.Путь, ЗначениеИсключения) = 0 Тогда
				ОбъектВходитВИсключения = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектВходитВИсключения;
	
КонецФункции

Функция ПолучитьЗначениеФлагаСборРазрешен(ОбъектСсылка, Родитель, ПараметрыПроверяемыхОбъектов)
	
	СтруктураФлагов = Новый Структура;
	СтруктураФлагов.Вставить("СобраныСведения", Истина);
	СтруктураФлагов.Вставить("Исключен", Ложь);
	
	Если (ОбъектСсылка.ТипОбъекта = Типы.Корень)
	 ИЛИ (ОбъектСсылка.ТипОбъекта = Типы.Конфигурация)
	 ИЛИ (ОбъектСсылка.ТипОбъекта = Типы.ВеткаМетаданных) Тогда
		Возврат СтруктураФлагов;
	КонецЕсли;
	
	СтруктураФлагов.СобраныСведения = ПолучитьЗначениеФлагаСборРазрешенИзСоответствияВключенныхОбъектов(ОбъектСсылка,
		Родитель, ПараметрыПроверяемыхОбъектов);
	
	СтруктураФлагов.Исключен = ЗначениеФлагаИсключенИзПроверки(ОбъектСсылка, Родитель);
	// Если объект исключен из проверки, то сведения не нужно собирать.
	СтруктураФлагов.СобраныСведения = ?(СтруктураФлагов.Исключен, Ложь, СтруктураФлагов.СобраныСведения);
	
	Возврат СтруктураФлагов;
	
КонецФункции

Функция ЗначениеФлагаИсключенИзПроверки(ОбъектСсылка, Родитель)
	
	РодительОбъектаВходитВРазрешенияИлиИсключения = СоответствиеОбъектовРазрешенийИИсключений[Родитель];
	Если РодительОбъектаВходитВРазрешенияИлиИсключения <> Неопределено Тогда
		СоответствиеОбъектовРазрешенийИИсключений.Вставить(ОбъектСсылка, РодительОбъектаВходитВРазрешенияИлиИсключения);
		Возврат РодительОбъектаВходитВРазрешенияИлиИсключения;
	КонецЕсли;
	
	// По умолчанию устанавливаем флаг Исключен = Ложь.
	Исключен = Ложь;
	
	// Если есть разрешения конфигурации и объект в них входит, то возвращаем истину.
	Если ЕстьРазрешенияКонфигурации Тогда
		
		Если ОбъектВходитВРазрешенияКонфигурации(ОбъектСсылка) Тогда
			СоответствиеОбъектовРазрешенийИИсключений.Вставить(ОбъектСсылка, Ложь);
			Возврат Ложь;
		КонецЕсли;
		
		// Устанавливаем во флаг Ложь, т.к. разрешения есть, но объект в них не входит.
		Исключен = Истина;
		
	// Если есть исключения конфигурации и объект в них входит, то возвращаем ложь.
	ИначеЕсли ЕстьИсключенияКонфигурации Тогда
		
		Если ОбъектВходитВИсключенияКонфигурации(ОбъектСсылка) Тогда
			СоответствиеОбъектовРазрешенийИИсключений.Вставить(ОбъектСсылка, Истина);
			Возврат Истина;
		КонецЕсли;
		
		// Если есть исключения, но объект в них не входит, то флаг будет Ложь.
		// Если есть разрешения и исключения, но объект в них не входит, то флаг будет Истина.
		Исключен = Ложь;
	КонецЕсли;
	
	Возврат Исключен;
	
КонецФункции

Функция ПолучитьЗначениеФлагаСборРазрешенИзСоответствияВключенныхОбъектов(ОбъектСсылка, Родитель,
	ПараметрыПроверяемыхОбъектов)
	
	Если ПараметрыПроверяемыхОбъектов.ИскатьПоСоответствиюВключенныхОбъектов Тогда
		
		СоответствиеДляПоиска = ПараметрыПроверяемыхОбъектов.СоответствиеВключенныхВПроверкуОбъектов;
		
		ПутьПоиска = ОбъектСсылка.Путь;
		
		Если ПроверитьОбъектВходитВСоответствиеВключенныхОбъектов(ПутьПоиска, СоответствиеДляПоиска) Тогда
			Возврат Истина;
		КонецЕсли;
		
		// Если объект не является объектов верхнего уровня,
		// тогда проверяем входит ли его родитель в соответствие включенных объектов.
		МассивТиповОбъектовВерхнегоУровня = ПараметрыПроверяемыхОбъектов.МассивТиповОбъектовВерхнегоУровня;
		Если МассивТиповОбъектовВерхнегоУровня.Найти(ОбъектСсылка.ТипОбъекта) = Неопределено Тогда
			ПутьПоиска = Родитель.Путь;
			
			Если ПроверитьОбъектВходитВСоответствиеВключенныхОбъектов(ПутьПоиска, СоответствиеДляПоиска) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьОбъектВходитВСоответствиеВключенныхОбъектов(ПутьПоиска, СоответствиеДляПоиска)
	
	МассивПутиОбъекта = СтрРазделить(ПутьПоиска, ".");
	Если МассивПутиОбъекта.Количество() > 1 Тогда
		Если МассивПутиОбъекта[0] = "Общие" Тогда
			МассивПутиОбъекта.Удалить(0);
		КонецЕсли;
		ПутьПоиска = СтрСоединить(МассивПутиОбъекта, ".");
	КонецЕсли;
	
	Возврат (СоответствиеДляПоиска[ПутьПоиска] = Истина);
	
КонецФункции

Функция ОбъектИзменен(ЭлементСсылка, СтруктураЭлемента, РодительСсылка)
	
	ФлагОбъектИзменен = (ЭлементСсылка.НомерПоПорядку <> СтруктураЭлемента.НомерПоПорядку)
		ИЛИ (ЭлементСсылка.ВходитВПодсистемыПуть <> Строка(СтруктураЭлемента.ПодсистемыПуть))
		ИЛИ ПустаяСтрока(ЭлементСсылка.Путь) ИЛИ ЭлементСсылка.Родитель <> РодительСсылка
		ИЛИ (ЗначениеЗаполнено(ЭлементСсылка.ВходитВПодсистемыПуть) И Не ЗначениеЗаполнено(ЭлементСсылка.Подсистемы));
		
	Возврат ФлагОбъектИзменен;
	
КонецФункции

// Записывать данные в виде элемента структуры конфигурации
// (элемент в соответствующем справочнике).
//
Функция ЗаписатьСтруктурныйЭлемент(СтруктураЭлемента, РодительСсылка, СоответствиеОбъектовКонфигурации,
	ПараметрыПроверяемыхОбъектов, НомерПоПорядку, КоличествоОбъектов, ПроцентОбработанныхОбъектов)
	
	ЭлементТипОбъекта = СтруктураЭлемента.ТипОбъекта;
	ЭлементНаименование = СтруктураЭлемента.Наименование;
	ЭлементПодсистемыПуть = СтруктураЭлемента.ПодсистемыПуть;
	ЭлементПуть = ПолучитьПутьОбъекта(СтруктураЭлемента);
	
	СтруктураЭлемента.НомерПоПорядку = НомерПоПорядку;
	СтруктураЭлемента.Путь = ЭлементПуть;
	
	Ключ = ВРег(ЭлементПуть + " - " + ЭлементТипОбъекта);
	ЭлементСсылка = СоответствиеОбъектовКонфигурации[Ключ];
	Если ЭлементСсылка <> Неопределено Тогда
		
		СтруктураФлагов = ПолучитьЗначениеФлагаСборРазрешен(ЭлементСсылка, РодительСсылка, ПараметрыПроверяемыхОбъектов);
		СборРазрешен = СтруктураФлагов.СобраныСведения;
		Исключен = СтруктураФлагов.Исключен;
		ФлагПерезаписиОбъекта = ОбъектИзменен(ЭлементСсылка, СтруктураЭлемента, РодительСсылка);
		
		Если ФлагПерезаписиОбъекта Тогда
			
			НовыйЭлемент = ЭлементСсылка.ПолучитьОбъект();
			НовыйЭлемент.НомерПоПорядку = НомерПоПорядку;
			НовыйЭлемент.ВходитВПодсистемыПуть = ЭлементПодсистемыПуть;
			НовыйЭлемент.Путь = ЭлементПуть;
			ЗаписатьПодсистемыВТабличнуюЧасть(НовыйЭлемент);
			
			СтруктураФлагов = ПолучитьЗначениеФлагаСборРазрешен(НовыйЭлемент, РодительСсылка, ПараметрыПроверяемыхОбъектов);
			СборРазрешен = СтруктураФлагов.СобраныСведения;
			Исключен = СтруктураФлагов.Исключен;
			
			НовыйЭлемент.СобраныСведения = СборРазрешен;
			НовыйЭлемент.Исключен = Исключен;
			НовыйЭлемент.Родитель = РодительСсылка;
			Если СборРазрешен Тогда
				НовыйЭлемент.ДатаСбораСведений = СтруктураПроверки.ВремяНачала;
			КонецЕсли;
			
			НовыйЭлемент.Записать();
			
		// Если СборРазрешен, тогда необходимо перезаписать дату сбора сведений.
		ИначеЕсли СборРазрешен
			ИЛИ (ЭлементСсылка.СобраныСведения <> СборРазрешен)
			ИЛИ (ЭлементСсылка.Исключен <> Исключен) Тогда
			
			НовыйЭлемент = ЭлементСсылка.ПолучитьОбъект();
			НовыйЭлемент.СобраныСведения = СборРазрешен;
			НовыйЭлемент.Исключен = Исключен;
			НовыйЭлемент.Родитель = РодительСсылка;
			Если СборРазрешен Тогда
				НовыйЭлемент.ДатаСбораСведений = СтруктураПроверки.ВремяНачала;
			КонецЕсли;
			
			НовыйЭлемент.Записать();
			
		КонецЕсли;
		
	Иначе
		
		НовыйЭлемент = Справочники.СтруктураКонфигурации.СоздатьЭлемент();
		НовыйЭлемент.Наименование = ЭлементНаименование
			+ ?(ЭлементТипОбъекта = Типы.Корень, ПолучитьДополнениеКНаименованиюКорня(), "");
		НовыйЭлемент.Владелец = Версия;
		НовыйЭлемент.Родитель = РодительСсылка;
		НовыйЭлемент.ТипОбъекта = ЭлементТипОбъекта;
		НовыйЭлемент.НомерПоПорядку = НомерПоПорядку;
		НовыйЭлемент.ВходитВПодсистемыПуть = ЭлементПодсистемыПуть;
		НовыйЭлемент.Путь = ЭлементПуть;
		НовыйЭлемент.Расширение = Расширение;
		
		ЗаписатьПодсистемыВТабличнуюЧасть(НовыйЭлемент);
		
		СтруктураФлагов = ПолучитьЗначениеФлагаСборРазрешен(НовыйЭлемент, РодительСсылка, ПараметрыПроверяемыхОбъектов);
		СборРазрешен = СтруктураФлагов.СобраныСведения;
		Исключен = СтруктураФлагов.Исключен;
		
		НовыйЭлемент.СобраныСведения = СборРазрешен;
		НовыйЭлемент.Исключен = Исключен;
		Если СборРазрешен Тогда
			НовыйЭлемент.ДатаСбораСведений = СтруктураПроверки.ВремяНачала;
		КонецЕсли;
		
		ЭлементЗаписан = Ложь;
		СчетчикТранзакций = 1;
		
		Пока (НЕ ЭлементЗаписан) И (СчетчикТранзакций < 1000) Цикл
			ЭлементЗаписан = Истина;
			Попытка
				НовыйЭлемент.Записать();
			Исключение
				ЭлементЗаписан = Ложь;
			КонецПопытки;
			СчетчикТранзакций = СчетчикТранзакций + 1;
		КонецЦикла;
		
		Если НЕ ЭлементЗаписан Тогда
			Если ПоказыватьПредупреждения Тогда
				#Если Клиент Тогда
				Предупреждение(НСтр("ru='В настоящий момент выполняется слишком много загрузок данных.
					|Повторите сбор данных позже.'"));
				#КонецЕсли
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		
		ЭлементСсылка = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	мОбработанныеОбъекты.Добавить(ЭлементСсылка);
	НомерПоПорядку = НомерПоПорядку + 1;
	
	#Если Клиент Тогда
	ТекущийПроцентОбъектов = Цел(100 * НомерПоПорядку / КоличествоОбъектов);
	
	Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
		ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
		ТекстСостояния = НСтр("ru='Выполняется запись сведений о структуре конфигурации (%1%%)'");
		ТекстСостояния = СтрШаблон(ТекстСостояния, Строка(ТекущийПроцентОбъектов));
		Состояние(ТекстСостояния);
	КонецЕсли;
	#КонецЕсли
	
	Для Каждого ЭлементСтруктурногоЭлемента Из СтруктураЭлемента.Строки Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Если НЕ ЗаписатьСтруктурныйЭлемент(ЭлементСтруктурногоЭлемента, ЭлементСсылка, СоответствиеОбъектовКонфигурации,
			ПараметрыПроверяемыхОбъектов, НомерПоПорядку, КоличествоОбъектов, ПроцентОбработанныхОбъектов) Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Получает данные о структуре проверяемой конфигурации и записывает их в справочник "Структура конфигурации".
//
Функция ЗаполнитьСтруктуруКонфигурации(КаталогВыгрузкиФайловXML, Знач СоответствиеВключенныхВПроверкуОбъектов) Экспорт
	
	ДанныеКонфигурации = РазборФайловXML.ПолучитьДанныеСтруктурыКонфигурации(КаталогВыгрузкиФайловXML);
	Если ДанныеКонфигурации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Расширение) Тогда
		УстановитьВерсиюКонфигурации(ДанныеКонфигурации.Версия);
	КонецЕсли;
	
	ТаблицаОбъектовКонфигурации = ПолучитьТаблицуОбъектовКонфигурации(Версия, Расширение);
	
	СоответствиеОбъектовКонфигурации = Новый Соответствие;
	Для Каждого СтрокаОбъекта Из ТаблицаОбъектовКонфигурации Цикл
		Ключ = СтрокаОбъекта.ПутьОбъектаВРег + " - " + ВРег(СтрокаОбъекта.ТипОбъекта);
		СоответствиеОбъектовКонфигурации.Вставить(Ключ, СтрокаОбъекта.Ссылка);
	КонецЦикла;
	
	мОбработанныеОбъекты = Новый Массив;
	ДеревоСтруктурыМетаданных = ДанныеКонфигурации.ДеревоСтруктуры;
	ДеревоСтруктурыМетаданных.Колонки.Добавить("Путь");
	
	НомерПоПорядку = 0;
	ПроцентОбработанныхОбъектов = 0;
	КоличествоОбъектов = ПолучитьКоличествоОбъектов(ДеревоСтруктурыМетаданных);
	
	#Если Клиент Тогда
	ТекстСостояния = НСтр("ru='Выполняется запись сведений о структуре конфигурации (0%)'");
	Состояние(ТекстСостояния);
	#КонецЕсли
	
	СоответствияПодсистем = Новый Соответствие;
	ПодготовитьИсключенияКонфигурации();
	
	УстановитьНаименованиеКонфигурацииВСтруктуреКонфигурации(Версия, ДанныеКонфигурации.Наименование);
	
	Если ЗначениеЗаполнено(Расширение) Тогда
		СоответствиеВключенныхВПроверкуОбъектов = Неопределено;
	КонецЕсли;
	
	ПараметрыПроверяемыхОбъектов = Новый Структура;
	ПараметрыПроверяемыхОбъектов.Вставить("ИскатьПоСоответствиюВключенныхОбъектов", Ложь);
	ПараметрыПроверяемыхОбъектов.Вставить("МассивТиповОбъектовВерхнегоУровня", Неопределено);
	ПараметрыПроверяемыхОбъектов.Вставить("СоответствиеВключенныхВПроверкуОбъектов",
		СоответствиеВключенныхВПроверкуОбъектов);
	
	Если СоответствиеВключенныхВПроверкуОбъектов <> Неопределено Тогда
		ПараметрыПроверяемыхОбъектов.ИскатьПоСоответствиюВключенныхОбъектов = Истина;
		ПараметрыПроверяемыхОбъектов.МассивТиповОбъектовВерхнегоУровня = ПолучитьТипыОбъектовВерхнегоУровня();
	КонецЕсли;
	
	Для Каждого СтрокаСтруктурыМетаданных Из ДеревоСтруктурыМетаданных.Строки Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Если НЕ ЗаписатьСтруктурныйЭлемент(СтрокаСтруктурыМетаданных, Справочники.СтруктураКонфигурации.ПустаяСсылка(),
			СоответствиеОбъектовКонфигурации, ПараметрыПроверяемыхОбъектов, НомерПоПорядку, КоличествоОбъектов,
			ПроцентОбработанныхОбъектов) Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НазначитьОтветственногоЗаКонфигурациюВСтруктуреКонфигурации(Версия);
	
	АктуализироватьСтруктуруКонфигурацииПоВерсии();
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьПодсистемыВТабличнуюЧасть(Объект)
	
	ТабличнаяЧасть = Объект.Подсистемы;
	ТабличнаяЧасть.Очистить();
	
	ПодсистемыОбъекта = Объект.ВходитВПодсистемыПуть;
	Если НЕ ЗначениеЗаполнено(ПодсистемыОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодсистем = СтрРазделить(ПодсистемыОбъекта, ";", Ложь);
	Версия = Объект.Владелец;
	
	УстановитьВеткуПодсистемы(Версия);
	
	Для Каждого Подсистема Из МассивПодсистем Цикл
		
		МассивПодсистемПуть = СтрРазделить(Подсистема, ".", Ложь);
		ПодсистемаРодитель = ВеткаПодсистемы;
		
		Для Каждого ПодсистемаПуть Из МассивПодсистемПуть Цикл
			ПодсистемаРодитель = ПолучитьЭлементСтруктурыМетаданных(Версия, ПодсистемаРодитель, ПодсистемаПуть,
				Типы.Подсистема, Расширение);
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ПодсистемаРодитель) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Подсистема = ПодсистемаРодитель;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВеткуПодсистемы(Версия)
	
	Если ВеткаПодсистемы <> Неопределено И ВеткаПодсистемы.Расширение = Расширение Тогда
		Возврат;
	КонецЕсли;
	
	ВеткаПодсистемы = ПолучитьЭлементСтруктурыМетаданных(Версия,, "Подсистемы", Типы.ВеткаМетаданных, Расширение);
	
КонецПроцедуры

Функция ПолучитьКоличествоОбъектов(ДеревоСтруктурыМетаданных)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерПоПорядку", 0);
	
	МассивСтрокДереваСтруктурыМетаданных = ДеревоСтруктурыМетаданных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	Возврат МассивСтрокДереваСтруктурыМетаданных.Количество();
	
КонецФункции

Функция ПолучитьВерсиюПоНомеру(НомерВерсии)
	
	НомерВерсииБезСборки = ПолучитьНомерВерсииБезСборки(НомерВерсии);
	
	ВерсияСсылка = Справочники.Версии.НайтиПоКоду(НомерВерсииБезСборки, Истина,, Конфигурация);
	Если ЗначениеЗаполнено(ВерсияСсылка) Тогда
		Возврат ВерсияСсылка;
	КонецЕсли;
	
	ВерсияСсылка = Справочники.Версии.НайтиПоНаименованию(НомерВерсииБезСборки, Истина,, Конфигурация);
	Если ЗначениеЗаполнено(ВерсияСсылка) Тогда
		Возврат ВерсияСсылка;
	КонецЕсли;
	
	Если НомерВерсии = НомерВерсииБезСборки Тогда
		Возврат Справочники.Версии.ПустаяСсылка();
	КонецЕсли;
	
	ВерсияСсылка = Справочники.Версии.НайтиПоКоду(НомерВерсии,,, Конфигурация);
	Если ЗначениеЗаполнено(ВерсияСсылка) Тогда
		Возврат ВерсияСсылка;
	КонецЕсли;
	
	ВерсияСсылка = Справочники.Версии.НайтиПоНаименованию(НомерВерсии,,, Конфигурация);
	Если ЗначениеЗаполнено(ВерсияСсылка) Тогда
		Возврат ВерсияСсылка;
	КонецЕсли;
	
	Возврат Справочники.Версии.ПустаяСсылка();
	
КонецФункции

Процедура УстановитьВерсиюКонфигурации(НомерВерсии) Экспорт
	
	ВерсияСсылка = ПолучитьВерсиюПоНомеру(НомерВерсии);
	Если ЗначениеЗаполнено(ВерсияСсылка) Тогда
		ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
		Если ВерсияОбъект.ПометкаУдаления Тогда
			ВерсияОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
	Иначе
		ВерсияОбъект = Справочники.Версии.СоздатьЭлемент();
		ВерсияОбъект.Владелец = Конфигурация;
	КонецЕсли;
	
	НомерВерсииБезСборки = ПолучитьНомерВерсииБезСборки(НомерВерсии);
	
	ВерсияОбъект.Код = НомерВерсииБезСборки;
	ВерсияОбъект.Наименование = НомерВерсииБезСборки;
	ВерсияОбъект.ПолныйНомер = НомерВерсии;
	
	ВерсияОбъект.Записать();
	
	Версия = ВерсияОбъект.Ссылка;
	
КонецПроцедуры

Функция ПолучитьДополнениеКНаименованиюКорня()
	
	Возврат " (" + ?(ЗначениеЗаполнено(Расширение), "Расширение", "Конфигурация") + ")";
	
КонецФункции

Процедура УстановитьНаименованиеКонфигурацииВСтруктуреКонфигурации(Версия, Наименование)
	
	КонфигурацияСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Типы.Конфигурация, Расширение);
	Если Не ЗначениеЗаполнено(КонфигурацияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если (КонфигурацияСсылка.Наименование = Наименование)
	   И (КонфигурацияСсылка.Путь = Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		КонфигурацияОбъект = КонфигурацияСсылка.ПолучитьОбъект();
		КонфигурацияОбъект.Наименование = Наименование;
		КонфигурацияОбъект.Путь = Наименование;
		КонфигурацияОбъект.Записать();
		
		КореньОбъект = КонфигурацияСсылка.Родитель.ПолучитьОбъект();
		КореньОбъект.Наименование = Наименование + ПолучитьДополнениеКНаименованиюКорня();
		КореньОбъект.Путь = Наименование;
		КореньОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура АктуализироватьСтруктуруКонфигурацииПоВерсии()
	
	// Установить пометку удаления для объектов, которых нет в списке полученных объектов.
	ЗапросПоОбъектам = Новый Запрос;
	ЗапросПоОбъектам.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Версия
	|	И НЕ СтруктураКонфигурации.Ссылка В(&Ссылки)
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку УБЫВ";
	
	ЗапросПоОбъектам.УстановитьПараметр("Версия", Версия);
	ЗапросПоОбъектам.УстановитьПараметр("Расширение", Расширение);
	ЗапросПоОбъектам.УстановитьПараметр("Ссылки", мОбработанныеОбъекты);
	
	Выборка = ЗапросПоОбъектам.Выполнить().Выбрать();
	
	#Если Клиент Тогда
	ТекстСостояния = НСтр("ru='Выполняется установка пометки удаления для ненайденных объектов (%1)'");
	ТекстСостояния = СтрШаблон(ТекстСостояния, Выборка.Количество());
	Состояние(ТекстСостояния);
	#КонецЕсли
	
	Пока Выборка.Следующий() Цикл
		Попытка
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			// Устанавливаем пометку удаления для ненайденных объектов.
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			Элемент.УстановитьПометкуУдаления(Истина);
			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Записать();
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Снять пометку удаления для объектов, которых есть в списке полученных объектов.
	ЗапросПоОбъектам = Новый Запрос;
	ЗапросПоОбъектам.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Версия
	|	И СтруктураКонфигурации.Ссылка В(&Ссылки)
	|	И СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку УБЫВ";
	
	ЗапросПоОбъектам.УстановитьПараметр("Версия", Версия);
	ЗапросПоОбъектам.УстановитьПараметр("Расширение", Расширение);
	ЗапросПоОбъектам.УстановитьПараметр("Ссылки", мОбработанныеОбъекты);
	
	Выборка = ЗапросПоОбъектам.Выполнить().Выбрать();
	
	#Если Клиент Тогда
	ТекстСостояния = НСтр("ru='Выполняется снятие пометки удаления для найденных объектов (%1)'");
	ТекстСостояния = СтрШаблон(ТекстСостояния, Выборка.Количество());
	Состояние(ТекстСостояния);
	#КонецЕсли
	
	Пока Выборка.Следующий() Цикл
		Попытка
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			// Снимаем пометку удаления для найденных объектов, если они были удалены ранее.
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			Элемент.УстановитьПометкуУдаления(Ложь);
			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Записать();
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Назначает ответственного за конфигурацию в справочнике "СтруктураКонфигурации",
// ответственный берется из карточки конфигурации.
//
Процедура НазначитьОтветственногоЗаКонфигурациюВСтруктуреКонфигурации(Версия)
	
	СсылкаНаОбъект = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Типы.Конфигурация, Расширение);
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Конфигурация = Версия.Владелец;
	ОтветственныйЗаКонфигурацию = Конфигурация.ОтветственныйЗаКонфигурацию;
	
	Если СсылкаНаОбъект.Ответственный = ОтветственныйЗаКонфигурацию Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.СтруктураКонфигурации");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Объект = СсылкаНаОбъект.ПолучитьОбъект();
		Объект.Ответственный = ОтветственныйЗаКонфигурацию;
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru='Не удалось установить ответственного за конфигурацию ""%1""
			|в структуре конфигурации по причине:%2%3'");
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, Конфигурация.Наименование, Символы.ПС, ПодробноеПредставлениеОшибки);
		
		Зафиксировать(Конфигурация, УровеньОшибка, ТекстОшибки, СтруктураПроверки.ЖурналПроверки,
			СтруктураПроверки.ТаблицаЖурнала);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПримененияРасширения

Процедура УдалитьОшибкиПроверкиПримененияРасширения()
	
	НаборЗаписей = РегистрыСведений.ОшибкиПримененияРасширений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Конфигурация.Установить(Конфигурация);
	НаборЗаписей.Отбор.Расширение.Установить(Расширение);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ЗаписатьОшибкиПроверкиПримененияРасширения(Знач РезультатПроверки) Экспорт
	
	ТекстОшибки = "";
	
	Если ПустаяСтрока(РезультатПроверки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	РезультатПроверки = СокрЛП(РезультатПроверки);
	
	ТекстОшибкиОперации = НСтр("ru='Операция не может быть выполнена, так как расширение конфигурации'");
	Если СтрНачинаетсяС(РезультатПроверки, ТекстОшибкиОперации) Тогда
		УдалитьОшибкиПроверкиПримененияРасширения();
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТаблицаОшибок = ПолучитьОшибкиПроверкиПримененияРасширения(РезультатПроверки);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиПримененияРасширений");
		ЭлементБлокировки.УстановитьЗначение("Конфигурация", Конфигурация);
		ЭлементБлокировки.УстановитьЗначение("Расширение", Расширение);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОшибкиПримененияРасширений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Конфигурация.Установить(Конфигурация);
		НаборЗаписей.Отбор.Расширение.Установить(Расширение);
		НаборЗаписей.Загрузить(ТаблицаОшибок);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось записать ошибки применения расширения по причине:%1%2'"),
			Символы.ПС,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПолучитьОшибкиПроверкиПримененияРасширения(РезультатПроверки)
	
	ТаблицаОшибок = Новый ТаблицаЗначений();
	ТаблицаОшибок.Колонки.Добавить("Конфигурация");
	ТаблицаОшибок.Колонки.Добавить("Расширение");
	ТаблицаОшибок.Колонки.Добавить("Объект");
	ТаблицаОшибок.Колонки.Добавить("Уточнение");
	
	Если ПустаяСтрока(РезультатПроверки) Тогда
		Возврат ТаблицаОшибок;
	КонецЕсли;
	
	ТипыОбъектов = ЗаполнитьТаблицуТиповОбъектов();
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.УстановитьТекст(РезультатПроверки);
	
	ОбъектКореньРасширения = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Типы.Конфигурация, Расширение);
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		СтрокаОшибки = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОшибки = СокрЛП(СтрокаОшибки);
		
		Если СтрНачинаетсяС(СтрокаОшибки, "/Z") Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСсылка = ПолучитьОбъектОшибкиПримененияРасширения(СтрокаОшибки, ТипыОбъектов);
		Если ОбъектСсылка.Пустая() Тогда
			// Если не удалось определить объектов, то регистрируем ошибки на корень расширения.
			ОбъектСсылка = ОбъектКореньРасширения;
		КонецЕсли;
		
		НоваяОшибка = ТаблицаОшибок.Добавить();
		НоваяОшибка.Конфигурация = Конфигурация;
		НоваяОшибка.Расширение = Расширение;
		НоваяОшибка.Объект = ОбъектСсылка;
		НоваяОшибка.Уточнение = СтрокаОшибки;
		
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПолучитьОбъектОшибкиПримененияРасширения(СтрокаОшибки, ТипыОбъектов)
	
	ПустаяСсылка = Справочники.СтруктураКонфигурации.ПустаяСсылка();
	
	ТекстОшибкиНачало = НСтр("ru='Значение контролируемого свойства'");
	ТекстОшибкиКонец = НСтр("ru='не совпадает со значением в расширяемой конфигурации'");
	ТекстОшибкиУОбъекта = НСтр("ru='у объекта'");
	СтрДлинаТекстОшибкиУОбъекта = СтрДлина(ТекстОшибкиУОбъекта);
	
	Если (СтрНайти(СтрокаОшибки, ТекстОшибкиНачало) = 0)
	 ИЛИ (НЕ СтрЗаканчиваетсяНа(СтрокаОшибки, ТекстОшибкиКонец)) Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	ПозицияТекстаУОбъекта = СтрНайти(СтрокаОшибки, ТекстОшибкиУОбъекта);
	Если ПозицияТекстаУОбъекта = 0 Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	ПозицияТекстаНеСовпадает = СтрНайти(СтрокаОшибки, ТекстОшибкиКонец);
	Если ПозицияТекстаНеСовпадает = 0 Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	ПозицияТекстаУОбъекта = ПозицияТекстаУОбъекта + СтрДлинаТекстОшибкиУОбъекта;
	
	ОбъектПуть = Сред(СтрокаОшибки, ПозицияТекстаУОбъекта, ПозицияТекстаНеСовпадает - ПозицияТекстаУОбъекта);
	Если ПустаяСтрока(ОбъектПуть) Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	ОбъектСсылка = ПолучитьСсылкуНаОбъектПоПути(Версия, СокрЛП(ОбъектПуть), ТипыОбъектов, Расширение);
	
	Возврат ОбъектСсылка;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСведенийОРолях

// Получает данные:
//   о назначении ролей;
//   о ролевой настройке видимости интерфейса (КИ, КИ основного раздела, рабочей области начальной страницы);
//   о правах ролей
// и записывает их в регистр сведений.
//
Функция ЗаполнитьСведенияОРолях(КаталогВыгрузкиXML) Экспорт
	
	ЗаполнитьНазначениеРолей();
	
	ЗаполнитьРолевуюНастройкуВидимостиИнтерфейса(КаталогВыгрузкиXML);
	
	ЗаполнитьПраваРолей(КаталогВыгрузкиXML);
	
КонецФункции

Функция ЗаполнитьПраваРолей(КаталогВыгрузкиXML)
	
	СоответствияОбъектов = Новый Соответствие;
	
	СписокПравПоТипуОбъекта = ПолучитьСписокПравПоТипуОбъекта();
	СоответствияНазванийПрав = ПолучитьСоответствияНазванийПрав();
	ИнициализироватьТаблицуТиповОбъектов();
	
	СтруктураТаблицПравПоУмолчанию = СформироватьСтруктуруТаблицПравПоУмолчанию();
	
	ОчиститьЗначенияФлажковРолей();
	
	ТаблицаРолей = ПолучитьТаблицуРолей();
	ВсегоОбъектов = ТаблицаРолей.Количество();
	Если ВсегоОбъектов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка ролей (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	НомерОбъекта = 0;
	ПроцентОбработанныхОбъектов = 0;
	
	Для Каждого ОбъектРоль Из ТаблицаРолей Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НомерОбъекта = НомерОбъекта + 1;
		
		РольСсылка = ОбъектРоль.Ссылка;
		РольПуть = ОбъектРоль.Путь;
		
		#Если Клиент Тогда
		ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		ИмяФайла = СтрШаблон("Roles\%1\Ext\Rights.xml", ОбъектРоль.Наименование);
		
		ПутьФайла = КаталогВыгрузкиXML + ИмяФайла;
		Если НЕ ФайлСуществует(ПутьФайла) Тогда
			ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Не существует файл роли: ""%1""'"), ПутьФайла);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
			
			Продолжить;
		КонецЕсли;
		
		НастройкиРоли = ПолучитьДополнительныеНастройкиРоли(ПутьФайла);
		ЗаписатьДополнительныеНастройкиРоли(РольСсылка, НастройкиРоли);
		ЗаписатьПраваОбъектовИзXMLФайлаРолей(РольСсылка, ПутьФайла, Версия, НастройкиРоли, СтруктураТаблицПравПоУмолчанию);
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция СформироватьСтруктуруТаблицПравПоУмолчанию()
	
	ТаблицаОбъектов = ПолучитьСписокОбъектовКонфигурацииИмеющиеПрава(Версия);
	СоответствиеТиповОбъектов = СформироватьСоответствиеСамостоятельныхТиповОбъектов();
	
	ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей = СоздатьТаблицуПолномочий().СкопироватьКолонки();
	ПраваДляНовыхОбъектов = ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей.Скопировать();
	ПраваДляРеквизитовТабличныхЧастей = ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей.Скопировать();
	ФлагиНеУстановлены = ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей.Скопировать();
	
	Соответствие = Новый Соответствие;
	Счет = 0;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
		
		Путь = СтрокаТаблицы.Путь + " " + СтрокаТаблицы.ТипОбъекта;
		
		ЗаполнитьСтрокуТаблицыПравПоУмолчанию(ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей, СтрокаТаблицы, Путь,
			Истина, Истина, СоответствиеТиповОбъектов);
		ЗаполнитьСтрокуТаблицыПравПоУмолчанию(ПраваДляНовыхОбъектов, СтрокаТаблицы, Путь, Истина, Ложь,
			СоответствиеТиповОбъектов);
		ЗаполнитьСтрокуТаблицыПравПоУмолчанию(ПраваДляРеквизитовТабличныхЧастей, СтрокаТаблицы, Путь, Ложь, Истина,
			СоответствиеТиповОбъектов);
		ЗаполнитьСтрокуТаблицыПравПоУмолчанию(ФлагиНеУстановлены, СтрокаТаблицы, Путь, Ложь, Ложь,
			СоответствиеТиповОбъектов);
		
		Соответствие.Вставить(Путь, Счет);
		Счет = Счет + 1;
		
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей",
		ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей);
	СтруктураТаблиц.Вставить("ПраваДляНовыхОбъектов", ПраваДляНовыхОбъектов);
	СтруктураТаблиц.Вставить("ПраваДляРеквизитовТабличныхЧастей", ПраваДляРеквизитовТабличныхЧастей);
	СтруктураТаблиц.Вставить("ФлагиНеУстановлены", ФлагиНеУстановлены);
	СтруктураТаблиц.Вставить("СоответствиеДляПоискаСтрокТаблицы", Соответствие);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура ЗаполнитьСтрокуТаблицыПравПоУмолчанию(Таблица, СтрокаТаблицы, Путь, ПраваДляНовыхОбъектов,
	ПраваДляРеквизитовТабличныхЧастей, СоответствиеТиповОбъектов)
	
	ЗначенияПравПоУмолчанию = рольОбъектПраваПоУмолчаниюОпределить(СтрокаТаблицы.ТипОбъекта, Путь,
		ПраваДляНовыхОбъектов, ПраваДляРеквизитовТабличныхЧастей, СоответствиеТиповОбъектов);
	СтрокаОбъекта = Таблица.Добавить();
	Если ЗначенияПравПоУмолчанию <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаОбъекта, ЗначенияПравПоУмолчанию);
	КонецЕсли;
	СтрокаОбъекта.Объект = СтрокаТаблицы.Ссылка;
	СтрокаОбъекта.ТипОбъекта = СтрокаТаблицы.ТипОбъекта;
	
КонецПроцедуры

Процедура ОчиститьЗначенияФлажковРолей()
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияФлажковРолей");
		ЭлементБлокировки.УстановитьЗначение("Версия", Версия);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗначенияФлажковРолей.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.ЗначенияФлажковРолей КАК ЗначенияФлажковРолей
		|ГДЕ
		|	ЗначенияФлажковРолей.Версия = &Версия
		|	И ЗначенияФлажковРолей.Роль.Расширение = &Расширение";
		
		Запрос.УстановитьПараметр("Расширение", Расширение);
		Запрос.УстановитьПараметр("Версия", Версия);
		ТаблицаРолей = Запрос.Выполнить().Выгрузить();
		ТаблицаРолей.Свернуть("Роль");
		
		НаборЗаписей = РегистрыСведений.ЗначенияФлажковРолей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		
		Для Каждого СтрокаТаблицыРолей Из ТаблицаРолей Цикл
			НаборЗаписей.Отбор.Роль.Установить(СтрокаТаблицыРолей.Роль);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьТаблицуРолей()
	
	ЗапросСоставаОбъектов = Новый Запрос;
	ЗапросСоставаОбъектов.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.ТипОбъекта = &ТипОбъекта
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	И СтруктураКонфигурации.СобраныСведения
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	ЗапросСоставаОбъектов.УстановитьПараметр("Расширение", Расширение);
	ЗапросСоставаОбъектов.УстановитьПараметр("Владелец", Версия);
	ЗапросСоставаОбъектов.УстановитьПараметр("ТипОбъекта", Типы.Роль);
	
	ТаблицаРолей = ЗапросСоставаОбъектов.Выполнить().Выгрузить();
	
	Возврат ТаблицаРолей;
	
КонецФункции

Функция ПолучитьСписокПравПоТипуОбъекта()
	
	СписокПравПоТипуОбъекта = Новый Соответствие;
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.СтандартныйРеквизит, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Реквизит, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Измерение, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Ресурс, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ТабличнаяЧасть, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.СтандартнаяТабличнаяЧасть, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Команда, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Подсистема, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Получение", Истина);
	СписокПрав.Вставить("Установка", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ПараметрСеанса, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ОбщийРеквизит, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ПланОбмена, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.КритерийОтбора, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ОбщаяФорма, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ОбщаяУправляемаяФорма, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ОбщаяКоманда, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Использование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Интерфейс, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Использование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Операция, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Использование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.МетодШаблонаURL, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Константа, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Справочник, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Проведение", Истина);
	СписокПрав.Вставить("ОтменаПроведения", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ИнтерактивноеПроведение", Истина);
	СписокПрав.Вставить("ИнтерактивноеПроведениеНеОперативное", Истина);
	СписокПрав.Вставить("ИнтерактивнаяОтменаПроведения", Истина);
	СписокПрав.Вставить("ИнтерактивноеИзменениеПроведенных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Документ, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ЖурналДокументов, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Использование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Отчет, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Использование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Обработка, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ПланВидовХарактеристик, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ПланСчетов, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.ПланВидовРасчета, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("УправлениеИтогами", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.РегистрСведений, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("УправлениеИтогами", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.РегистрНакопления, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("УправлениеИтогами", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.РегистрБухгалтерии, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.РегистрРасчета, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПрав.Вставить("ИнтерактивнаяАктивация", Истина);
	СписокПрав.Вставить("Старт", Истина);
	СписокПрав.Вставить("ИнтерактивныйСтарт", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.БизнесПроцесс, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Чтение", Истина);
	СписокПрав.Вставить("Добавление", Истина);
	СписокПрав.Вставить("Изменение", Истина);
	СписокПрав.Вставить("Удаление", Истина);
	СписокПрав.Вставить("Просмотр", Истина);
	СписокПрав.Вставить("ИнтерактивноеДобавление", Истина);
	СписокПрав.Вставить("Редактирование", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдаление", Истина);
	СписокПрав.Вставить("ИнтерактивнаяПометкаУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Истина);
	СписокПрав.Вставить("ИнтерактивноеУдалениеПомеченных", Истина);
	СписокПрав.Вставить("ВводПоСтроке", Истина);
	СписокПрав.Вставить("ИнтерактивнаяАктивация", Истина);
	СписокПрав.Вставить("Выполнение", Истина);
	СписокПрав.Вставить("ИнтерактивноеВыполнение", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Задача, СписокПрав);
	
	СписокПрав = Новый Структура;
	СписокПрав.Вставить("Администрирование", Истина);
	СписокПрав.Вставить("АдминистрированиеДанных", Истина);
	СписокПрав.Вставить("ОбновлениеКонфигурацииБазыДанных", Истина);
	СписокПрав.Вставить("МонопольныйРежим", Истина);
	СписокПрав.Вставить("АктивныеПользователи", Истина);
	СписокПрав.Вставить("ЖурналРегистрации", Истина);
	СписокПрав.Вставить("ТонкийКлиент", Истина);
	СписокПрав.Вставить("ВебКлиент", Истина);
	СписокПрав.Вставить("ТолстыйКлиент", Истина);
	СписокПрав.Вставить("ВнешнееСоединение", Истина);
	СписокПрав.Вставить("Automation", Истина);
	СписокПрав.Вставить("РежимВсеФункции", Истина);
	СписокПрав.Вставить("СохранениеДанныхПользователя", Истина);
	СписокПрав.Вставить("АдминистрированиеРасширенийКонфигурации", Истина);
	СписокПрав.Вставить("ИнтерактивноеОткрытиеВнешнихОбработок", Истина);
	СписокПрав.Вставить("ИнтерактивноеОткрытиеВнешнихОтчетов", Истина);
	СписокПрав.Вставить("Вывод", Истина);
	СписокПравПоТипуОбъекта.Вставить(Типы.Конфигурация, СписокПрав);
	
	Возврат СписокПравПоТипуОбъекта;
	
КонецФункции

// Функция возвращает пустую таблицу значений установленной структуры
// для хранения полномочий по объектам для конкретной роли.
//
Функция СоздатьТаблицуПолномочий()
	
	ТаблицаПолномочий = Новый ТаблицаЗначений;
	ТипСправочникСсылка = Новый ОписаниеТипов("СправочникСсылка.СтруктураКонфигурации");
	ТипПеречислениеТипыОбъектов = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектов");
	ТипБулево = Новый ОписаниеТипов("Булево");
	Колонки = ТаблицаПолномочий.Колонки;
	
	Колонки.Добавить("Объект",                                						ТипСправочникСсылка);
	Колонки.Добавить("ТипОбъекта",                            						ТипПеречислениеТипыОбъектов);
	Колонки.Добавить("Чтение",                                						ТипБулево);
	Колонки.Добавить("Добавление",                            						ТипБулево);
	Колонки.Добавить("Изменение",                             						ТипБулево);
	Колонки.Добавить("Удаление",                              						ТипБулево);
	Колонки.Добавить("Проведение",                            						ТипБулево);
	Колонки.Добавить("ОтменаПроведения",                      						ТипБулево);
	Колонки.Добавить("Просмотр",                              						ТипБулево);
	Колонки.Добавить("ИнтерактивноеДобавление",               						ТипБулево);
	Колонки.Добавить("Редактирование",                        						ТипБулево);
	Колонки.Добавить("ИнтерактивнаяПометкаУдаления",          						ТипБулево);
	Колонки.Добавить("ИнтерактивноеСнятиеПометкиУдаления",    						ТипБулево);
	Колонки.Добавить("ИнтерактивноеУдалениеПомеченных",       						ТипБулево);
	Колонки.Добавить("ИнтерактивноеПроведение",               						ТипБулево);
	Колонки.Добавить("ИнтерактивноеПроведениеНеОперативное",  						ТипБулево);
	Колонки.Добавить("ИнтерактивнаяОтменаПроведения",         						ТипБулево);
	Колонки.Добавить("ИнтерактивноеИзменениеПроведенных",     						ТипБулево);
	Колонки.Добавить("ВводПоСтроке",                          						ТипБулево);
	Колонки.Добавить("УправлениеИтогами",                     						ТипБулево);
	Колонки.Добавить("Использование",                         						ТипБулево);
	Колонки.Добавить("ИнтерактивноеУдаление",                 						ТипБулево);
	Колонки.Добавить("Администрирование",                     						ТипБулево);
	Колонки.Добавить("МонопольныйРежим",                      						ТипБулево);
	Колонки.Добавить("АктивныеПользователи",                  						ТипБулево);
	Колонки.Добавить("ЖурналРегистрации",                     						ТипБулево);
	Колонки.Добавить("ВнешнееСоединение",                     						ТипБулево);
	Колонки.Добавить("Automation",                            						ТипБулево);
	Колонки.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов",   						ТипБулево);
	Колонки.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок", 						ТипБулево);
	Колонки.Добавить("Получение",                             						ТипБулево);
	Колонки.Добавить("Установка",                             						ТипБулево);
	Колонки.Добавить("ИнтерактивнаяАктивация",                						ТипБулево);
	Колонки.Добавить("Старт",                                 						ТипБулево);
	Колонки.Добавить("ИнтерактивныйСтарт",                    						ТипБулево);
	Колонки.Добавить("Выполнение",                            						ТипБулево);
	Колонки.Добавить("ИнтерактивноеВыполнение",               						ТипБулево);
	Колонки.Добавить("Вывод",                                 						ТипБулево);
	Колонки.Добавить("ОбновлениеКонфигурацииБазыДанных",      						ТипБулево);
	
	Колонки.Добавить("ИнтерактивноеУдалениеПредопределенныхДанных", 				ТипБулево);
	Колонки.Добавить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", 			ТипБулево);
	Колонки.Добавить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", 	ТипБулево);
	Колонки.Добавить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", 		ТипБулево);
	
	Колонки.Добавить("АдминистрированиеДанных", 									ТипБулево);
	Колонки.Добавить("ТонкийКлиент", 												ТипБулево);
	Колонки.Добавить("ВебКлиент",													ТипБулево);
	Колонки.Добавить("ТолстыйКлиент", 												ТипБулево);
	Колонки.Добавить("РежимВсеФункции", 											ТипБулево);
	Колонки.Добавить("СохранениеДанныхПользователя", 								ТипБулево);
	Колонки.Добавить("АдминистрированиеРасширенийКонфигурации",						ТипБулево);
	
	Возврат ТаблицаПолномочий;

КонецФункции

Функция СоздатьТаблицуОграниченийДоступа()
	
	ТаблицаОграничений = Новый ТаблицаЗначений;
	ТипСправочникСсылка = Новый ОписаниеТипов("СправочникСсылка.СтруктураКонфигурации");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	Колонки = ТаблицаОграничений.Колонки;
	
	Колонки.Добавить("Объект", ТипСправочникСсылка);
	Колонки.Добавить("Право", ТипСтрока);
	Колонки.Добавить("Поле", ТипСтрока);
	Колонки.Добавить("Ограничение", ТипСтрока);
	
	Возврат ТаблицаОграничений;
	
КонецФункции

// Возвращает значения флажков ролей:
// "УстанавливатьПраваДляНовыхОбъектов",
// "УстанавливатьПраваДляРеквизитовТабличныхЧастей",
// "НезависимыеПраваПодчиненныхОбъектов".
//
Функция ПолучитьДополнительныеНастройкиРоли(ПутьКФайлуXML)
	
	СтруктураНастройкиРоли = Новый Структура;
	СтруктураНастройкиРоли.Вставить("УстанавливатьПраваДляНовыхОбъектов", Ложь);
	СтруктураНастройкиРоли.Вставить("УстанавливатьПраваДляРеквизитовТабличныхЧастей", Истина);
	СтруктураНастройкиРоли.Вставить("НезависимыеПраваПодчиненныхОбъектов", Истина);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		ТипУзла = ЧтениеXML.ТипУзла;
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяЭлемента = ЧтениеXML.Имя;
			Если ИмяЭлемента = "setForNewObjects" Тогда
				Значение = ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла, Ложь);
				СтруктураНастройкиРоли.УстанавливатьПраваДляНовыхОбъектов = Булево(Значение);
			ИначеЕсли ИмяЭлемента = "setForAttributesByDefault" Тогда
				Значение = ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла, Истина);
				СтруктураНастройкиРоли.УстанавливатьПраваДляРеквизитовТабличныхЧастей = Булево(Значение);
			ИначеЕсли ИмяЭлемента = "independentRightsOfChildObjects" Тогда
				Значение = ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла, Истина);
				СтруктураНастройкиРоли.НезависимыеПраваПодчиненныхОбъектов = Булево(Значение);
			ИначеЕсли ИмяЭлемента = "object" Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат СтруктураНастройкиРоли;
	
КонецФункции

// Записывает в регистр сведений значения флажков ролей:
// "УстанавливатьПраваДляНовыхОбъектов",
// "УстанавливатьПраваДляРеквизитовТабличныхЧастей",
// "НезависимыеПраваПодчиненныхОбъектов".
//
Процедура ЗаписатьДополнительныеНастройкиРоли(РольСсылка, НастройкиРоли)
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияФлажковРолей");
		ЭлементБлокировки.УстановитьЗначение("Версия", Версия);
		ЭлементБлокировки.УстановитьЗначение("Роль", РольСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЗначенияФлажковРолей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		НаборЗаписей.Отбор.Роль.Установить(РольСсылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Версия = Версия;
		НоваяЗапись.Роль = РольСсылка;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, НастройкиРоли);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Функция возвращает значение чтения XML.
//
Функция ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла, ЗначениеПоУмолчанию = "")
	
	Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	Если ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Значение = ЧтениеXML.Значение;
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция рольXMLОграничениеПрочитать(ЧтениеXML, ТаблицаОграничений, ОбъектСсылка, ИмяПрава)
	
	МассивПолей = Новый Массив;
	Ограничение = "";
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ТипУзла = ЧтениеXML.ТипУзла;
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.Имя = "field" Тогда
				Поле = ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла);
				МассивПолей.Добавить(Поле);
			ИначеЕсли ЧтениеXML.Имя = "condition" Тогда
				Ограничение = ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла);
			КонецЕсли;
			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеXML.Имя = "restrictionByCondition" Тогда
				
				Если МассивПолей.Количество() = 0 Тогда
					МассивПолей.Добавить("<Прочие поля>");
				КонецЕсли;
				
				Для Каждого Поле Из МассивПолей Цикл
					НовоеОграничение = ТаблицаОграничений.Добавить();
					
					НовоеОграничение.Объект = ОбъектСсылка;
					НовоеОграничение.Право = ИмяПрава;
					НовоеОграничение.Поле = Поле;
					НовоеОграничение.Ограничение = Ограничение;
				КонецЦикла;
				
				Возврат "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция рольXMLПравоПрочитать(ЧтениеXML, ПраваОбъектов, СтрокаОбъекта, ТаблицаОграничений)
	
	ИмяПраваИзXML = "";
	ИмяПраваИзСоответствия = Неопределено;
	ЗначениеПрава = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ТипУзла = ЧтениеXML.ТипУзла;
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.Имя = "name" Тогда
				ИмяПраваИзXML = ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла);
				СоответствияНазванийПрав.Свойство(ИмяПраваИзXML, ИмяПраваИзСоответствия);
			ИначеЕсли ЧтениеXML.Имя = "value" Тогда
				ЗначениеПрава = XMLЗначение(Тип("Булево"), ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла));
			ИначеЕсли ЧтениеXML.Имя = "restrictionByCondition" Тогда
				ИмяПрава = ?(ПустаяСтрока(ИмяПраваИзСоответствия), ИмяПраваИзXML, ИмяПраваИзСоответствия);
				рольXMLОграничениеПрочитать(ЧтениеXML, ТаблицаОграничений, СтрокаОбъекта.Объект, ИмяПрава);
			КонецЕсли;
			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеXML.Имя = "right" Тогда
				
				Если СтрокаОбъекта = Неопределено Тогда
					Возврат "";
				КонецЕсли;
				
				Если ИмяПраваИзСоответствия <> Неопределено Тогда
					СтрокаОбъекта[ИмяПраваИзСоответствия] = ЗначениеПрава;
				КонецЕсли;
				
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция рольОбъектПоИмениНайти(Знач ПутьОбъектаАнгл, ПраваОбъектов, СоответствиеПутейИНомеровСтрок)
	
	ПутьОбъекта = СоответствияОбъектов.Получить(ПутьОбъектаАнгл);
	Если ПутьОбъекта = Неопределено Тогда
		ПутьОбъекта = ПолучитьПутьОбъектаПоИмениИзФайлаВыгрузки(ТаблицаТиповОбъектов, ПутьОбъектаАнгл,, Истина);
	КонецЕсли;
	
	Если ПутьОбъекта = "Конфигурация" Тогда
		СтрокаОбъекта = ПраваОбъектов.Найти(Типы.Конфигурация, "ТипОбъекта");
	Иначе
		НомерСтроки = СоответствиеПутейИНомеровСтрок[ПутьОбъекта];
		Если НомерСтроки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаОбъекта = ПраваОбъектов[НомерСтроки];
	КонецЕсли;
	
	Если СтрокаОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствияОбъектов.Вставить(ПутьОбъектаАнгл, ПутьОбъекта);
	
	Возврат СтрокаОбъекта;
	
КонецФункции

Функция рольXMLОбъектПрочитать(ЧтениеXML, ПраваОбъектов, НастройкиРоли, ТаблицаОграничений,
	СоответствиеПутейИНомеровСтрок)
	
	СтрокаОбъекта = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ТипУзла = ЧтениеXML.ТипУзла;
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.Имя = "name" Тогда
				ПутьОбъекта = ПрочитатьЗначениеXML(ЧтениеXML, ТипУзла);
				СтрокаОбъекта = рольОбъектПоИмениНайти(ПутьОбъекта, ПраваОбъектов, СоответствиеПутейИНомеровСтрок);
				
				Если СтрокаОбъекта = Неопределено Тогда
					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "object" Тогда
							Возврат "";
						КонецЕсли;
					КонецЦикла;;
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.Имя = "right" Тогда
				рольXMLПравоПрочитать(ЧтениеXML, ПраваОбъектов, СтрокаОбъекта, ТаблицаОграничений);
			КонецЕсли;
			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеXML.Имя = "object" Тогда
				Возврат "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция рольXMLПрочитать(ЧтениеXML, ПраваОбъектов, НастройкиРоли, ТаблицаОграничений, СоответствиеПутейИНомеровСтрок)
	
	Пока ЧтениеXML.Прочитать() Цикл
		ТипУзла = ЧтениеXML.ТипУзла;
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "object" Тогда
				рольXMLОбъектПрочитать(ЧтениеXML, ПраваОбъектов, НастройкиРоли, ТаблицаОграничений, СоответствиеПутейИНомеровСтрок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция рольОбъектПраваПоУмолчаниюОпределить(ТипОбъекта, Знач ПутьОбъекта, УстанавливатьПраваДляНовыхОбъектов,
	УстанавливатьПраваДляРеквизитовТабличныхЧастей, СоответствиеТиповОбъектов)
	
	Если СоответствиеТиповОбъектов[ТипОбъекта] <> Неопределено Тогда
		ФлагОбъект = Истина;
	Иначе
		// Если объект состоит из 2-х элементов (1 точка в полном пути), значит, это объект верхнего уровня.
		// Для него также права по умолчанию определяются в зависимости от флага роли "Устанавливать права для новых объектов".
		ПутьОбъекта = ?(СтрНачинаетсяС(ПутьОбъекта, "Общие."), Сред(ПутьОбъекта, 7), ПутьОбъекта);
		ФлагОбъект = (СтрЧислоВхождений(ПутьОбъекта, ".") = 1);
	КонецЕсли;
	
	// Определяем, по какому флагу роли определять права по умолчанию.
	ФлагПраво = ?(ФлагОбъект, УстанавливатьПраваДляНовыхОбъектов,
		УстанавливатьПраваДляРеквизитовТабличныхЧастей);
	
	// Определяем права по умолчанию.
	Возврат ?(ФлагПраво, СписокПравПоТипуОбъекта[ТипОбъекта], Неопределено);
	
КонецФункции

Функция СформироватьСоответствиеСамостоятельныхТиповОбъектов()
	
	// Объекты этих типы считаем самостоятельными объектами,
	// для них права по умолчанию определяются в зависимости от флага роли "Устанавливать права для новых объектов".
	СоответствиеТиповОбъектов = Новый Соответствие();
	СоответствиеТиповОбъектов.Вставить(Типы.Конфигурация, Типы.Конфигурация);
	СоответствиеТиповОбъектов.Вставить(Типы.Подсистема, Типы.Подсистема);
	СоответствиеТиповОбъектов.Вставить(Типы.Команда, Типы.Команда);
	
	Возврат СоответствиеТиповОбъектов;
	
КонецФункции

Функция ПолучитьПраваОбъектовИзXMLФайлаРолей(ПутьКФайлуXML, Версия, НастройкиРоли, СтруктураТаблицПравПоУмолчанию)
	
	СтруктураДанных = Новый Структура;
	
	Если НЕ ФайлСуществует(ПутьКФайлуXML) Тогда
		СтруктураДанных.Вставить("ПраваОбъектов", Неопределено);
		СтруктураДанных.Вставить("ОграниченияДоступа", Неопределено);
		
		Возврат СтруктураДанных;
	КонецЕсли;
	
	Если НастройкиРоли.УстанавливатьПраваДляНовыхОбъектов
		И НастройкиРоли.УстанавливатьПраваДляРеквизитовТабличныхЧастей Тогда
		Таблица = СтруктураТаблицПравПоУмолчанию.ПраваДляНовыхОбъектовПраваДляРеквизитовТабличныхЧастей;
	ИначеЕсли НастройкиРоли.УстанавливатьПраваДляНовыхОбъектов Тогда
		Таблица = СтруктураТаблицПравПоУмолчанию.ПраваДляНовыхОбъектов;
	ИначеЕсли НастройкиРоли.УстанавливатьПраваДляРеквизитовТабличныхЧастей Тогда
		Таблица = СтруктураТаблицПравПоУмолчанию.ПраваДляРеквизитовТабличныхЧастей;
	Иначе
		Таблица = СтруктураТаблицПравПоУмолчанию.ФлагиНеУстановлены;
	КонецЕсли;
	
	ПраваОбъектов = Таблица.Скопировать();
	СоответствиеПутейИНомеровСтрок = СтруктураТаблицПравПоУмолчанию.СоответствиеДляПоискаСтрокТаблицы;
	
	ТаблицаОграничений = СоздатьТаблицуОграниченийДоступа();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуXML);
	
	рольXMLПрочитать(ЧтениеXML, ПраваОбъектов, НастройкиРоли, ТаблицаОграничений, СоответствиеПутейИНомеровСтрок);
	
	СтруктураДанных.Вставить("ПраваОбъектов", ПраваОбъектов);
	СтруктураДанных.Вставить("ОграниченияДоступа", ТаблицаОграничений);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ЗаписатьПраваОбъектовИзXMLФайлаРолей(РольСсылка, ПутьКФайлуXML, Версия, НастройкиРоли,
	СтруктураТаблицПравПоУмолчанию)
	
	СтруктураДанных = ПолучитьПраваОбъектовИзXMLФайлаРолей(ПутьКФайлуXML, Версия, НастройкиРоли,
		СтруктураТаблицПравПоУмолчанию);
	
	НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСодержания.Отбор.Объект.Установить(РольСсылка);
	
	// Добавим информацию о правах.
	ПраваОбъектов		= СтруктураДанных.ПраваОбъектов;
	Если ПраваОбъектов = Неопределено Тогда
		ПраваОбъектов = СоздатьТаблицуПолномочий();
	КонецЕсли;
	ПраваОбъектов.Колонки.Удалить("ТипОбъекта");
	
	НоваяЗапись			= НаборЗаписейСодержания.Добавить();
	НоваяЗапись.Объект	= РольСсылка;
	НоваяЗапись.Имя		= Перечисления.ИдентификаторыСодержанияОбъектов.Права;
	НоваяЗапись.Значение = ВернутьХранилищеЗначения(ПраваОбъектов);
	
	// Добавим информацию об ограничениях доступа.
	ОграниченияДоступа	= СтруктураДанных.ОграниченияДоступа;
	
	НоваяЗапись			= НаборЗаписейСодержания.Добавить();
	НоваяЗапись.Объект	= РольСсылка;
	НоваяЗапись.Имя		= Перечисления.ИдентификаторыСодержанияОбъектов.ОграниченияДоступа;
	НоваяЗапись.Значение = ВернутьХранилищеЗначения(ОграниченияДоступа);
	
	// Запишем информацию в регистр.
	НаборЗаписейСодержания.Записать(Истина);
	
КонецФункции

Функция ПолучитьСписокОбъектовКонфигурацииИмеющиеПрава(Версия)
	
	// Сначала получаем исключения для типов объектов, которые не имеют прав и подчиненных объектов.
	// Т.к. права на эти объекты не проверяются правилами на текущий момент.
	// В список исключений не включен тип "Команда", т.к. объекты этого типа проверяются правилами проверки прав ролей.
	ТипыОбъектовИсключения = Новый СписокЗначений;
	ТипыОбъектовИсключения.Добавить(Типы.ВеткаМетаданных);
	ТипыОбъектовИсключения.Добавить(Типы.Макет);
	ТипыОбъектовИсключения.Добавить(Типы.Роль);
	ТипыОбъектовИсключения.Добавить(Типы.ПодпискаНаСобытия);
	ТипыОбъектовИсключения.Добавить(Типы.РегламентноеЗадание);
	ТипыОбъектовИсключения.Добавить(Типы.ФункциональнаяОпция);
	ТипыОбъектовИсключения.Добавить(Типы.ПараметрФункциональнойОпции);
	ТипыОбъектовИсключения.Добавить(Типы.ОпределяемыйТип);
	ТипыОбъектовИсключения.Добавить(Типы.ХранилищеНастроек);
	ТипыОбъектовИсключения.Добавить(Типы.ГруппаКоманд);
	ТипыОбъектовИсключения.Добавить(Типы.ОбщийМакет);
	ТипыОбъектовИсключения.Добавить(Типы.ОбщийМодуль);
	ТипыОбъектовИсключения.Добавить(Типы.Картинка);
	ТипыОбъектовИсключения.Добавить(Типы.ПакетXDTO);
	ТипыОбъектовИсключения.Добавить(Типы.WebСервис);
	ТипыОбъектовИсключения.Добавить(Типы.HTTPСервис);
	ТипыОбъектовИсключения.Добавить(Типы.WSСсылка);
	ТипыОбъектовИсключения.Добавить(Типы.ЭлементСтиля);
	ТипыОбъектовИсключения.Добавить(Типы.Стиль);
	ТипыОбъектовИсключения.Добавить(Типы.Перечисление);
	ТипыОбъектовИсключения.Добавить(Типы.УправляемаяФорма);
	ТипыОбъектовИсключения.Добавить(Типы.Форма);
	ТипыОбъектовИсключения.Добавить(Типы.ПредопределенныйЭлемент);
	ТипыОбъектовИсключения.Добавить(Типы.Графа);
	ТипыОбъектовИсключения.Добавить(Типы.Параметр);
	ТипыОбъектовИсключения.Добавить(Типы.ШаблонURL);
	ТипыОбъектовИсключения.Добавить(Типы.МетодШаблонаURL);
	ТипыОбъектовИсключения.Добавить(Типы.Реквизит);
	ТипыОбъектовИсключения.Добавить(Типы.СтандартныйРеквизит);
	ТипыОбъектовИсключения.Добавить(Типы.ТабличнаяЧасть);
	ТипыОбъектовИсключения.Добавить(Типы.СтандартнаяТабличнаяЧасть);
	ТипыОбъектовИсключения.Добавить(Типы.Измерение);
	ТипыОбъектовИсключения.Добавить(Типы.Ресурс);
	ТипыОбъектовИсключения.Добавить(Типы.Операция);
	ТипыОбъектовИсключения.Добавить(Типы.Значение);
	
	ЗапросСоставаОбъектов = Новый Запрос;
	ЗапросСоставаОбъектов.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК ТипОбъекта,
	|	СтруктураКонфигурации.Путь КАК Путь,
	|	СтруктураКонфигурации.Родитель.Наименование КАК РодительНаименование,
	|	СтруктураКонфигурации.Родитель.ТипОбъекта КАК РодительТипОбъекта
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И НЕ (СтруктураКонфигурации.ТипОбъекта В(&ТипОбъекта))
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	И НЕ СтруктураКонфигурации.Исключен
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления";
	
	ЗапросСоставаОбъектов.УстановитьПараметр("Расширение", Расширение);
	ЗапросСоставаОбъектов.УстановитьПараметр("Владелец", Версия);
	ЗапросСоставаОбъектов.УстановитьПараметр("ТипОбъекта", ТипыОбъектовИсключения);
	
	ТаблицаОбъектов = ЗапросСоставаОбъектов.Выполнить().Выгрузить();
	ТаблицаОбъектов.Индексы.Добавить("Ссылка");
	ТаблицаОбъектов.Индексы.Добавить("Путь");
	ТаблицаОбъектов.Индексы.Добавить("ТипОбъекта");
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

Функция ПолучитьСоответствияНазванийПрав()
	
	Если ТипЗнч(СоответствияНазванийПрав) = Тип("Структура") Тогда
		Возврат СоответствияНазванийПрав;
	КонецЕсли;
	
	СоответствияНазванийПрав = Новый Структура;
	СоответствияНазванийПрав.Вставить("ActiveUsers", 								"АктивныеПользователи");
	СоответствияНазванийПрав.Вставить("Administration", 							"Администрирование");
	СоответствияНазванийПрав.Вставить("AllFunctionsMode", 							"РежимВсеФункции");
	СоответствияНазванийПрав.Вставить("Automation", 								"Automation");
	СоответствияНазванийПрав.Вставить("ConfigurationExtensionsAdministration", 		"АдминистрированиеРасширенийКонфигурации");
	СоответствияНазванийПрав.Вставить("DataAdministration", 						"АдминистрированиеДанных");
	СоответствияНазванийПрав.Вставить("Delete", 									"Удаление");
	СоответствияНазванийПрав.Вставить("Edit", 										"Редактирование");
	СоответствияНазванийПрав.Вставить("EventLog", 									"ЖурналРегистрации");
	СоответствияНазванийПрав.Вставить("ExclusiveMode", 								"МонопольныйРежим");
	СоответствияНазванийПрав.Вставить("Execute", 									"Выполнение");
	СоответствияНазванийПрав.Вставить("ExternalConnection", 						"ВнешнееСоединение");
	СоответствияНазванийПрав.Вставить("Get", 										"Получение");
	СоответствияНазванийПрав.Вставить("InputByString", 								"ВводПоСтроке");
	СоответствияНазванийПрав.Вставить("Insert", 									"Добавление");
	СоответствияНазванийПрав.Вставить("InteractiveActivate", 						"ИнтерактивнаяАктивация");
	СоответствияНазванийПрав.Вставить("InteractiveChangeOfPosted", 					"ИнтерактивноеИзменениеПроведенных");
	СоответствияНазванийПрав.Вставить("InteractiveClearDeletionMark", 				"ИнтерактивноеСнятиеПометкиУдаления");
	СоответствияНазванийПрав.Вставить("InteractiveClearDeletionMarkPredefinedData", "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных");
	СоответствияНазванийПрав.Вставить("InteractiveDelete", 							"ИнтерактивноеУдаление");
	СоответствияНазванийПрав.Вставить("InteractiveDeleteMarked", 					"ИнтерактивноеУдалениеПомеченных");
	СоответствияНазванийПрав.Вставить("InteractiveDeleteMarkedPredefinedData", 		"ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных");
	СоответствияНазванийПрав.Вставить("InteractiveDeletePredefinedData", 			"ИнтерактивноеУдалениеПредопределенныхДанных");
	СоответствияНазванийПрав.Вставить("InteractiveExecute", 						"ИнтерактивноеВыполнение");
	СоответствияНазванийПрав.Вставить("InteractiveInsert", 							"ИнтерактивноеДобавление");
	СоответствияНазванийПрав.Вставить("InteractiveOpenExtDataProcessors", 			"ИнтерактивноеОткрытиеВнешнихОбработок");
	СоответствияНазванийПрав.Вставить("InteractiveOpenExtReports", 					"ИнтерактивноеОткрытиеВнешнихОтчетов");
	СоответствияНазванийПрав.Вставить("InteractivePosting", 						"ИнтерактивноеПроведение");
	СоответствияНазванийПрав.Вставить("InteractivePostingRegular", 					"ИнтерактивноеПроведениеНеОперативное");
	СоответствияНазванийПрав.Вставить("InteractiveSetDeletionMark", 				"ИнтерактивнаяПометкаУдаления");
	СоответствияНазванийПрав.Вставить("InteractiveSetDeletionMarkPredefinedData", 	"ИнтерактивнаяПометкаУдаленияПредопределенныхДанных");
	СоответствияНазванийПрав.Вставить("InteractiveStart", 							"ИнтерактивныйСтарт");
	СоответствияНазванийПрав.Вставить("InteractiveUndoPosting", 					"ИнтерактивнаяОтменаПроведения");
	СоответствияНазванийПрав.Вставить("Output", 									"Вывод");
	СоответствияНазванийПрав.Вставить("Posting", 									"Проведение");
	СоответствияНазванийПрав.Вставить("Read", 										"Чтение");
	СоответствияНазванийПрав.Вставить("SaveUserData", 								"СохранениеДанныхПользователя");
	СоответствияНазванийПрав.Вставить("Set", 										"Установка");
	СоответствияНазванийПрав.Вставить("Start", 										"Старт");
	СоответствияНазванийПрав.Вставить("ThickClient", 								"ТолстыйКлиент");
	СоответствияНазванийПрав.Вставить("ThinClient", 								"ТонкийКлиент");
	СоответствияНазванийПрав.Вставить("TotalsControl", 								"УправлениеИтогами");
	СоответствияНазванийПрав.Вставить("UndoPosting", 								"ОтменаПроведения");
	СоответствияНазванийПрав.Вставить("Update", 									"Изменение");
	СоответствияНазванийПрав.Вставить("UpdateDataBaseConfiguration", 				"ОбновлениеКонфигурацииБазыДанных");
	СоответствияНазванийПрав.Вставить("Use", 										"Использование");
	СоответствияНазванийПрав.Вставить("View", 										"Просмотр");
	СоответствияНазванийПрав.Вставить("WebClient", 									"ВебКлиент");
	
	Возврат СоответствияНазванийПрав;
	
КонецФункции

Процедура ДобавитьНовыйОбъектБСП(ТаблицаОбъектовБСП, Путь, ТипОбъекта)
	
	МассивПути = СтрРазделить(Путь, ".");
	Наименование = МассивПути[МассивПути.ВГраница()];
	
	НоваяСтрока = ТаблицаОбъектовБСП.Добавить();
	НоваяСтрока.Путь = Путь;
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.ТипОбъекта = ТипОбъекта;
	
КонецПроцедуры

Функция ПолучитьТаблицуОбязательныхОбъектовБСП()
	
	ТаблицаОбъектовБСП = Новый ТаблицаЗначений;
	ТаблицаОбъектовБСП.Колонки.Добавить("Путь");
	ТаблицаОбъектовБСП.Колонки.Добавить("Наименование");
	ТаблицаОбъектовБСП.Колонки.Добавить("ТипОбъекта");
	
	ДобавитьНовыйОбъектБСП(ТаблицаОбъектовБСП, "Общие.Подсистемы.СтандартныеПодсистемы", Типы.Подсистема);
	ДобавитьНовыйОбъектБСП(ТаблицаОбъектовБСП, "Общие.ОбщиеМодули.СтандартныеПодсистемыСервер", Типы.ОбщийМодуль);
	ДобавитьНовыйОбъектБСП(ТаблицаОбъектовБСП, "Общие.ОбщиеМодули.ПодсистемыКонфигурацииПереопределяемый", Типы.ОбщийМодуль);
	ДобавитьНовыйОбъектБСП(ТаблицаОбъектовБСП, "Общие.ОбщиеМодули.ОбновлениеИнформационнойБазыБСП", Типы.ОбщийМодуль);
	
	Возврат ТаблицаОбъектовБСП;
	
КонецФункции

Функция КонфигурацияСодержитБСП()
	
	Результат = Истина;
	
	// Если нет хотя бы одного обязательного объекта, то считаем, что конфигурация не содержит БСП.
	ТаблицаОбъектовБСП = ПолучитьТаблицуОбязательныхОбъектовБСП();
	Для Каждого ОбъектБСП Из ТаблицаОбъектовБСП Цикл
		
		// Сначала объект ищем по полному пути.
		ОбъектСсылка = ПолучитьЭлементСтруктурыМетаданныхПоПути(Версия, ОбъектБСП.Путь, Расширение);
		Если НЕ ОбъектСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// Не нашли, ищем объект по наименованию и типу объекта.
		ОбъектСсылка = ПолучитьЭлементСтруктурыМетаданных(Версия,, ОбъектБСП.Наименование, ОбъектБСП.ТипОбъекта, Расширение);
		Если НЕ ОбъектСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// Не нашли, выходим.
		Результат = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНазначениеРолей()
	
	// Если в конфигурации нет БСП, то не заполняем назначение ролей.
	Если НЕ КонфигурацияСодержитБСП() Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = НСтр("ru='Получение назначения ролей пользователей'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Сообщение, СтруктураПроверки.ЖурналПроверки,
		СтруктураПроверки.ТаблицаЖурнала);
	
	НазначениеРолей = РаботаСВнешнимСоединением.ПолучитьНазначениеРолей(Конфигурация, КаталогКонфигурации,
		Пользователь, Пароль);
	
	РезультатЗаписи = ЗаписатьНазначениеРолей(НазначениеРолей);
	
	// Анализируем текст ошибки при получении назначения ролей.
	ТекстОшибки = НазначениеРолей.ТекстОшибки;
	Если ПустаяСтрока(ТекстОшибки) Тогда
		
		// Если текст пустой, значит, смогли получить и версию БСП, и назначение ролей.
		Сообщение = НСтр("ru='Назначение ролей пользователей получено успешно'");
		Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Сообщение, СтруктураПроверки.ЖурналПроверки,
			СтруктураПроверки.ТаблицаЖурнала);
		
	ИначеЕсли НЕ НазначениеРолей.БазаСкопированаУспешно Тогда
		
		// Если текст заполнен и не скопирована база, значит, возникла ошибка при копировании базы.
		Сообщение = НСтр("ru='Не удалось скопировать базу по причине:%1%2
			|Получение назначения ролей пользователей отменено'");
		Сообщение = СтрШаблон(Сообщение, Символы.ПС, ТекстОшибки);
		Зафиксировать(Конфигурация.Наименование, УровеньОшибка, Сообщение, СтруктураПроверки.ЖурналПроверки,
			СтруктураПроверки.ТаблицаЖурнала);
		
	ИначеЕсли НЕ НазначениеРолей.УстановленоCOMСоединение Тогда
		
		// Если текст заполнен и не установлено COM-соединение, значит, не смогли подключиться к базе.
		Сообщение = НСтр("ru='Не удалось подключиться к базе через COM-соединение по причине:%1%2
			|Получение назначения ролей пользователей отменено'");
		Сообщение = СтрШаблон(Сообщение, Символы.ПС, ТекстОшибки);
		Зафиксировать(Конфигурация.Наименование, УровеньОшибка, Сообщение, СтруктураПроверки.ЖурналПроверки,
			СтруктураПроверки.ТаблицаЖурнала);
		
	ИначеЕсли ПустаяСтрока(НазначениеРолей.ВерсияБСП) Тогда
		
		// Если текст заполнен и пустая версия БСП, значит, не смогли получить версию БСП.
		Сообщение = НСтр("ru='Не удалось получить версию БСП по причине:%1%2
			|Получение назначения ролей пользователей отменено'");
		Сообщение = СтрШаблон(Сообщение, Символы.ПС, ТекстОшибки);
		Зафиксировать(Конфигурация.Наименование, УровеньОшибка, Сообщение, СтруктураПроверки.ЖурналПроверки,
			СтруктураПроверки.ТаблицаЖурнала);
		
	Иначе
		
		// Если заполнены текст ошибки и версия БСП, значит, не смогли получить назначение ролей.
		Сообщение = НСтр("ru='Не удалось получить назначение ролей пользователей по причине:%1%2'");
		Сообщение = СтрШаблон(Сообщение, Символы.ПС, ТекстОшибки);
		Зафиксировать(Конфигурация.Наименование, УровеньОшибка, Сообщение, СтруктураПроверки.ЖурналПроверки,
			СтруктураПроверки.ТаблицаЖурнала);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РезультатЗаписи) Тогда
		Сообщение = НСтр("ru='Не удалось записать назначение ролей пользователей по причине:%1%2'");
		Сообщение = СтрШаблон(Сообщение, Символы.ПС, РезультатЗаписи);
		Зафиксировать(Конфигурация.Наименование, УровеньОшибка, Сообщение, СтруктураПроверки.ЖурналПроверки,
			СтруктураПроверки.ТаблицаЖурнала);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьНазначениеРолей(НазначениеРолей)
	
	Результат = "";
	
	КореньКонфигурации = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Типы.Конфигурация, Расширение);
	Если КореньКонфигурации.Пустая() Тогда
		Возврат НСтр("ru='Не найден элемент структуры конфигурации, соответствующий корню конфигурации.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияСоставныхСвойствОбъектов");
		ЭлементБлокировки.УстановитьЗначение("Объект", КореньКонфигурации);
		ЭлементБлокировки.УстановитьЗначение("Имя", Перечисления.ИдентификаторыСодержанияОбъектов.НазначениеРолей);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСодержания.Отбор.Объект.Установить(КореньКонфигурации);
		НаборЗаписейСодержания.Отбор.Имя.Установить(Перечисления.ИдентификаторыСодержанияОбъектов.НазначениеРолей);
		
		НоваяЗапись          = НаборЗаписейСодержания.Добавить();
		НоваяЗапись.Объект   = КореньКонфигурации;
		НоваяЗапись.Имя      = Перечисления.ИдентификаторыСодержанияОбъектов.НазначениеРолей;
		НоваяЗапись.Значение = ВернутьХранилищеЗначения(НазначениеРолей);
		
		НаборЗаписейСодержания.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРолевуюНастройкуВидимостиИнтерфейса(КаталогВыгрузкиXML)
	
	КореньКонфигурации = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Типы.Конфигурация, Расширение);
	Если КореньКонфигурации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РазборФайловXML.ЗаписатьРолевуюНастройкуВидимостиИнтерфейса(КаталогВыгрузкиXML, КореньКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСведенийОМетаданных

// Формирует соответствие типа объекта строковому представлению для получения данных из проверяемой конфигурации.
//
Процедура ЗадатьПредставлениеТипов()
	
	ПредставлениеТипа = Новый Соответствие;
	
	ПредставлениеТипа.Вставить(Типы.Конфигурация, 					"Конфигурация");
	ПредставлениеТипа.Вставить(Типы.ВеткаМетаданных, 				"ВеткаМетаданных");
	ПредставлениеТипа.Вставить(Типы.Подсистема, 					"Подсистема");
	ПредставлениеТипа.Вставить(Типы.ОбщийМодуль, 					"ОбщийМодуль");
	ПредставлениеТипа.Вставить(Типы.ПараметрСеанса, 				"ПараметрСеанса");
	ПредставлениеТипа.Вставить(Типы.Роль, 							"Роль");
	ПредставлениеТипа.Вставить(Типы.ОбщийРеквизит, 					"ОбщийРеквизит");
	ПредставлениеТипа.Вставить(Типы.ПланОбмена, 					"ПланОбмена");
	ПредставлениеТипа.Вставить(Типы.КритерийОтбора, 				"КритерийОтбора");
	ПредставлениеТипа.Вставить(Типы.ПодпискаНаСобытия, 				"ПодпискаНаСобытия");
	ПредставлениеТипа.Вставить(Типы.РегламентноеЗадание, 			"РегламентноеЗадание");
	ПредставлениеТипа.Вставить(Типы.Форма, 							"Форма");
	ПредставлениеТипа.Вставить(Типы.Интерфейс, 						"Интерфейс");
	ПредставлениеТипа.Вставить(Типы.Макет, 							"Макет");
	ПредставлениеТипа.Вставить(Типы.Картинка, 						"Картинка");
	ПредставлениеТипа.Вставить(Типы.ПакетXDTO, 						"ПакетXDTO");
	ПредставлениеТипа.Вставить(Типы.WebСервис, 						"WebСервис");
	ПредставлениеТипа.Вставить(Типы.HTTPСервис, 					"HTTPСервис");
	ПредставлениеТипа.Вставить(Типы.WSСсылка, 						"WSСсылка");
	ПредставлениеТипа.Вставить(Типы.Стиль, 							"Стиль");
	ПредставлениеТипа.Вставить(Типы.ЭлементСтиля, 					"ЭлементСтиля");
	ПредставлениеТипа.Вставить(Типы.Язык, 							"Язык");
	ПредставлениеТипа.Вставить(Типы.Документ, 						"Документ");
	ПредставлениеТипа.Вставить(Типы.ЖурналДокументов, 				"ЖурналДокументов");
	ПредставлениеТипа.Вставить(Типы.Перечисление, 					"Перечисление");
	ПредставлениеТипа.Вставить(Типы.Отчет, 							"Отчет");
	ПредставлениеТипа.Вставить(Типы.Обработка, 						"Обработка");
	ПредставлениеТипа.Вставить(Типы.ПланВидовХарактеристик, 		"ПланВидовХарактеристик");
	ПредставлениеТипа.Вставить(Типы.ПланСчетов, 					"ПланСчетов");
	ПредставлениеТипа.Вставить(Типы.ПланВидовРасчета, 				"ПланВидовРасчета");
	ПредставлениеТипа.Вставить(Типы.РегистрСведений, 				"РегистрСведений");
	ПредставлениеТипа.Вставить(Типы.РегистрНакопления, 				"РегистрНакопления");
	ПредставлениеТипа.Вставить(Типы.РегистрБухгалтерии, 			"РегистрБухгалтерии");
	ПредставлениеТипа.Вставить(Типы.РегистрРасчета, 				"РегистрРасчета");
	ПредставлениеТипа.Вставить(Типы.БизнесПроцесс, 					"БизнесПроцесс");
	ПредставлениеТипа.Вставить(Типы.Задача, 						"Задача");
	ПредставлениеТипа.Вставить(Типы.Константа, 						"Константа");
	ПредставлениеТипа.Вставить(Типы.Справочник, 					"Справочник");
	ПредставлениеТипа.Вставить(Типы.Реквизит, 						"Реквизит");
	ПредставлениеТипа.Вставить(Типы.СтандартныйРеквизит, 			"СтандартныйРеквизит");
	ПредставлениеТипа.Вставить(Типы.ТабличнаяЧасть, 				"ТабличнаяЧасть");
	ПредставлениеТипа.Вставить(Типы.СтандартнаяТабличнаяЧасть, 		"СтандартнаяТабличнаяЧасть");
	ПредставлениеТипа.Вставить(Типы.Графа, 							"Графа");
	ПредставлениеТипа.Вставить(Типы.Измерение, 						"Измерение");
	ПредставлениеТипа.Вставить(Типы.Ресурс, 						"Ресурс");
	ПредставлениеТипа.Вставить(Типы.Значение, 						"Значение");
	ПредставлениеТипа.Вставить(Типы.ОбщийМакет, 					"ОбщийМакет");
	ПредставлениеТипа.Вставить(Типы.ОбщаяФорма, 					"ОбщаяФорма");
	ПредставлениеТипа.Вставить(Типы.ФункциональнаяОпция, 			"ФункциональнаяОпция");
	ПредставлениеТипа.Вставить(Типы.ХранилищеНастроек, 				"ХранилищеНастроек");
	ПредставлениеТипа.Вставить(Типы.Команда, 						"Команда");
	ПредставлениеТипа.Вставить(Типы.ОбщаяКоманда, 					"ОбщаяКоманда");
	ПредставлениеТипа.Вставить(Типы.ГруппаКоманд, 					"ГруппаКоманд");
	ПредставлениеТипа.Вставить(Типы.УправляемаяФорма, 				"УправляемаяФорма");
	ПредставлениеТипа.Вставить(Типы.ОбщаяУправляемаяФорма, 			"ОбщаяУправляемаяФорма");
	ПредставлениеТипа.Вставить(Типы.ПараметрФункциональнойОпции, 	"ПараметрФункциональнойОпции");
	ПредставлениеТипа.Вставить(Типы.ПредопределенныйЭлемент, 		"ПредопределенныйЭлемент");
	ПредставлениеТипа.Вставить(Типы.ОпределяемыйТип, 				"ОпределяемыйТип");
	ПредставлениеТипа.Вставить(Типы.Операция, 						"Операция");
	ПредставлениеТипа.Вставить(Типы.Параметр, 						"Параметр");
	ПредставлениеТипа.Вставить(Типы.ШаблонURL, 						"ШаблонURL");
	ПредставлениеТипа.Вставить(Типы.МетодШаблонаURL, 				"МетодШаблонаURL");
	
КонецПроцедуры

// Получает сведения о метаданных и массив очереди рег. заданий
// и записывает эти данные в регистре сведений.
//
Функция ЗаполнитьСведенияОМетаданных(КаталогВыгрузкиФайловXML) Экспорт
	
	Статус = ЗаполнитьСвойстваМетаданных(КаталогВыгрузкиФайловXML);
	Если НЕ ПустаяСтрока(Статус) Тогда
		Возврат Статус;
	КонецЕсли;
	
	// Следующие сведения заполняем только для основной конфигурации, для расширения не заполняем.
	Если Расширение.Пустая() Тогда
		
		ЗаполнитьШаблоныЗаданийОчереди();
		ЗаполнитьРегламентныеЗаданияЗависимыеОтФункциональныхОпций();
		ЗаполнитьИтерацииОбновления();
		
		ВерсияБСП = ЗаполнитьВерсиюБСП();
		ЗаполнитьВерсииФорматаОбменаEnterpriseData(ВерсияБСП);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСтруктуруТипаОбъекта(СтрокаТаблицыПутей, Путь)
	
	СтруктураТипаОбъектаТекущая = Новый Структура;
	
	МассивПути = СтрРазделить(Путь, ".", Ложь);
	МассивШаблонаПути = СтрРазделить(СтрокаТаблицыПутей.ПутьСтруктурыКонфигурации, ".", Ложь);
	
	Если МассивПути.Количество() <> МассивПути.Количество() Тогда
		Возврат СтруктураТипаОбъектаТекущая;
	КонецЕсли;
	
	Для НомерЭлемента = 0 По МассивШаблонаПути.Количество()-1 Цикл
		
		ТекущийЭлементШаблона = МассивШаблонаПути[НомерЭлемента];
		
		Если НЕ СтрНачинаетсяС(ТекущийЭлементШаблона, "&") Тогда
			Продолжить;
		КонецЕсли;
		
		НазваниеПоляСтруктуры = СтрЗаменить(ТекущийЭлементШаблона, "&", "");
		СтруктураТипаОбъектаТекущая.Вставить(НазваниеПоляСтруктуры, МассивПути[НомерЭлемента]);
		
	КонецЦикла;
	
	Возврат СтруктураТипаОбъектаТекущая;
	
КонецФункции

Функция ПолучитьПутьКФайлуХМЛ(ШаблонПутиКФайлуХМЛ, СтруктураТипаОбъекта)
	
	ПутьКФайлуХМЛ = ШаблонПутиКФайлуХМЛ;
	
	Для Каждого ТекущийЭлемент Из СтруктураТипаОбъекта Цикл
		ПутьКФайлуХМЛ = СтрЗаменить(ПутьКФайлуХМЛ, "&" + ТекущийЭлемент.Ключ + "&", ТекущийЭлемент.Значение);
	КонецЦикла;
	
	Возврат ПутьКФайлуХМЛ;
	
КонецФункции

Функция ПолучитьПутьКФайлуХМЛПодсистемы(ШаблонПутиКФайлуХМЛ, Путь)
	
	ПутьКФайлуХМЛ = ШаблонПутиКФайлуХМЛ;
	
	СтрокаВложенностиПодсистем = СтрЗаменить(Путь, "Общие.Подсистемы.", "");
	МассивВложенностиПодсистем = СтрРазделить(СтрокаВложенностиПодсистем, ".", Ложь);
	
	Для Счетчик = 0 По МассивВложенностиПодсистем.Количество()-1 Цикл
		ТекущаяПодсистема = МассивВложенностиПодсистем[Счетчик];
		ПутьКФайлуХМЛ = ПутьКФайлуХМЛ + "\" + ТекущаяПодсистема;
		Если Счетчик < МассивВложенностиПодсистем.Количество()-1 Тогда
			ПутьКФайлуХМЛ = ПутьКФайлуХМЛ + "\Subsystems";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутьКФайлуХМЛ + ".xml";
	
	
КонецФункции

// Получает данные о свойствах метаданных для каждого объекта проверяемой конфигурации и
// запоминает значения свойств во временных структурах данных.
//
Функция ЗаполнитьСвойстваМетаданных(КаталогВыгрузкиФайловXML)
	
	ЗапросСостава = Новый Запрос;
	ЗапросСостава.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка,
	|	СтруктураКонфигурации.Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК мТипОбъекта,
	|	СтруктураКонфигурации.Родитель КАК Объект,
	|	СтруктураКонфигурации.Родитель.Родитель КАК РодительРодителя,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.СобраныСведения
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	ЗапросСостава.УстановитьПараметр("Расширение", Расширение);
	ЗапросСостава.УстановитьПараметр("Владелец", Версия);
	
	ТаблицаОбъектов = ЗапросСостава.Выполнить().Выгрузить();
	ТаблицаОбъектов.Колонки.Добавить("Номер");
	ТаблицаОбъектов.Колонки.Добавить("ТипОбъекта");
	ТаблицаОбъектов.Колонки.Добавить("Родитель1");
	ТаблицаОбъектов.Колонки.Добавить("Родитель2");
	ТаблицаОбъектов.Колонки.Добавить("ПутьКФайлуХМЛ");
	ТаблицаОбъектов.Колонки.Добавить("ПутьВДеревеХМЛ");
	ТаблицаОбъектов.Колонки.Добавить("ИмяОбъектаХМЛ");
	ТаблицаОбъектов.Колонки.Добавить("СтруктураТипаОбъекта");
	ТаблицаОбъектов.Колонки.Добавить("ПутьОтРодителя");
	ТаблицаОбъектов.Колонки.Добавить("НомерСтрокиРодителяХМЛ");
	
	ТаблицаОбъектов.ЗаполнитьЗначения(-1, "НомерСтрокиРодителяХМЛ");
	
	ВсегоОбъектов = ТаблицаОбъектов.Количество();
	
	МакетПутиОбъектов = ПолучитьОбщийМакет("ПутиОбъектовВыгрузкиXML");
	ТаблицаПутейОбъектов = РазборФайловXML.СформироватьТаблицуЗначенийИзМакета(МакетПутиОбъектов);
	
	Для Счетчик = 0 По ВсегоОбъектов - 1 Цикл
		СтрокаОбъекта = ТаблицаОбъектов[Счетчик];
		
		СтрокаОбъекта.Номер = Счетчик;
		СтрокаОбъекта.ТипОбъекта = ПредставлениеТипа[СтрокаОбъекта.мТипОбъекта];
		
		Если СтрокаОбъекта.мТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных
			ИЛИ СтрокаОбъекта.мТипОбъекта = Перечисления.ТипыОбъектов.Корень Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоискаПоТипуОбъекта = Новый Структура;
		СтруктураПоискаПоТипуОбъекта.Вставить("ТипОбъекта", СтрокаОбъекта.ТипОбъекта);
		
		Если ЗначениеЗаполнено(СтрокаОбъекта.Объект)
			И (СтрокаОбъекта.Объект.ТипОбъекта <> Перечисления.ТипыОбъектов.ВеткаМетаданных)
			И (СтрокаОбъекта.Объект.ТипОбъекта <> Перечисления.ТипыОбъектов.Корень) Тогда
			
			ТекущийТипОбъекта = ПредставлениеТипа[СтрокаОбъекта.Объект.ТипОбъекта];
			СтрокаОбъекта.Родитель1 = ТекущийТипОбъекта;
			Если СтрокаОбъекта.Объект.ТипОбъекта <> Перечисления.ТипыОбъектов.Подсистема Тогда
				СтруктураПоискаПоТипуОбъекта.Вставить("Родитель1", ТекущийТипОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОбъекта.РодительРодителя)
			И (СтрокаОбъекта.РодительРодителя.ТипОбъекта <> Перечисления.ТипыОбъектов.ВеткаМетаданных)
			И (СтрокаОбъекта.РодительРодителя.ТипОбъекта <> Перечисления.ТипыОбъектов.Корень) Тогда
			
			ТекущийТипОбъекта = ПредставлениеТипа[СтрокаОбъекта.РодительРодителя.ТипОбъекта];
			СтрокаОбъекта.Родитель2 = ТекущийТипОбъекта;
			Если СтрокаОбъекта.РодительРодителя.ТипОбъекта <> Перечисления.ТипыОбъектов.Подсистема Тогда
				СтруктураПоискаПоТипуОбъекта.Вставить("Родитель2", ТекущийТипОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОбъекта.мТипОбъекта = Перечисления.ТипыОбъектов.Подсистема Тогда
			СтрокиТипаОбъекта = ТаблицаПутейОбъектов.НайтиСтроки(СтруктураПоискаПоТипуОбъекта);
			Если СтрокиТипаОбъекта.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОбъекта.ПутьКФайлуХМЛ = ПолучитьПутьКФайлуХМЛПодсистемы(СтрокиТипаОбъекта[0].ПутьКФайлуХМЛ,
				СтрокаОбъекта.Путь);
			СтрокаОбъекта.ПутьВДеревеХМЛ = СтрокиТипаОбъекта[0].ПутьВДеревеХМЛ;
			СтрокаОбъекта.ПутьОтРодителя = СтрокиТипаОбъекта[0].ПутьОтРодителя;
		Иначе
			СтрокиТипаОбъекта = ТаблицаПутейОбъектов.НайтиСтроки(СтруктураПоискаПоТипуОбъекта);
			Если СтрокиТипаОбъекта.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОбъекта.СтруктураТипаОбъекта = ПолучитьСтруктуруТипаОбъекта(СтрокиТипаОбъекта[0], СтрокаОбъекта.Путь);
			СтрокаОбъекта.ПутьКФайлуХМЛ = ПолучитьПутьКФайлуХМЛ(СтрокиТипаОбъекта[0].ПутьКФайлуХМЛ,
				СтрокаОбъекта.СтруктураТипаОбъекта);
			СтрокаОбъекта.ПутьВДеревеХМЛ = СтрокиТипаОбъекта[0].ПутьВДеревеХМЛ;
			СтрокаОбъекта.ИмяОбъектаХМЛ = СтрокиТипаОбъекта[0].ИмяОбъектаХМЛ;
			СтрокаОбъекта.ПутьОтРодителя = СтрокиТипаОбъекта[0].ПутьОтРодителя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПодчиненная Из ТаблицаОбъектов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПодчиненная.ПутьОтРодителя) Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеРодителя = "";
		Попытка
			НаименованиеРодителя = СтрокаПодчиненная.СтруктураТипаОбъекта[СтрокаПодчиненная.ПутьОтРодителя];
		Исключение
			Продолжить;
		КонецПопытки;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Наименование", НаименованиеРодителя);
		СтруктураПоиска.Вставить("ПутьКФайлуХМЛ", СтрокаПодчиненная.ПутьКФайлуХМЛ);
		СтруктураПоиска.Вставить("ТипОбъекта", СтрокаПодчиненная.Родитель1);
		СтруктураПоиска.Вставить("Родитель1", СтрокаПодчиненная.Родитель2);
		СтруктураПоиска.Вставить("Родитель2", Неопределено);
		НайденныеСтроки = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПодчиненная.НомерСтрокиРодителяХМЛ = НайденныеСтроки[0].Номер;
		
	КонецЦикла;
	
	ТаблицаОбъектов.Колонки.Удалить("мТипОбъекта");
	ТаблицаОбъектов.Колонки.Удалить("РодительРодителя");
	
	ТаблицаОбъектов.Индексы.Добавить("Номер, ПутьКФайлуХМЛ");
	
	Статус = ЗаполнитьСвойстваОбъектовМетаданных(ТаблицаОбъектов, КаталогВыгрузкиФайловXML);
	
	Возврат Статус;
	
КонецФункции

Функция ЗаполнитьСвойстваОбъектовМетаданных(ТаблицаОбъектов, КаталогВыгрузкиФайловXML)
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// получение свойств объектов
	ТаблицаВсехОбъектов = ПолучитьТаблицуОбъектовКонфигурации(Версия, Расширение);
	ТаблицаВсехОбъектов.Индексы.Добавить("ТипОбъектаВРег");
	
	СведенияОКонфигурации = Новый Структура;
	СведенияОКонфигурации.Вставить("Конфигурация", Конфигурация);
	СведенияОКонфигурации.Вставить("ОсновнойЯзык", СтруктураПроверки.ОсновнойЯзык);
	СведенияОКонфигурации.Вставить("КаталогВыгрузкиФайлов", КаталогВыгрузкиФайловXML);
	
	СведенияПолучены = РазборФайловXML.ПолучитьСведенияОМетаданных(СведенияОбОбъектах, ТаблицаОбъектов, ТаблицаВсехОбъектов, СведенияОКонфигурации);
	Если НЕ СведенияПолучены Тогда
		Статус = НСтр("ru='Не удалось собрать сведения о метаданных конфигурации.'");
		Возврат Статус;
	КонецЕсли;
	
	СтруктураПроверки.ОсновнойЯзык = СведенияОКонфигурации.ОсновнойЯзык;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	Возврат "";
	
КонецФункции

// Получает массив очереди рег. заданий и записывает его в регистр сведений.
//
Процедура ЗаполнитьШаблоныЗаданийОчереди()
	
	// Проверим наличие общего модуля "ОчередьЗаданий".
	ОбщийМодульОчередьЗаданий = ПолучитьЭлементСтруктурыМетаданных(Версия,, "ОчередьЗаданий", Типы.ОбщийМодуль, Расширение);
	Если ОбщийМодульОчередьЗаданий.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивШаблонов = РаботаСВнешнимСоединением.ПолучитьШаблоныЗаданийОчереди(Конфигурация, КаталогКонфигурации,
		Пользователь, Пароль);
	
	ЗаписатьШаблоныЗаданийОчереди(МассивШаблонов);
	
КонецПроцедуры

// Записывает массив очереди рег. заданий в регистр сведений.
//
Процедура ЗаписатьШаблоныЗаданийОчереди(МассивШаблонов)
	
	Если МассивШаблонов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВеткаРегламентныеЗадания = ПолучитьЭлементСтруктурыМетаданных(Версия,, "РегламентныеЗадания", Типы.ВеткаМетаданных, Расширение);
	Если ВеткаРегламентныеЗадания.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Перечисления.ИдентификаторыСодержанияОбъектов.ШаблоныЗаданийОчереди;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияСоставныхСвойствОбъектов");
		ЭлементБлокировки.УстановитьЗначение("Объект", ВеткаРегламентныеЗадания);
		ЭлементБлокировки.УстановитьЗначение("Имя", Идентификатор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСодержания.Отбор.Объект.Установить(ВеткаРегламентныеЗадания);
		НаборЗаписейСодержания.Отбор.Имя.Установить(Идентификатор);
		
		НоваяЗапись          = НаборЗаписейСодержания.Добавить();
		НоваяЗапись.Объект   = ВеткаРегламентныеЗадания;
		НоваяЗапись.Имя      = Идентификатор;
		НоваяЗапись.Значение = ВернутьХранилищеЗначения(МассивШаблонов);
		
		НаборЗаписейСодержания.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Получает таблицу рег. заданий, зависимых от функциональных опций, и записывает его в регистр сведений.
//
Процедура ЗаполнитьРегламентныеЗаданияЗависимыеОтФункциональныхОпций()
	
	// Проверим наличие общего модуля "РегламентныеЗаданияСлужебный".
	ОбщийМодульРегламентныеЗаданияСлужебный = ПолучитьЭлементСтруктурыМетаданных(Версия,, "РегламентныеЗаданияСлужебный",
		Типы.ОбщийМодуль, Расширение);
	Если ОбщийМодульРегламентныеЗаданияСлужебный.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРегламентныхЗаданий = РаботаСВнешнимСоединением.ПолучитьРегламентныеЗаданияЗависимыеОтФункциональныхОпций(
		Конфигурация, КаталогКонфигурации, Пользователь, Пароль);
	
	ЗаписатьРегламентныеЗаданияЗависимыеОтФункциональныхОпций(ТаблицаРегламентныхЗаданий);
	
КонецПроцедуры

// Записывает массив очереди рег. заданий в регистр сведений.
//
Процедура ЗаписатьРегламентныеЗаданияЗависимыеОтФункциональныхОпций(ТаблицаРегламентныхЗаданий)
	
	Если ТаблицаРегламентныхЗаданий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВеткаРегламентныеЗадания = ПолучитьЭлементСтруктурыМетаданных(Версия,, "РегламентныеЗадания", Типы.ВеткаМетаданных, Расширение);
	Если ВеткаРегламентныеЗадания.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Перечисления.ИдентификаторыСодержанияОбъектов.РегламентныеЗаданияЗависимыеОтФункциональныхОпций;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияСоставныхСвойствОбъектов");
		ЭлементБлокировки.УстановитьЗначение("Объект", ВеткаРегламентныеЗадания);
		ЭлементБлокировки.УстановитьЗначение("Имя", Идентификатор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСодержания.Отбор.Объект.Установить(ВеткаРегламентныеЗадания);
		НаборЗаписейСодержания.Отбор.Имя.Установить(Идентификатор);
		
		НоваяЗапись          = НаборЗаписейСодержания.Добавить();
		НоваяЗапись.Объект   = ВеткаРегламентныеЗадания;
		НоваяЗапись.Имя      = Идентификатор;
		НоваяЗапись.Значение = ВернутьХранилищеЗначения(ТаблицаРегламентныхЗаданий);
		
		НаборЗаписейСодержания.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Получает таблицу итераций обновления и записывает его в регистр сведений.
//
Процедура ЗаполнитьИтерацииОбновления()
	
	ТаблицаИтерацийОбновления = РаботаСВнешнимСоединением.ПолучитьИтерацииОбновления(Конфигурация, КаталогКонфигурации,
		Пользователь, Пароль);
	
	Если ТаблицаИтерацийОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОбъектыВТаблицуИтерацийОбновления(ТаблицаИтерацийОбновления);
	
	ЗаписатьИтерацииОбновления(ТаблицаИтерацийОбновления);
	
КонецПроцедуры

Процедура ДобавитьОбъектыВТаблицуИтерацийОбновления(ТаблицаИтерацийОбновления)
	
	ТаблицаИтерацийОбновления.Колонки.Добавить("ОбъектСсылка");
	ТаблицаИтерацийОбновления.ЗаполнитьЗначения(Справочники.СтруктураКонфигурации.ПустаяСсылка(), "ОбъектСсылка");
	
	ТаблицаОбъектов = ПолучитьТаблицуОбъектовКонфигурации(Версия, Расширение);
	
	ТекстОбщиеМодули = ВРег("Общие.ОбщиеМодули.");
	
	Для Каждого Итерация Из ТаблицаИтерацийОбновления Цикл
		
		ОбъектПуть = "";
		
		ПроцедураОбработчика = ВРег(Итерация.Процедура);
		
		// Получим путь к объекту из процедуры обработчика.
		МассивЭлементовПути = СтрРазделить(ПроцедураОбработчика, ".");
		Если МассивЭлементовПути.Количество() < 2 Тогда
			// Неправильный обработчик, пропускаем.
			Продолжить;
		ИначеЕсли МассивЭлементовПути.Количество() = 2 Тогда
			// Это общий модуль, добавляем в путь префикс "Общие.ОбщиеМодули".
			ОбъектПуть = ТекстОбщиеМодули + МассивЭлементовПути[0];
		Иначе
			// Это объект метаданных, но не общий модуль.
			// Удаляем последний элемент массива пути, т.к. это наименование процедуры.
			МассивЭлементовПути.Удалить(МассивЭлементовПути.ВГраница());
			ОбъектПуть = СтрСоединить(МассивЭлементовПути, ".");
		КонецЕсли;
		
		СтрокаОбъекта = ТаблицаОбъектов.Найти(ОбъектПуть, "ПутьОбъектаВРег");
		Если СтрокаОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Итерация.ОбъектСсылка = СтрокаОбъекта.Ссылка;
		
	КонецЦикла;
	
	ТаблицаИтерацийОбновления.Индексы.Добавить("ОбъектСсылка");
	
КонецПроцедуры

// Записывает таблицу итераций обновления в регистр сведений.
//
Процедура ЗаписатьИтерацииОбновления(ТаблицаИтерацийОбновления)
	
	КореньКонфигурации = ПолучитьЭлементСтруктурыМетаданных(Версия,,, Типы.Конфигурация, Расширение);
	
	Если КореньКонфигурации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ПеречислениеИтерацииОбновления = Перечисления.ИдентификаторыСодержанияОбъектов.ИтерацииОбновления;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияСоставныхСвойствОбъектов");
		ЭлементБлокировки.УстановитьЗначение("Объект", КореньКонфигурации);
		ЭлементБлокировки.УстановитьЗначение("Имя", ПеречислениеИтерацииОбновления);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСодержания.Отбор.Объект.Установить(КореньКонфигурации);
		НаборЗаписейСодержания.Отбор.Имя.Установить(ПеречислениеИтерацииОбновления);
		
		НоваяЗапись          = НаборЗаписейСодержания.Добавить();
		НоваяЗапись.Объект   = КореньКонфигурации;
		НоваяЗапись.Имя      = ПеречислениеИтерацииОбновления;
		НоваяЗапись.Значение = ВернутьХранилищеЗначения(ТаблицаИтерацийОбновления);
		
		НаборЗаписейСодержания.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Получает версию библиотеки стандартных подсистем и записывает его в регистр сведений.
//
// Возвращаемое значение:
//   ВерсияБСП - Строка - версия библиотеки стандартных подсистем.
//
Функция ЗаполнитьВерсиюБСП()
	
	// Если в конфигурации нет БСП, то не заполняем версию.
	Если НЕ КонфигурацияСодержитБСП() Тогда
		Возврат "";
	КонецЕсли;
	
	ВерсияБСП = РаботаСВнешнимСоединением.ПолучитьВерсиюБСП(Конфигурация, КаталогКонфигурации, Пользователь, Пароль);
	
	ЗаписатьВерсиюБСП(ВерсияБСП);
	
	Возврат ВерсияБСП;
	
КонецФункции

// Записывает версию библиотеки стандартных подсистем в регистр сведений.
//
Процедура ЗаписатьВерсиюБСП(ВерсияБСП)
	
	// Сначала ищем подсистему по полному пути.
	ПодсистемаБСП = ПолучитьЭлементСтруктурыМетаданныхПоПути(Версия, "Общие.Подсистемы.СтандартныеПодсистемы", Расширение);
	Если ПодсистемаБСП.Пустая() Тогда
		// Не нашли, ищем подсистему по наименованию и типу объекта.
		ПодсистемаБСП = ПолучитьЭлементСтруктурыМетаданных(Версия,, "СтандартныеПодсистемы", Типы.Подсистема, Расширение);
	КонецЕсли;
	
	Если ПодсистемаБСП.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = "Версия";
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияСвойствОбъектов");
		ЭлементБлокировки.УстановитьЗначение("Объект", ПодсистемаБСП);
		ЭлементБлокировки.УстановитьЗначение("Имя", ИмяСвойства);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		НаборЗаписейСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСвойств.Отбор.Объект.Установить(ПодсистемаБСП);
		НаборЗаписейСвойств.Отбор.Имя.Установить(ИмяСвойства);
		
		НоваяЗапись          = НаборЗаписейСвойств.Добавить();
		НоваяЗапись.Объект   = ПодсистемаБСП;
		НоваяЗапись.Имя      = ИмяСвойства;
		НоваяЗапись.Значение = ВерсияБСП;
		
		НаборЗаписейСвойств.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Получает список версии формата обмена EnterpriseData для планов обмена библиотеки стандартных подсистем
// и записывает их в регистр сведений для каждого плана обмена.
//
Процедура ЗаполнитьВерсииФорматаОбменаEnterpriseData(ВерсияБСП)
	
	// Если в конфигурации нет БСП, то не заполняем версию.
	Если (НЕ КонфигурацияСодержитБСП()) ИЛИ ПустаяСтрока(ВерсияБСП) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВерсийФорматаОбмена = РаботаСВнешнимСоединением.ПолучитьВерсииФорматаОбменаEnterpriseData(Конфигурация,
		КаталогКонфигурации, Пользователь, Пароль, ВерсияБСП);
	
	ЗаписатьВерсииФорматаОбменаEnterpriseData(ТаблицаВерсийФорматаОбмена);
	
КонецПроцедуры

// Записывает список планов обмена библиотеки стандартных подсистем в регистр сведений.
//
Процедура ЗаписатьВерсииФорматаОбменаEnterpriseData(ТаблицаВерсийФорматаОбмена)
	
	Если ТаблицаВерсийФорматаОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Перечисления.ИдентификаторыСодержанияОбъектов.ВерсииФорматаОбменаEnterpriseData;
	
	Для Каждого СтрокаТаблицы Из ТаблицаВерсийФорматаОбмена Цикл
		
		ПланОбменаСсылка = СтрокаТаблицы.ПланОбмена;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияСоставныхСвойствОбъектов");
			ЭлементБлокировки.УстановитьЗначение("Объект", ПланОбменаСсылка);
			ЭлементБлокировки.УстановитьЗначение("Имя", Идентификатор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписейСодержания.Отбор.Объект.Установить(ПланОбменаСсылка);
			НаборЗаписейСодержания.Отбор.Имя.Установить(Идентификатор);
			
			НоваяЗапись          = НаборЗаписейСодержания.Добавить();
			НоваяЗапись.Объект   = ПланОбменаСсылка;
			НоваяЗапись.Имя      = Идентификатор;
			НоваяЗапись.Значение = ВернутьХранилищеЗначения(СтрокаТаблицы.ВерсииФорматаОбмена);
			
			НаборЗаписейСодержания.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСведенийОФормахИзXML

// Получает данные о реквизитах управляемых форм.
//
Функция ЗаполнитьСведенияОФормахИзXML(КаталогВыгрузкиXML) Экспорт
	
	Статус = "";
	
	ТипыОбъектовФорм = Новый СписокЗначений;
	ТипыОбъектовФорм.Добавить(Типы.ОбщаяУправляемаяФорма);
	ТипыОбъектовФорм.Добавить(Типы.УправляемаяФорма);
	
	ЗапросСоставаФорм = Новый Запрос;
	ЗапросСоставаФорм.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК ТипОбъекта,
	|	СтруктураКонфигурации.Путь КАК Путь,
	|	СтруктураКонфигурации.Родитель.Наименование КАК РодительНаименование,
	|	СтруктураКонфигурации.Родитель.ТипОбъекта КАК РодительТипОбъекта
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.ТипОбъекта В(&ТипОбъекта)
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	И СтруктураКонфигурации.СобраныСведения
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	ЗапросСоставаФорм.УстановитьПараметр("Расширение", Расширение);
	ЗапросСоставаФорм.УстановитьПараметр("Владелец", Версия);
	ЗапросСоставаФорм.УстановитьПараметр("ТипОбъекта", ТипыОбъектовФорм);
	
	ВыборкаФорм = ЗапросСоставаФорм.Выполнить().Выбрать();
	
	ВсегоФорм = ВыборкаФорм.Количество();
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка форм (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	СоответствиеСистемныхПеречислений = Новый Соответствие;
	ИнициализироватьТаблицуТиповОбъектов();
	
	МакетСвойств = ПолучитьОбщийМакет("СвойстваФорм");
	ТаблицаСвойствФорм = РазборФайловXML.СформироватьТаблицуЗначенийИзМакета(МакетСвойств);
	
	ПараметрыСбораСвойств = Новый Структура;
	ПараметрыСбораСвойств.Вставить("ТаблицаСвойствФорм", ТаблицаСвойствФорм);
	ПараметрыСбораСвойств.Вставить("ТаблицаТиповОбъектов", ТаблицаТиповОбъектов);
	ПараметрыСбораСвойств.Вставить("СоответствиеСистемныхПеречислений", СоответствиеСистемныхПеречислений);
	ПараметрыСбораСвойств.Вставить("КаталогВыгрузкиФайлов", КаталогВыгрузкиXML);
	ПараметрыСбораСвойств.Вставить("ОсновнойЯзык", СтруктураПроверки.ОсновнойЯзык);
	
	НомерФормы = 0;
	ПроцентОбработанныхОбъектов = 0;
	
	Пока ВыборкаФорм.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НомерФормы = НомерФормы + 1;
		
		ФормаПуть = ВыборкаФорм.Путь;
		ФормаСсылка = ВыборкаФорм.Ссылка;
		
		#Если Клиент Тогда
		ТекущийПроцентОбъектов = Цел(100 * НомерФормы / ВсегоФорм);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		ИмяФайла = "";
		ИмяФормы = ВыборкаФорм.Наименование;
		Если ВыборкаФорм.ТипОбъекта = Типы.ОбщаяУправляемаяФорма Тогда
			ИмяФайла = СтрШаблон("CommonForms\%1\Ext\Form.xml", ВыборкаФорм.Наименование);
			ИмяФормыПолное = СтрШаблон("ОбщаяФорма.%1", ИмяФормы);
		ИначеЕсли ВыборкаФорм.ТипОбъекта = Типы.УправляемаяФорма Тогда
			РодительТипОбъекта = ВыборкаФорм.РодительТипОбъекта;
			ТипРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, РодительТипОбъекта, "ТипОбъекта",
				"ИмяАнглМнФормы");
			ИмяРодителя = ВыборкаФорм.РодительНаименование;
			ИмяФайла = СтрШаблон("%1\%2\Forms\%3\Ext\Form.xml", ТипРодителя, ИмяРодителя, ВыборкаФорм.Наименование);
			
			ТипРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, РодительТипОбъекта, "ИмяМнФормы", "Имя");
			ИмяФормыПолное = СтрШаблон("%1.%2.Форма.%3", ТипРодителя, ИмяРодителя, ИмяФормы);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПутьФайла = КаталогВыгрузкиXML + ИмяФайла;
		Если НЕ ФайлСуществует(ПутьФайла) Тогда
			ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Не существует файл формы: ""%1""'"), ПутьФайла);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
			
			Продолжить;
		КонецЕсли;
		
		ДеревоДанных = РазборФайловXML.XML_РазобратьФайлВыгрузки(ПутьФайла);
		
		РазборФайловXML.ЗаписатьСведенияОФормах(ФормаСсылка, ДеревоДанных, ПараметрыСбораСвойств, ИмяФормыПолное);
		
	КонецЦикла;
	
	СтруктураПроверки.ОсновнойЯзык = ПараметрыСбораСвойств.ОсновнойЯзык;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСведенийОМакетах

// Получает данные о макетах, их содержании и данных об элементах макетов
// и запоминает значения свойств макетов и их составляющих во временных структурах данных.
//
Функция ЗаполнитьСведенияОМакетах(КаталогВыгрузкиФайловXML) Экспорт
	
	Статус = "";
	
	ЗапросСоставаМакетов = Новый Запрос;
	ЗапросСоставаМакетов.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка,
	|	СтруктураКонфигурации.Наименование,
	|	СтруктураКонфигурации.ТипОбъекта,
	|	СтруктураКонфигурации.Родитель.Наименование КАК ИмяОбъектаМакета,
	|	СтруктураКонфигурации.Родитель.Родитель.Наименование КАК ТипОбъектаМакета,
	|	СтруктураКонфигурации.Родитель.Родитель.Родитель.Наименование КАК ВеткаМетаданных,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.ТипОбъекта В(&ТипОбъекта)
	|	И СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	И СтруктураКонфигурации.СобраныСведения
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления";
	
	ТипыОбъектовМакетов = Новый СписокЗначений;
	ТипыОбъектовМакетов.Добавить(Типы.ОбщийМакет);
	ТипыОбъектовМакетов.Добавить(Типы.Макет);
	
	ЗапросСоставаМакетов.УстановитьПараметр("Расширение", Расширение);
	ЗапросСоставаМакетов.УстановитьПараметр("ТипОбъекта", ТипыОбъектовМакетов);
	ЗапросСоставаМакетов.УстановитьПараметр("Владелец", Версия);
	
	ТаблицаМакетов = ЗапросСоставаМакетов.Выполнить().Выгрузить();
	ТаблицаМакетов.Колонки.Добавить("Номер");
	
	// Нумеруем строки для связывания с ссылками объектов после сбора данных.
	ПоследнийМакет = ТаблицаМакетов.Количество() - 1;
	Для Счетчик = 0 По ПоследнийМакет Цикл
		ТаблицаМакетов[Счетчик].Номер = Счетчик;
	КонецЦикла;
	
	ИнициализироватьТаблицуТиповОбъектов();
	
	СведенияОКонфигурации = Новый Структура;
	СведенияОКонфигурации.Вставить("Конфигурация", Конфигурация);
	СведенияОКонфигурации.Вставить("КаталогКонфигурации", КаталогКонфигурации);
	СведенияОКонфигурации.Вставить("Пользователь", Пользователь);
	СведенияОКонфигурации.Вставить("Пароль", Пароль);
	СведенияОКонфигурации.Вставить("ОсновнойЯзык", СтруктураПроверки.ОсновнойЯзык);
	СведенияОКонфигурации.Вставить("КаталогВыгрузкиФайлов", КаталогВыгрузкиФайловXML);
	СведенияОКонфигурации.Вставить("СоответствиеСистемныхПеречислений", Новый Соответствие);
	
	// Получаем данные о макетах из проверяемой конфигурации.
	СвойстваМакетов = РазборФайловXML.ПолучитьСведенияОМакетах(СведенияОКонфигурации, ТаблицаМакетов,
		ТаблицаТиповОбъектов, Расширение);
	
	СтруктураПроверки.ОсновнойЯзык = СведенияОКонфигурации.ОсновнойЯзык;
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка макетов (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	ПоследнийНомерМакета = СвойстваМакетов.Количество();
	Счетчик = 1;
	ПроцентОбработанныхОбъектов = 0;
	
	Для Каждого СвойстваМакета Из СвойстваМакетов Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		СтрокаМакета = ТаблицаМакетов.Найти(СвойстваМакета.Номер, "Номер");
		Если СтрокаМакета = Неопределено Тогда
			ИмяСобытия = НСтр("ru='Сбор сведений о метаданных'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстОшибки = НСтр("ru='В таблице макетов не найдена запись под номером'") + " " + СвойстваМакета.Номер;
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньОшибка,,, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СписокСведений = СведенияОбОбъектах[СтрокаМакета.Ссылка];
		Если НЕ ЗначениеЗаполнено(СписокСведений) Тогда
			СписокСведений = Новый СписокЗначений;
		Иначе
			СписокСведений = СписокСведений.Получить();
		КонецЕсли;
		
		СписокСведений.Добавить(СвойстваМакета.Значение, СвойстваМакета.Свойство);
		СведенияОбОбъектах.Вставить(СтрокаМакета.Ссылка, ВернутьХранилищеЗначения(СписокСведений));
		
		#Если Клиент Тогда
		Счетчик = Счетчик + 1;
		ТекущийПроцентОбъектов = Цел(100 * Счетчик / ПоследнийНомерМакета);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСведенийОМодулях

// Функция возвращает соответствие с массивами с перечислением модулей для разных типов объектов.
//
Функция ПолучитьНаборыМодулей()
	
	// Создаем шаблоны состава модулей.
	ПустойНаборМодулей = Новый Массив;
	
	НаборМодулей = Новый Массив;
	НаборМодулей.Добавить("Модуль");
	
	НаборМодулейМодульОбъекта = Новый Массив;
	НаборМодулейМодульОбъекта.Добавить("МодульОбъекта");
	
	НаборМодулейМодульМенеджера = Новый Массив;
	НаборМодулейМодульМенеджера.Добавить("МодульМенеджера");
	
	НаборМодулейОбъекта = Новый Массив;
	НаборМодулейОбъекта.Добавить("МодульОбъекта");
	НаборМодулейОбъекта.Добавить("МодульМенеджера");
	
	НаборМодулейРегистра = Новый Массив;
	НаборМодулейРегистра.Добавить("МодульНабораЗаписей");
	НаборМодулейРегистра.Добавить("МодульМенеджера");
	
	НаборМодулейКонфигурации = Новый Массив;
	НаборМодулейКонфигурации.Добавить("МодульСеанса");
	НаборМодулейКонфигурации.Добавить("МодульПриложения");
	НаборМодулейКонфигурации.Добавить("МодульОбычногоПриложения");
	НаборМодулейКонфигурации.Добавить("МодульУправляемогоПриложения");
	НаборМодулейКонфигурации.Добавить("МодульВнешнегоСоединения");
	
	НаборМодулейМодульМенеджераЗначения = Новый Массив;
	НаборМодулейМодульМенеджераЗначения.Добавить("МодульМенеджераЗначения");
	
	НаборМодулейКоманды = Новый Массив;
	НаборМодулейКоманды.Добавить("МодульКоманды");
	
	// Заполняем наборы для каждого типа прикладного объекта.
	СоответствиеНаборовМодулей = Новый Соответствие;
	
	СоответствиеНаборовМодулей.Вставить(Типы.HTTPСервис,             		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.WebСервис,              		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.WSСсылка,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.БизнесПроцесс,          		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ВеткаМетаданных,        		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Графа,                  		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Документ,               		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ЖурналДокументов,       		НаборМодулейМодульМенеджера);
	СоответствиеНаборовМодулей.Вставить(Типы.Задача,                 		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.Значение,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Измерение,              		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Интерфейс,              		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Картинка,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Константа,              		НаборМодулейМодульМенеджераЗначения);
	СоответствиеНаборовМодулей.Вставить(Типы.Конфигурация,           		НаборМодулейКонфигурации);
	СоответствиеНаборовМодулей.Вставить(Типы.КритерийОтбора,         		НаборМодулейМодульМенеджера);
	СоответствиеНаборовМодулей.Вставить(Типы.Макет,                  		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Обработка,              		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ОбщаяФорма,             		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ОбщаяУправляемаяФорма,  		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ОбщийМакет,             		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ОбщийМодуль,            		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ОбщийРеквизит,          		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ОпределяемыйТип,        		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Отчет,                  		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ПакетXDTO,              		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ПараметрСеанса,         		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Перечисление,           		НаборМодулейМодульМенеджера);
	СоответствиеНаборовМодулей.Вставить(Типы.ПланВидовРасчета,       		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ПланВидовХарактеристик, 		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ПланОбмена,             		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ПланСчетов,             		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.ПодпискаНаСобытия,      		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Подсистема,             		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.РегистрБухгалтерии,     		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Типы.РегистрНакопления,      		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Типы.РегистрРасчета,         		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Типы.РегистрСведений,        		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Типы.РегламентноеЗадание,    		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Реквизит,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.СтандартныйРеквизит,			ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Ресурс,                 		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Роль,                   		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Справочник,             		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Типы.Стиль,                  		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ТабличнаяЧасть,         		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.СтандартнаяТабличнаяЧасть, 	ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Форма,                  		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.УправляемаяФорма,       		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ЭлементСтиля,           		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Язык,                   		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ФункциональнаяОпция,    		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ХранилищеНастроек,      		НаборМодулейМодульМенеджера);
	СоответствиеНаборовМодулей.Вставить(Типы.Команда, 				  		НаборМодулейКоманды);
	СоответствиеНаборовМодулей.Вставить(Типы.ОбщаяКоманда,           		НаборМодулейКоманды);
	СоответствиеНаборовМодулей.Вставить(Типы.ГруппаКоманд,           		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ПараметрФункциональнойОпции, 	ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ПредопределенныйЭлемент, 		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Операция, 						ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.Параметр, 						ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.ШаблонURL, 					ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Типы.МетодШаблонаURL, 				ПустойНаборМодулей);
	
	Возврат СоответствиеНаборовМодулей;
	
КонецФункции

// Получает содержание модулей объектов конфигурации, выполняет разбор на блоки и
// запоминает это во временных структурах данных.
//
Функция ЗаполнитьСведенияОМодулях(КаталогВыгрузкиФайловXML) Экспорт
	
	МассивТипов = ПолучитьТипыОбъектовИмеющихМодули();
	// При выгрузке xml модули обычных форм находятся в закодированном виде, исключаем их.
	МассивТипов.Удалить(МассивТипов.Найти(Типы.Форма));
	МассивТипов.Удалить(МассивТипов.Найти(Типы.ОбщаяФорма));
	
	// Выбираем из структуры конфигурации модули.
	// Из запроса убрано условие по реквизиту "СобраныСведения",
	// т.к. некоторые правила требуют наличия всех модулей конфигурации вне зависимости от проверяемых объектов.
	ЗапросВыборки = Новый Запрос;
	ЗапросВыборки.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК ТипОбъекта,
	|	СтруктураКонфигурации.Путь КАК Путь,
	|	СтруктураКонфигурации.Родитель.Наименование КАК РодительНаименование,
	|	СтруктураКонфигурации.Родитель.ТипОбъекта КАК РодительТипОбъекта
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.ТипОбъекта В(&ТипОбъекта)
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	//И СтруктураКонфигурации.СобраныСведения
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	ЗапросВыборки.УстановитьПараметр("Расширение", Расширение);
	ЗапросВыборки.УстановитьПараметр("Владелец", Версия);
	ЗапросВыборки.УстановитьПараметр("ТипОбъекта", МассивТипов);
	
	ВыборкаОбъектов = ЗапросВыборки.Выполнить().Выбрать();
	
	ИнициализироватьТаблицуТиповОбъектов();
	
	// Получаем наборы модулей.
	НаборыМодулей = ПолучитьНаборыМодулей();
	
	ВсегоОбъектов = ВыборкаОбъектов.Количество();
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка модулей объектов (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	НомерОбъекта = 0;
	ПроцентОбработанныхОбъектов = 0;
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НомерОбъекта = НомерОбъекта + 1;
		
		ОбъектСсылка = ВыборкаОбъектов.Ссылка;
		ОбъектИмя = ВыборкаОбъектов.Наименование;
		ОбъектПуть = ВыборкаОбъектов.Путь;
		ТипОбъекта = ВыборкаОбъектов.ТипОбъекта;
		
		#Если Клиент Тогда
		ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		Если ТипОбъекта = Типы.Конфигурация Тогда
			НачалоИмениФайла = "Ext";
		ИначеЕсли ТипОбъекта = Типы.ОбщаяУправляемаяФорма Тогда
			ПрефиксОбъекта = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипОбъекта, "ТипОбъекта", "ИмяАнглМнФормы");
			НачалоИмениФайла = СтрШаблон("%1\%2\Ext\Form", ПрефиксОбъекта, ОбъектИмя);
		ИначеЕсли ТипОбъекта = Типы.УправляемаяФорма Тогда
			ТипРодителя = ВыборкаОбъектов.РодительТипОбъекта;
			ПрефиксРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипРодителя, "ТипОбъекта",
				"ИмяАнглМнФормы");
			ИмяРодителя = ВыборкаОбъектов.РодительНаименование;
			НачалоИмениФайла = СтрШаблон("%1\%2\Forms\%3\Ext\Form", ПрефиксРодителя, ИмяРодителя, ОбъектИмя);
		ИначеЕсли ТипОбъекта = Типы.Команда Тогда
			ТипРодителя = ВыборкаОбъектов.РодительТипОбъекта;
			ПрефиксРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипРодителя, "ТипОбъекта",
				"ИмяАнглМнФормы");
			ИмяРодителя = ВыборкаОбъектов.РодительНаименование;
			НачалоИмениФайла = СтрШаблон("%1\%2\Commands\%3\Ext", ПрефиксРодителя, ИмяРодителя, ОбъектИмя);
		Иначе
			ПрефиксОбъекта = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипОбъекта, "ТипОбъекта", "ИмяАнглМнФормы");
			НачалоИмениФайла = СтрШаблон("%1\%2\Ext", ПрефиксОбъекта, ОбъектИмя);
		КонецЕсли;
		
		НаборМодулей = НаборыМодулей[ТипОбъекта];
		
		Если НЕ ЗначениеЗаполнено(НаборМодулей) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Модуль Из НаборМодулей Цикл
			
			ТипМодуля = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, Модуль, "Имя", "ИмяАнгл");
			ИмяФайлаМодуля = СтрШаблон("%1\%2.bsl", НачалоИмениФайла, ТипМодуля);
			
			ПутьФайлаМодуля = КаталогВыгрузкиФайловXML + ИмяФайлаМодуля;
			
			Если НЕ ФайлСуществует(ПутьФайлаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			ФайлМодуля = Новый ТекстовыйДокумент;
			Попытка
				ФайлМодуля.Прочитать(ПутьФайлаМодуля);
				ТекстМодуля = ФайлМодуля.ПолучитьТекст();
			Исключение
				ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
				ТекстПредупреждения = СтрШаблон(НСтр("ru='Не удалось прочитать файл модуля: ""%1""'"), ПутьФайлаМодуля);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
				
				Продолжить;
			КонецПопытки;
			
			ТаблицаБлоков = ПолучитьТаблицуБлоковМодуля(ТекстМодуля);
			
			СписокСведений = СведенияОбОбъектах[ОбъектСсылка];
			Если НЕ ЗначениеЗаполнено(СписокСведений) Тогда
				СписокСведений = Новый СписокЗначений;
			Иначе
				СписокСведений = СписокСведений.Получить();
			КонецЕсли;
			
			СписокСведений.Добавить(ВернутьХранилищеЗначения(ТекстМодуля), Модуль);
			СписокСведений.Добавить(ВернутьХранилищеЗначения(ТаблицаБлоков), Модуль + "Блоки");
			
			СведенияОбОбъектах.Вставить(ОбъектСсылка, ВернутьХранилищеЗначения(СписокСведений));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ЗаполнитьСведенияОМодуляхОбычныхФорм() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Типы.Форма);
	МассивТипов.Добавить(Типы.ОбщаяФорма);
	
	// Выбираем из структуры конфигурации модули.
	// Из запроса убрано условие по реквизиту "СобраныСведения",
	// т.к. некоторые правила требуют наличия всех модулей конфигурации вне зависимости от проверяемых объектов.
	ЗапросВыборки = Новый Запрос;
	ЗапросВыборки.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК ТипОбъекта,
	|	СтруктураКонфигурации.Путь КАК Путь,
	|	СтруктураКонфигурации.Родитель.Наименование КАК РодительНаименование,
	|	СтруктураКонфигурации.Родитель.ТипОбъекта КАК РодительТипОбъекта
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.ТипОбъекта В(&ТипОбъекта)
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	//И СтруктураКонфигурации.СобраныСведения
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	ЗапросВыборки.УстановитьПараметр("Расширение", Расширение);
	ЗапросВыборки.УстановитьПараметр("Владелец", Версия);
	ЗапросВыборки.УстановитьПараметр("ТипОбъекта", МассивТипов);
	
	ВыборкаОбъектов = ЗапросВыборки.Выполнить().Выбрать();
	ВсегоОбъектов = ВыборкаОбъектов.Количество();
	
	// Если обычных форм нет, тогда выходим.
	Если ВсегоОбъектов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Выгружаем из конфигуратора сведения о модулях.
	КаталогВыгрузки = ПолучитьКаталогВременныхФайлов();
	Статус = ДоступККонфигуратору.ВыгрузитьМодули(Конфигурация, КаталогКонфигурации, Пользователь, Пароль,
		КаталогВыгрузки, Расширение);
	
	Если НЕ ПустаяСтрока(Статус) Тогда
		ФайлУдалить(КаталогВыгрузки);
		
		ТекстОшибки = НСтр("ru='Выгрузка модулей конфигурации завершилась с ошибкой:%1%2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Символы.ПС, Статус);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ИнициализироватьТаблицуТиповОбъектов();
	
	// Получаем наборы модулей.
	НаборыМодулей = ПолучитьНаборыМодулей();
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка модулей обычных форм (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	НомерОбъекта = 0;
	ПроцентОбработанныхОбъектов = 0;
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НомерОбъекта = НомерОбъекта + 1;
		
		ОбъектСсылка = ВыборкаОбъектов.Ссылка;
		ОбъектИмя = ВыборкаОбъектов.Наименование;
		ОбъектПуть = ВыборкаОбъектов.Путь;
		ТипОбъекта = ВыборкаОбъектов.ТипОбъекта;
		
		#Если Клиент Тогда
		ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		Если ТипОбъекта = Типы.ОбщаяФорма Тогда
			НачалоИмениФайла = СтрШаблон("ОбщаяФорма.%1.Форма", ОбъектИмя);
		ИначеЕсли ТипОбъекта = Типы.Форма Тогда
			ТипРодителя = ВыборкаОбъектов.РодительТипОбъекта;
			ПрефиксРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипРодителя, "ТипОбъекта", "Имя");
			ИмяРодителя = ВыборкаОбъектов.РодительНаименование;
			НачалоИмениФайла = СтрШаблон("%1.%2.Форма.%3.Форма", ПрефиксРодителя, ИмяРодителя, ОбъектИмя);
		Иначе
			Продолжить;
		КонецЕсли;
		
		НаборМодулей = НаборыМодулей[ТипОбъекта];
		
		Если НЕ ЗначениеЗаполнено(НаборМодулей) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Модуль Из НаборМодулей Цикл
			
			ИмяФайлаМодуля = СтрШаблон("%1.%2.txt", НачалоИмениФайла, Модуль);
			
			ПутьФайлаМодуля = КаталогВыгрузки + ИмяФайлаМодуля;
			
			Если НЕ ФайлСуществует(ПутьФайлаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			ФайлМодуля = Новый ТекстовыйДокумент;
			Попытка
				ФайлМодуля.Прочитать(ПутьФайлаМодуля);
				ТекстМодуля = ФайлМодуля.ПолучитьТекст();
			Исключение
				ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
				ТекстПредупреждения = СтрШаблон(НСтр("ru='Не удалось прочитать файл модуля: ""%1""'"), ПутьФайлаМодуля);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
				
				Продолжить;
			КонецПопытки;
			
			ТаблицаБлоков = ПолучитьТаблицуБлоковМодуля(ТекстМодуля);
			
			СписокСведений = СведенияОбОбъектах[ОбъектСсылка];
			Если НЕ ЗначениеЗаполнено(СписокСведений) Тогда
				СписокСведений = Новый СписокЗначений;
			Иначе
				СписокСведений = СписокСведений.Получить();
			КонецЕсли;
			
			СписокСведений.Добавить(ВернутьХранилищеЗначения(ТекстМодуля), Модуль);
			СписокСведений.Добавить(ВернутьХранилищеЗначения(ТаблицаБлоков), Модуль + "Блоки");
			
			СведенияОбОбъектах.Вставить(ОбъектСсылка, ВернутьХранилищеЗначения(СписокСведений));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ФайлУдалить(КаталогВыгрузки);
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТаблицуБлоковМодуля(Знач ТекстМодуля)
	
	ТипыБлоков = Перечисления.ТипыБлоковМодулей;
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	ТаблицаБлоков.Колонки.Добавить("Блок");
	ТаблицаБлоков.Колонки.Добавить("НачальнаяСтрока");
	ТаблицаБлоков.Колонки.Добавить("КонечнаяСтрока");
	ТаблицаБлоков.Колонки.Добавить("ЕстьКомментарий");
	ТаблицаБлоков.Колонки.Добавить("ЕстьЭкспорт");
	ТаблицаБлоков.Колонки.Добавить("ДирективаКомпиляции");
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстМодуля);
	ВсегоСтрокМодуля = Текст.КоличествоСтрок();
	
	// Разбиваем текст модуля на блоки.
	ТекущийБлок = Неопределено;
	НачальнаяСтрока = 1;
	КонечнаяСтрока = 1;
	ЭтоКонецБлока = Истина;
	ЕстьЭкспорт = Неопределено;
	ЕстьКомментарий = Ложь;
	ДирективаКомпиляции = "";
	
	Для НомерСтроки = 1 По ВсегоСтрокМодуля Цикл
		
		СтрокаМодуляИсходная = Текст.ПолучитьСтроку(НомерСтроки);
		СтрокаМодуля = СокрЛП(СтрокаМодуляИсходная);
		СтрокаМодуля = ВРег(СтрокаМодуля);
		
		// Встретился случай неправильного определения процедуры:
		// ПроцедураПроверки  = Обработчик.ПроцедураПроверки;
		// Замена происходит для правильного определения блока, в функцию СтрНачинаетсяС() добавлены пробелы в строку поиска.
		
		// Для случаев "КонецФункции" и "КонецПроцедуры" пробелы не добавляем.
		// Встретился случай неправильного определения окончания функции:
		// КонецФункции// СформироватьЗапросПроверкиПриСменеСтатуса();
		
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, " ") + " ";
		
		Если НЕ ЭтоКонецБлока Тогда
			НовыйБлок = ТекущийБлок;
			Если НовыйБлок = ТипыБлоков.ОписаниеПеременной Тогда
				ЭтоКонецБлока = (СтрНайти(СтрокаМодуля, ";") > 0);
			ИначеЕсли НовыйБлок = ТипыБлоков.ЗаголовокПроцедуры
				  ИЛИ НовыйБлок = ТипыБлоков.ЗаголовокФункции Тогда
				
				ПозицияСкобки = (СтрНайти(СтрокаМодуля, ")") > 0);
				ЭтоКонецБлока = (ПозицияСкобки > 0);
				ЕстьЭкспорт = Ложь;
				Если ЭтоКонецБлока Тогда
					ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияСкобки);
					Если ПозицияКомментария > 0 Тогда
						СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
					КонецЕсли;
					ЕстьЭкспорт = (СтрНайти(СтрокаМодуля, "ЭКСПОРТ",, ПозицияСкобки) > 0
						ИЛИ СтрНайти(СтрокаМодуля, "EXPORT",, ПозицияСкобки) > 0);
				КонецЕсли;
			Иначе
				ЭтоКонецБлока = Истина;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
			НовыйБлок = ТипыБлоков.Комментарий;
			ЭтоКонецБлока = Истина;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПЕРЕМ ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "VAR ") Тогда
			НовыйБлок = ТипыБлоков.ОписаниеПеременной;
			ЭтоКонецБлока = (СтрНайти(СтрокаМодуля, ";") > 0);
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПРОЦЕДУРА ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "PROCEDURE ") Тогда
			НовыйБлок = ТипыБлоков.ЗаголовокПроцедуры;
			ЕстьЭкспорт = Ложь;
			
			ПозицияСкобки = СтрНайти(СтрокаМодуля, ")");
			ЭтоКонецБлока = ПозицияСкобки > 0;
			Если ЭтоКонецБлока Тогда
				ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияСкобки);
				Если ПозицияКомментария > 0 Тогда
					СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
				КонецЕсли;
				ЕстьЭкспорт = (СтрНайти(СтрокаМодуля, "ЭКСПОРТ",, ПозицияСкобки) > 0
					ИЛИ СтрНайти(СтрокаМодуля, "EXPORT",, ПозицияСкобки) > 0);
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦПРОЦЕДУРЫ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "ENDPROCEDURE") Тогда // пробел не добавляем (см. выше)
			НовыйБлок = ТипыБлоков.ОкончаниеПроцедуры;
			ЭтоКонецБлока = Истина;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ФУНКЦИЯ ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "FUNCTION ") Тогда
			НовыйБлок = ТипыБлоков.ЗаголовокФункции;
			ЕстьЭкспорт = Ложь;
			
			ПозицияСкобки = СтрНайти(СтрокаМодуля, ")");
			ЭтоКонецБлока = ПозицияСкобки > 0;
			Если ЭтоКонецБлока Тогда
				ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияСкобки);
				Если ПозицияКомментария > 0 Тогда
					СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
				КонецЕсли;
				ЕстьЭкспорт = (СтрНайти(СтрокаМодуля, "ЭКСПОРТ",, ПозицияСкобки) > 0
					ИЛИ СтрНайти(СтрокаМодуля, "EXPORT",, ПозицияСкобки) > 0);
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦФУНКЦИИ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "ENDFUNCTION") Тогда // пробел не добавляем (см. выше)
			НовыйБлок = ТипыБлоков.ОкончаниеФункции;
			ЭтоКонецБлока = Истина;
		Иначе
			НовыйБлок = ТипыБлоков.Операторы;
			ЭтоКонецБлока = Истина;
			
			Если СтрНачинаетсяС(СтрокаМодуля, "&") Тогда
				ДирективаКомпиляции = СтрокаМодуляИсходная;
			КонецЕсли;
		КонецЕсли;
		
		Если НовыйБлок = ТекущийБлок Тогда
			ЕстьКомментарий = (ЕстьКомментарий ИЛИ (СтрНайти(СтрокаМодуля, "//") > 0));
			КонечнаяСтрока = КонечнаяСтрока + 1;
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийБлок) Тогда
				
				НоваяЗаписьОБлоке = ТаблицаБлоков.Добавить();
				НоваяЗаписьОБлоке.Блок = ТекущийБлок;
				НоваяЗаписьОБлоке.ЕстьКомментарий = ЕстьКомментарий;
				НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
				НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
				
				ЭтоМетод = (ТекущийБлок = ТипыБлоков.ЗаголовокПроцедуры) ИЛИ (ТекущийБлок = ТипыБлоков.ЗаголовокФункции);
				Если ЭтоМетод Тогда
					НоваяЗаписьОБлоке.ЕстьЭкспорт = ЕстьЭкспорт;
				КонецЕсли;
				
				ЭтоПеременная = (ТекущийБлок = ТипыБлоков.ОписаниеПеременной);
				Если ЭтоМетод ИЛИ ЭтоПеременная Тогда
					НоваяЗаписьОБлоке.ДирективаКомпиляции = ДирективаКомпиляции;
					ДирективаКомпиляции = "";
				КонецЕсли;
				
			КонецЕсли;
			
			НачальнаяСтрока = НомерСтроки;
			КонечнаяСтрока  = НомерСтроки;
			ТекущийБлок = НовыйБлок;
			ЕстьКомментарий = (СтрНайти(СтрокаМодуляИсходная, "//") > 0);
			
		КонецЕсли;
		
		Если НомерСтроки = ВсегоСтрокМодуля Тогда
			
			НоваяЗаписьОБлоке = ТаблицаБлоков.Добавить();
			НоваяЗаписьОБлоке.Блок = ТекущийБлок;
			НоваяЗаписьОБлоке.ЕстьКомментарий = ЕстьКомментарий;
			НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
			НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
			
			ЭтоМетод = (ТекущийБлок = ТипыБлоков.ЗаголовокПроцедуры) ИЛИ (ТекущийБлок = ТипыБлоков.ЗаголовокФункции);
			Если ЭтоМетод Тогда
				НоваяЗаписьОБлоке.ЕстьЭкспорт = ЕстьЭкспорт;
			КонецЕсли;
			
			ЭтоПеременная = (ТекущийБлок = ТипыБлоков.ОписаниеПеременной);
			Если ЭтоМетод ИЛИ ЭтоПеременная Тогда
				НоваяЗаписьОБлоке.ДирективаКомпиляции = ДирективаКомпиляции;
				ДирективаКомпиляции = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСведенийОСправке

// Получает данные о справке объектов конфигурации и запоминает их во временных структурах данных.
//
Функция ЗаполнитьСведенияОСправке(КаталогВыгрузкиФайловXML) Экспорт
	
	МассивТипов = ПолучитьТипыОбъектовИмеющихСправку();
	
	// Выбираем из структуры конфигурации модули.
	ЗапросВыборки = Новый Запрос;
	ЗапросВыборки.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Наименование КАК Наименование,
	|	СтруктураКонфигурации.ТипОбъекта КАК ТипОбъекта,
	|	СтруктураКонфигурации.Путь КАК Путь,
	|	СтруктураКонфигурации.Родитель.Наименование КАК РодительНаименование,
	|	СтруктураКонфигурации.Родитель.ТипОбъекта КАК РодительТипОбъекта
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И СтруктураКонфигурации.ТипОбъекта В(&ТипОбъекта)
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|	И СтруктураКонфигурации.СобраныСведения
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	ЗапросВыборки.УстановитьПараметр("Расширение", Расширение);
	ЗапросВыборки.УстановитьПараметр("Владелец", Версия);
	ЗапросВыборки.УстановитьПараметр("ТипОбъекта", МассивТипов);
	
	ВыборкаОбъектов = ЗапросВыборки.Выполнить().Выбрать();
	
	ИнициализироватьТаблицуТиповОбъектов();
	
	ТекстСостоянияШаблон = НСтр("ru='Выполняется обработка справки объектов (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	НомерОбъекта = 0;
	ВсегоОбъектов = ВыборкаОбъектов.Количество();
	ПроцентОбработанныхОбъектов = 0;
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НомерОбъекта = НомерОбъекта + 1;
		
		ОбъектСсылка = ВыборкаОбъектов.Ссылка;
		ОбъектИмя = ВыборкаОбъектов.Наименование;
		ОбъектПуть = ВыборкаОбъектов.Путь;
		ТипОбъекта = ВыборкаОбъектов.ТипОбъекта;
		
		#Если Клиент Тогда
		ТекущийПроцентОбъектов = Цел(100 * НомерОбъекта / ВсегоОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
		Если ТипОбъекта = Типы.Конфигурация Тогда
			НачалоИмениФайла = "";
		ИначеЕсли ТипОбъекта = Типы.ОбщаяУправляемаяФорма
			  ИЛИ ТипОбъекта = Типы.ОбщаяФорма Тогда
			НачалоИмениФайла = СтрШаблон("CommonForms\%1", ОбъектИмя);
		ИначеЕсли ТипОбъекта = Типы.УправляемаяФорма
			  ИЛИ ТипОбъекта = Типы.Форма Тогда
			ТипРодителя = ВыборкаОбъектов.РодительТипОбъекта;
			ПрефиксРодителя = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипРодителя, "ТипОбъекта",
				"ИмяАнглМнФормы");
			ИмяРодителя = ВыборкаОбъектов.РодительНаименование;
			НачалоИмениФайла = СтрШаблон("%1\%2\Forms\%3", ПрефиксРодителя, ИмяРодителя, ОбъектИмя);
		Иначе
			ПрефиксОбъекта = ПолучитьТипОбъектаПоТаблицеТипов(ТаблицаТиповОбъектов, ТипОбъекта, "ТипОбъекта", "ИмяАнглМнФормы");
			НачалоИмениФайла = СтрШаблон("%1\%2", ПрефиксОбъекта, ОбъектИмя);
		КонецЕсли;
		
		ОсновнойЯзык = РазборФайловXML.ПолучитьОсновнойЯзыкКонфигурации(СтруктураПроверки, КаталогВыгрузкиФайловXML);
		
		ИмяФайлаСправки = СтрШаблон("%1\Ext\Help\%2.html", НачалоИмениФайла, ОсновнойЯзык);
		ПутьФайлаСправки = КаталогВыгрузкиФайловXML + ИмяФайлаСправки;
		
		Если НЕ ФайлСуществует(ПутьФайлаСправки) Тогда
			ИмяФайлаСправки = СтрШаблон("%1\Ext\Help\en.html", НачалоИмениФайла);
			ПутьФайлаСправки = КаталогВыгрузкиФайловXML + ИмяФайлаСправки;
			Если НЕ ФайлСуществует(ПутьФайлаСправки) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ФайлСправки = Новый ТекстовыйДокумент;
		Попытка
			ФайлСправки.Прочитать(ПутьФайлаСправки);
			ТекстФайла = ФайлСправки.ПолучитьТекст();
		Исключение
			ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Не удалось прочитать файл справки: ""%1""'"), ПутьФайлаСправки);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстПредупреждения);
			
			Продолжить;
		КонецПопытки;
		
		// Обрабатываем HTML справки для предотвращения сливания слов.
		ТекстФайла = СтрЗаменить(ТекстФайла, "<TD>", "<TD>,");
		ТекстФайла = СтрЗаменить(ТекстФайла, "<td>", "<td>,");
		ТекстФайла = СтрЗаменить(ТекстФайла, "&nbsp;", " ,");
		ТекстФайла = СтрЗаменить(ТекстФайла, "<P>", "<P>,");
		ТекстФайла = СтрЗаменить(ТекстФайла, "</P>", ",</P>");
		
		// Тексты модулей.
		HTML = Новый COMОбъект("HTMLFile");
		HTML.Open("text/html");
		HTML.Write(ТекстФайла);
		Попытка
			ТекстСправки = HTML.Body.innerText;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ИмяСобытия = НСтр("ru='Ошибка файла выгрузки'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось получить содержимое файла справки: ""%1"" по причине: %2'"),
				ПутьФайлаСправки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньПредупреждение,,, ТекстОшибки);
		КонецПопытки;
		HTML.Close();
		
		СписокСведений = СведенияОбОбъектах[ОбъектСсылка];
		Если НЕ ЗначениеЗаполнено(СписокСведений) Тогда
			СписокСведений = Новый СписокЗначений;
		Иначе
			СписокСведений = СписокСведений.Получить();
		КонецЕсли;
		
		СписокСведений.Добавить(ВернутьХранилищеЗначения(ТекстСправки), "СправочнаяИнформация");
		СведенияОбОбъектах.Вставить(ОбъектСсылка, ВернутьХранилищеЗначения(СписокСведений));
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьТаблицуТиповОбъектов()
	
	Если ТипЗнч(ТаблицаТиповОбъектов) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаТиповОбъектов = ПолучитьТаблицуТиповОбъектов();
	КонецЕсли;
	
	Возврат ТаблицаТиповОбъектов;
	
КонецФункции

// Функция обрезает длинную строку до указанного в параметре количества символов по последнему пробелу.
//
Функция ОбрезатьСтрокуПоПоследнемуПробелу(Знач Значение, КоличествоСимволов = 200)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если СтрДлина(Значение) <= КоличествоСимволов Тогда
		Возврат Значение;
	КонецЕсли;
	
	НовоеЗначение = Лев(Значение, КоличествоСимволов);
	
	МассивСлов = СтрРазделить(НовоеЗначение, " ", Ложь);
	КоличествоСлов = МассивСлов.Количество();
	Если КоличествоСлов = 1 Тогда
		Возврат НовоеЗначение;
	КонецЕсли;
	
	МассивСлов.Удалить(КоличествоСлов - 1);
	НовоеЗначение = "";
	Для Каждого Слово Из МассивСлов Цикл
		НовоеЗначение = НовоеЗначение + Слово + " ";
	КонецЦикла;
	
	Возврат НовоеЗначение;
	
КонецФункции

// Инициализирует структуры данных для сбора сведений об объектах конфигурации.
//
Процедура ИнициализироватьСборДанных() Экспорт
	
	СведенияОбОбъектах = Новый Соответствие;
	ПодготовитьИсключенияКонфигурации();
	
КонецПроцедуры

// Записывает собранные данные о проверяемой конфигурации или расширении в информационную базу.
//
Процедура ЗаписатьДанныеВИБ() Экспорт
	
	ЗапросПоОбъектам = Новый Запрос;
	ЗапросПоОбъектам.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка,
	|	СтруктураКонфигурации.ТипОбъекта,
	|	СтруктураКонфигурации.Наименование,
	|	СтруктураКонфигурации.Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.Расширение = &Расширение
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураКонфигурации.НомерПоПорядку";
	
	ЗапросПоОбъектам.УстановитьПараметр("Расширение", Расширение);
	ЗапросПоОбъектам.УстановитьПараметр("Владелец", Версия);
	ВыборкаОбъектов = ЗапросПоОбъектам.Выполнить().Выбрать();
	Идентификаторы = Перечисления.ИдентификаторыСодержанияОбъектов;
	
	ИДСвойств = Новый Соответствие;
	ИДСвойств.Вставить("Тип",                           	Идентификаторы.Тип);
	ИДСвойств.Вставить("ТипПараметраКоманды",           	Идентификаторы.ТипПараметраКоманды);
	ИДСвойств.Вставить("Предопределенные",              	Идентификаторы.Предопределенные);
	ИДСвойств.Вставить("Подсистемы",                    	Идентификаторы.Подсистемы);
	ИДСвойств.Вставить("Форма",                         	Идентификаторы.Форма);
	ИДСвойств.Вставить("Макет",                         	Идентификаторы.Макет);
	ИДСвойств.Вставить("СодержимоеМакета",              	Идентификаторы.СодержимоеМакета);
	ИДСвойств.Вставить("СправочнаяИнформация",          	Идентификаторы.СправочнаяИнформация);
	ИДСвойств.Вставить("Модуль",                        	Идентификаторы.Модуль);
	ИДСвойств.Вставить("МодульБлоки",                   	Идентификаторы.МодульБлоки);
	ИДСвойств.Вставить("МодульКоманды",                 	Идентификаторы.МодульКоманды);
	ИДСвойств.Вставить("МодульКомандыБлоки",            	Идентификаторы.МодульКомандыБлоки);
	ИДСвойств.Вставить("МодульОбъекта",                 	Идентификаторы.МодульОбъекта);
	ИДСвойств.Вставить("МодульОбъектаБлоки",            	Идентификаторы.МодульОбъектаБлоки);
	ИДСвойств.Вставить("МодульНабораЗаписей",           	Идентификаторы.МодульНабораЗаписей);
	ИДСвойств.Вставить("МодульНабораЗаписейБлоки",      	Идентификаторы.МодульНабораЗаписейБлоки);
	ИДСвойств.Вставить("МодульСеанса",                  	Идентификаторы.МодульСеанса);
	ИДСвойств.Вставить("МодульСеансаБлоки",             	Идентификаторы.МодульСеансаБлоки);
	ИДСвойств.Вставить("МодульПриложения",              	Идентификаторы.МодульПриложения);
	ИДСвойств.Вставить("МодульПриложенияБлоки",         	Идентификаторы.МодульПриложенияБлоки);
	ИДСвойств.Вставить("МодульОбычногоПриложения",      	Идентификаторы.МодульОбычногоПриложения);
	ИДСвойств.Вставить("МодульОбычногоПриложенияБлоки", 	Идентификаторы.МодульОбычногоПриложенияБлоки);
	ИДСвойств.Вставить("МодульУправляемогоПриложения",  	Идентификаторы.МодульУправляемогоПриложения);
	ИДСвойств.Вставить("МодульУправляемогоПриложенияБлоки", Идентификаторы.МодульУправляемогоПриложенияБлоки);
	ИДСвойств.Вставить("МодульВнешнегоСоединения",      	Идентификаторы.МодульВнешнегоСоединения);
	ИДСвойств.Вставить("МодульВнешнегоСоединенияБлоки", 	Идентификаторы.МодульВнешнегоСоединенияБлоки);
	ИДСвойств.Вставить("МодульМенеджера",       			Идентификаторы.МодульМенеджера);
	ИДСвойств.Вставить("МодульМенеджераБлоки",  			Идентификаторы.МодульМенеджераБлоки);
	ИДСвойств.Вставить("МодульМенеджераЗначения",       	Идентификаторы.МодульМенеджераЗначения);
	ИДСвойств.Вставить("МодульМенеджераЗначенияБлоки",  	Идентификаторы.МодульМенеджераЗначенияБлоки);
	ИДСвойств.Вставить("Состав",  							Идентификаторы.Состав);
	ИДСвойств.Вставить("РеквизитыФормы",  					Идентификаторы.РеквизитыФормы);
	ИДСвойств.Вставить("ПараметрыФормы",  					Идентификаторы.ПараметрыФормы);
	ИДСвойств.Вставить("КомандыФормы",  					Идентификаторы.КомандыФормы);
	ИДСвойств.Вставить("КомандныйИнтерфейсФормы",  			Идентификаторы.КомандныйИнтерфейсФормы);
	ИДСвойств.Вставить("Расписание",  						Идентификаторы.РасписаниеРегламентногоЗадания);
	ИДСвойств.Вставить("ЭлементСтиля",						Идентификаторы.ЭлементСтиля);
	ИДСвойств.Вставить("Стиль",								Идентификаторы.Стиль);
	
	Счетчик = 0;
	ПроцентОбработанныхОбъектов = 0;
	КоличествоОбъектов = СведенияОбОбъектах.Количество();
	ТекстСостоянияШаблон = НСтр("ru='Выполняется запись сведений об объектах конфигурации (%1%%)'");
	#Если Клиент Тогда
	Состояние(СтрШаблон(ТекстСостоянияШаблон, "0"));
	#КонецЕсли
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ОбъектСсылка = ВыборкаОбъектов.Ссылка;
		СписокСвойствОбъекта = СведенияОбОбъектах[ОбъектСсылка];
		
		Если СписокСвойствОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Если ТипЗнч(СписокСвойствОбъекта) = Тип("ХранилищеЗначения") Тогда
			СписокСвойствОбъекта = СписокСвойствОбъекта.Получить();
		КонецЕсли;
		
		Если ТипЗнч(СписокСвойствОбъекта) <> Тип("СписокЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокСвойствОбъекта.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписейСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСвойств.Отбор.Объект.Установить(ОбъектСсылка);
		НаборЗаписейСвойств.Прочитать();
		
		НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСодержания.Отбор.Объект.Установить(ОбъектСсылка);
		НаборЗаписейСодержания.Прочитать();
		
		ТаблицаНаборЗаписейСвойств	  = НаборЗаписейСвойств.Выгрузить();
		ТаблицаНаборЗаписейСодержания = НаборЗаписейСодержания.Выгрузить();
		
		ФлагТаблицаНаборЗаписейСвойствИзменена	  = Ложь;
		ФлагТаблицаНаборЗаписейСодержанияИзменена = Ложь;
		
		Для Каждого ЭлементСвойств Из СписокСвойствОбъекта Цикл
			ИдентификаторСодержания = ИДСвойств[ЭлементСвойств.Представление];
			
			Если ЗначениеЗаполнено(ИдентификаторСодержания)Тогда
				
				СтрокаТаблицы = ТаблицаНаборЗаписейСодержания.Найти(ИдентификаторСодержания, "Имя");
				
				Если СтрокаТаблицы = Неопределено Тогда
					НоваяЗапись 	   = ТаблицаНаборЗаписейСодержания.Добавить();
					НоваяЗапись.Имя	   = ИдентификаторСодержания;
					НоваяЗапись.Объект = ОбъектСсылка;
				Иначе
					НоваяЗапись		   = СтрокаТаблицы;
				КонецЕсли;
				
				Если ТипЗнч(ЭлементСвойств.Значение) <> Тип("ХранилищеЗначения") Тогда
					ЭлементСвойств.Значение = ВернутьХранилищеЗначения(ЭлементСвойств.Значение);
				КонецЕсли;
				НоваяЗапись.Значение = ЭлементСвойств.Значение;
				
				ФлагТаблицаНаборЗаписейСодержанияИзменена = Истина;
				
			Иначе
				
				СтрокаТаблицы = ТаблицаНаборЗаписейСвойств.Найти(ЭлементСвойств.Представление, "Имя");
				
				Если СтрокаТаблицы = Неопределено Тогда
					НоваяЗапись		   = ТаблицаНаборЗаписейСвойств.Добавить();
					НоваяЗапись.Имя	   = ЭлементСвойств.Представление;
					НоваяЗапись.Объект = ОбъектСсылка;
				Иначе
					НоваяЗапись		   = СтрокаТаблицы;
				КонецЕсли;
				НоваяЗапись.Значение   = ОбрезатьСтрокуПоПоследнемуПробелу(ЭлементСвойств.Значение);
				
				ФлагТаблицаНаборЗаписейСвойствИзменена = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ФлагТаблицаНаборЗаписейСодержанияИзменена Тогда
			НаборЗаписейСодержания.Загрузить(ТаблицаНаборЗаписейСодержания);
			НаборЗаписейСодержания.Записать(Истина);
			НаборЗаписейСодержания.Очистить();
		КонецЕсли;
		
		Если ФлагТаблицаНаборЗаписейСвойствИзменена Тогда
			НаборЗаписейСвойств.Загрузить(ТаблицаНаборЗаписейСвойств);
			НаборЗаписейСвойств.Записать(Истина);
			НаборЗаписейСвойств.Очистить();
		КонецЕсли;
		
		#Если Клиент Тогда
		ТекущийПроцентОбъектов = Цел(100 * Счетчик / КоличествоОбъектов);
		
		Если ТекущийПроцентОбъектов > ПроцентОбработанныхОбъектов Тогда
			ПроцентОбработанныхОбъектов = ТекущийПроцентОбъектов;
			ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Строка(ТекущийПроцентОбъектов));
			Состояние(ТекстСостояния);
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	СведенияОбОбъектах.Очистить();
	
КонецПроцедуры

Процедура ПодготовитьИсключенияКонфигурации()
	
	СоответствиеОбъектовРазрешенийИИсключений = Новый Соответствие;
	
	ТаблицаРазрешенийКонфигурации = Новый ТаблицаЗначений;
	ТаблицаРазрешенийКонфигурации.Колонки.Добавить("ВидРазрешения");
	ТаблицаРазрешенийКонфигурации.Колонки.Добавить("Значение");
	ТаблицаРазрешенийКонфигурации.Колонки.Добавить("Расширение");
	
	ТаблицаИсключенийКонфигурации = Новый ТаблицаЗначений;
	ТаблицаИсключенийКонфигурации.Колонки.Добавить("ВидИсключения");
	ТаблицаИсключенийКонфигурации.Колонки.Добавить("Значение");
	ТаблицаИсключенийКонфигурации.Колонки.Добавить("Расширение");
	
	Для Каждого СтрокаИсключения Из Конфигурация.ИсключенияИзПроверки Цикл
		
		Если НЕ СтрокаИсключения.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		ВидИсключения = СтрокаИсключения.ВидИсключения;
		
		Если (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ВключатьПодсистему)
				ИЛИ (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ВключатьСПрефиксом)
				ИЛИ (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ВключатьТипОбъектов)
				ИЛИ (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ВключатьОбъект) Тогда
			НоваяСтрокаТаблицы = ТаблицаРазрешенийКонфигурации.Добавить();
			НоваяСтрокаТаблицы.ВидРазрешения = ВидИсключения;
		ИначеЕсли (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьПодсистему)
				ИЛИ (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьСПрефиксом)
				ИЛИ (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьТипОбъектов)
				ИЛИ (ВидИсключения = Перечисления.ВидыИсключенийИзПроверки.ИсключатьОбъект) Тогда
			НоваяСтрокаТаблицы = ТаблицаИсключенийКонфигурации.Добавить();
			НоваяСтрокаТаблицы.ВидИсключения = ВидИсключения;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицы.Значение = СокрЛП(СтрокаИсключения.Значение);
		НоваяСтрокаТаблицы.Расширение = СтрокаИсключения.Расширение;
		
	КонецЦикла;
	
	ЕстьИсключенияКонфигурации = (ТаблицаИсключенийКонфигурации.Количество() > 0);
	ЕстьРазрешенияКонфигурации = (ТаблицаРазрешенийКонфигурации.Количество() > 0);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Типы = Перечисления.ТипыОбъектов;

УровеньИнформация = УровеньЖурналаРегистрации.Информация;
УровеньОшибка = УровеньЖурналаРегистрации.Ошибка;
УровеньПредупреждение = УровеньЖурналаРегистрации.Предупреждение;

ЗадатьПредставлениеТипов();
Расширение = Справочники.Расширения.ПустаяСсылка();

#КонецОбласти

#КонецЕсли