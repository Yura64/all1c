#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем МетаданныеОписание;
Перем СсылочныеТипы;
Перем СоответствиеОбъектовМетаданныхИСсылочныхТипов;

Перем СоставПолнойВыгрузки Экспорт;  // Массив строк дерева метаданных, имеющих признак Выгружать.
Перем СоставВспомогательнойВыгрузки; // Массив строк дерева метаданных, имеющих признак выгрузки по ссылке.

Перем ИспользующиеИтоги; // Массив регистров, использующих итоги.

Перем мТипРезультатЗапроса;
Перем мТипДанныхУдаления;

Перем мКоличествоСохраненныхПоследнихВыгрузок;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Записывает правила и программы проверки, установленные
// как начальное заполнение.
//
Процедура ОбновитьПравилаПроверки() Экспорт
	
	ИмяФайлаЗаполнения = ПолучитьИмяВременногоФайла("xml");
	ПолучитьОбщийМакет("СоставПравилПроверки").Записать(ИмяФайлаЗаполнения);
	
	Инициализация();
	ВыполнитьЗагрузку(ИмяФайлаЗаполнения);
	
	ФайлУдалить(ИмяФайлаЗаполнения);
	
КонецПроцедуры

// Процедура производит начальную инициализацию - заполнение дерева описания
// классов объектов метаданных, дерево метаданных, список ссылочных типов.
//
// Параметры
//
Процедура Инициализация()
	
	ИспользоватьИтоги = Ложь;
	
	// Создаем объект, описывающий процессы построения дерева и выгрузку
	ЗаполнитьОписаниеМетаданных();
	
	МетаданныеОписание = МетаданныеОписание.Строки[0];
	
	СсылочныеТипы = Новый Соответствие;
	СоответствиеОбъектовМетаданныхИСсылочныхТипов = Новый Соответствие;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
	ДеревоМетаданных.Колонки.Очистить();
	// создание необходимых колонок
	ДеревоМетаданных.Колонки.Добавить("Выгружать", ОписаниеТиповЧисло);
	ДеревоМетаданных.Колонки.Добавить("ВыгружатьПриНеобходимости", ОписаниеТиповЧисло, НСтр("ru='При необходимости'"));
	ДеревоМетаданных.Колонки.Добавить("Метаданные");
	ДеревоМетаданных.Колонки.Добавить("ЭлементОписания");
	ДеревоМетаданных.Колонки.Добавить("ОбъектМД");
	ДеревоМетаданных.Колонки.Добавить("НастройкиПостроителя");
	ДеревоМетаданных.Колонки.Добавить("ИспользоватьОтбор");
	
	#Если Клиент Тогда
	ТекстСостояния = НСтр("ru='Выполняется обновление правил и программ проверки до версии %1.'");
	ТекстСостояния = СтрШаблон(ТекстСостояния, Метаданные.Версия);
	ТекстСостояния = ТекстСостояния + " " + НСтр("ru='Выполняется анализ метаданных конфигурации...'");
	Состояние(ТекстСостояния);
	#КонецЕсли
	
	ИспользующиеИтоги = Новый Массив;
	Корень = ДеревоМетаданных.Строки.Добавить();
	ПостроениеПоддереваОбъекта(Метаданные, Корень, МетаданныеОписание);
	СверткаПоддереваОбъекта(Корень);
	
	Для Каждого Элемент Из СсылочныеТипы Цикл
		СоответствиеОбъектовМетаданныхИСсылочныхТипов.Вставить(Элемент.Значение, Элемент.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура разбирает файл выгрузки и осуществляет запись в ИБ сохраненных
// там объектов.
//
// Параметры
//   ИмяФайла - имя файла выгрузки.
//
Процедура ВыполнитьЗагрузку(ИмяФайла)
	
	Если СтрДлина(ИмяФайла) = 0 Тогда
		#Если Клиент Тогда
		Сообщить(НСтр("ru='Обновление правил: Не задано имя файла выгрузки'"));
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	// Проверка формата файла обмена.
	Если НЕ ЧтениеXML.Прочитать()
		ИЛИ ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		#Если Клиент Тогда
		Сообщить(НСтр("ru='Обновление правил: Неверный формат файла выгрузки'"));
		#КонецЕсли
	
		Возврат;
	КонецЕсли;
	
	Если НЕ ЧтениеXML.Прочитать()
		ИЛИ ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ ЧтениеXML.ЛокальноеИмя <> "Data"
		ИЛИ ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		#Если Клиент Тогда
		Сообщить(НСтр("ru='Обновление правил: Неверный формат файла выгрузки'"));
		#КонецЕсли
		
		Возврат;
	КонецЕсли;
	
	// Чтение и запись в ИБ записанных в выгрузке объектов.
	Если НЕ ЧтениеXML.Прочитать() Тогда
		#Если Клиент Тогда
		Сообщить(НСтр("ru='Обновление правил: Неверный формат файла выгрузки'"));
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Загружено = 0;
	УстановитьИспользованиеИтогов();
	
	// Формируем массив предопределенных причин особенности, которые добавлены в конфигураторе,
	// т.к. есть еще предопределенные, добавленные в предприятии и объявленные предопределенными.
	ПричиныОсобенности = Справочники.ПричиныОсобенности;
	ПредопределенныеПричиныОсобенности = Новый Массив;
	ПредопределенныеПричиныОсобенности.Добавить(ПричиныОсобенности.НеполныйОрфографическийСловарь.ИмяПредопределенныхДанных);
	ПредопределенныеПричиныОсобенности.Добавить(ПричиныОсобенности.ТехническийДолг.ИмяПредопределенныхДанных);
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		Загружено = Загружено + 1;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		
		ТекстСостояния = НСтр("ru='Выполняется обновление правил и программ проверки до версии %1. Загружено объектов: %2'");
		ТекстСостояния = СтрШаблон(ТекстСостояния, Метаданные.Версия, Загружено);
		Состояние(ТекстСостояния);
		#КонецЕсли
		
		ЗаписанноеЗначение = ПрочитатьXML(ЧтениеXML);
		
		Если ПриЗагрузкеИспользоватьРежимОбменаДанными Тогда
			Попытка
				// Планы обмена свойства ОбменДанными не имеют.
				ЗаписанноеЗначение.ОбменДанными.Загрузка = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ФлагЗаписывать = Истина;
		
		Если ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.Правила") Тогда
			
			Если ЗначениеЗаполнено(ЗаписанноеЗначение.Ссылка) И (НЕ ЗаписанноеЗначение.ЭтоГруппа) Тогда
				ФлагЗаписывать = ЗаписанноеЗначение.ИзмененоПользователем;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.ПричиныОсобенности") Тогда
			
			Попытка
				// В 8.3.6 предопределенные значения дублируются; пропускаем, если есть существующее.
				Если ПредопределенныеПричиныОсобенности.Найти(ЗаписанноеЗначение.ИмяПредопределенныхДанных) <> Неопределено Тогда
					ФлагЗаписывать = Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ ФлагЗаписывать Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаписанноеЗначение.Записать();
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Если НЕ ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки Тогда
				
				#Если Клиент Тогда
				ТекстВопроса = СтрШаблон(НСтр("ru='При записи произошла ошибка:
					|%1
					|Продолжить загрузку?'"), ТекстОшибки);
				
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					ВызватьИсключение;
				КонецЕсли;
				#Иначе
				ВызватьИсключение;
				#КонецЕсли
				
			Иначе
				
				Попытка
					СообщениеПользователю = СтрШаблон(НСтр("ru='Ошибка при загрузке данных.
						|Объект: %1, Тип:
						|%2,
						|Ошибка : %3'"), ЗаписанноеЗначение, ТипЗнч(ЗаписанноеЗначение), ТекстОшибки);
						
					Сообщить(СообщениеПользователю, СтатусСообщения.Важное);
				Исключение
					СообщениеПользователю = НСтр("ru='Ошибка при загрузке данных.
						|Ошибка:'") + " " + ТекстОшибки;
					
					Сообщить(СообщениеПользователю, СтатусСообщения.Важное);
				КонецПопытки;
				
			КонецЕсли;
			
			Загружено = Загружено - 1;
			
		КонецПопытки;
		
	КонецЦикла;
	
	СнятьИспользованиеИтогов();
	
	#Если Клиент Тогда
	Состояние();
	#КонецЕсли
	
	// проверка формата файла обмена
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
	 ИЛИ ЧтениеXML.ЛокальноеИмя <> "Data"
	 ИЛИ ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		#Если Клиент Тогда
		Сообщить(НСтр("ru='Обновление правил: Неверный формат файла выгрузки'"));
		#КонецЕсли
	
		Возврат;
	КонецЕсли;
	
	Если НЕ ЧтениеXML.Прочитать()
		ИЛИ ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		ИЛИ ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		ИЛИ	ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		#Если Клиент Тогда
		Сообщить(НСтр("ru='Обновление правил: Неверный формат файла выгрузки'"));
		#КонецЕсли
	
		Возврат;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Процедура рекурсивно обрабатывает строку дерева метаданных, образуя списки полной и вспомогательной выгрузки.
//
// Параметры
//   СоставПолнойВыгрузки - список полной выгрузки.
//   СоставВспомогательнойВыгрузки - список вспомогательной выгрузки.
//   СтрокаДЗ - обрабатываемая строка дерева метаданных.
//
Процедура ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ)
	
	Если (СтрокаДЗ.ЭлементОписания <> Неопределено) И СтрокаДЗ.ЭлементОписания.Выгружаемый Тогда
		
		СтрокаДобавления = Неопределено;
		
		Если СтрокаДЗ.Выгружать Тогда
			
			СтрокаДобавления = СоставПолнойВыгрузки.Добавить();
			
		ИначеЕсли СтрокаДЗ.ВыгружатьПриНеобходимости Тогда
			
			СтрокаДобавления = СоставВспомогательнойВыгрузки.Добавить();
			
		КонецЕсли;
		
		Если СтрокаДобавления <> Неопределено Тогда
			
			СтрокаДобавления.ОбъектМД = СтрокаДЗ.ОбъектМД;
			СтрокаДобавления.СтрокаДерева = СтрокаДЗ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрокаДЗ Из СтрокаДЗ.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, ПодчиненнаяСтрокаДЗ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет строку дерева метаданных, попутно заполняя соответствие ссылочных типов объектам метаданных.
//
// Параметры
//   ОбъектМД - описание объекта метаданных.
//   ЭлементДЗ - заполняемая строка дерева метаданных.
//   ЭлементОписания - описание класса, к которому принадлежит объект метаданных (свойства, подчиненные классы).
//
Процедура ПостроениеПоддереваОбъекта(ОбъектМД, ЭлементДЗ, ЭлементОписания)
	
	ЭлементДЗ.Метаданные = ОбъектМД;
	ЭлементДЗ.ОбъектМД   = ОбъектМД;
	ЭлементДЗ.ЭлементОписания = ЭлементОписания;
	ЭлементДЗ.Выгружать = Ложь;
	ЭлементДЗ.ВыгружатьПриНеобходимости = Истина;
	
	Если ЭлементОписания.Менеджер <> Неопределено Тогда
		
		// заполнение соответствия ссылочных типов объектам метаданных
		Если ОбъектОбразуетСсылочныйТип(ОбъектМД) Тогда
			СсылочныеТипы[ТипЗнч(ЭлементОписания.Менеджер[ОбъектМД.Имя].ПустаяСсылка())] = ОбъектМД;
		КонецЕсли;
		
		Если Метаданные.РегистрыНакопления.Содержит(ОбъектМД)
			Или	Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
			
			ИспользующиеИтоги.Добавить(ЭлементДЗ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// подчиненные ветви
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Если НЕ ПодчиненныйКласс.Выгружаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ВеткаКласса = ЭлементДЗ.Строки.Добавить();
		ВеткаКласса.Метаданные = ПодчиненныйКласс.Класс;
		ВеткаКласса.Выгружать = Ложь;
		ВеткаКласса.ВыгружатьПриНеобходимости = Истина;
		
		ПодчиненныеОбъектыДанногоКласса = ОбъектМД[ПодчиненныйКласс.Класс];
		
		Для Каждого ПодчиненныйОбъектМД Из ПодчиненныеОбъектыДанногоКласса Цикл
			ПодчиненныйЭлементДЗ = ВеткаКласса.Строки.Добавить();
			ПостроениеПоддереваОбъекта(ПодчиненныйОбъектМД, ПодчиненныйЭлементДЗ, ПодчиненныйКласс);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет из дерева метаданных строки, соответствующие метаданным, заведомо не попадающим в выгрузку.
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных, подчиненные которой рассматриваются
//        с точки зрения удаления из списка потенциально выгружаемых.
//
Процедура СверткаПоддереваОбъекта(ЭлементДЗ)
	
	УдаляемыеВеткиКлассов = Новый Массив;
	Для Каждого ВеткаКласса Из ЭлементДЗ.Строки Цикл
		
		УдаляемыеПодчиненныеМД = Новый Массив;
		
		Для Каждого ПодчиненныйОбъектМД Из ВеткаКласса.Строки Цикл
			СверткаПоддереваОбъекта(ПодчиненныйОбъектМД);
			Если (ПодчиненныйОбъектМД.Строки.Количество() = 0) И (НЕ ПодчиненныйОбъектМД.ЭлементОписания.Выгружаемый) Тогда
				УдаляемыеПодчиненныеМД.Добавить(ВеткаКласса.Строки.Индекс(ПодчиненныйОбъектМД));
			КонецЕсли;
		КонецЦикла;
		
		Для Счетчик = 1 По УдаляемыеПодчиненныеМД.Количество() Цикл
			ВеткаКласса.Строки.Удалить(УдаляемыеПодчиненныеМД[УдаляемыеПодчиненныеМД.Количество() - Счетчик]);
		КонецЦикла;
		
		Если ВеткаКласса.Строки.Количество() = 0 Тогда
			УдаляемыеВеткиКлассов.Добавить(ЭлементДЗ.Строки.Индекс(ВеткаКласса));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Счетчик = 1 По УдаляемыеВеткиКлассов.Количество() Цикл
		ЭлементДЗ.Строки.Удалить(УдаляемыеВеткиКлассов[УдаляемыеВеткиКлассов.Количество() - Счетчик]);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и
// выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
// содержать объект, соответствующий данной строке.
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных.
//
Процедура УстановитьВыгружатьПодчиненным(ЭлементДЗ)
	
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.Выгружать = ЭлементДЗ.Выгружать;
		УстановитьВыгружатьПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева.
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных.
//
Процедура ОбновитьСостояниеВыгружать(ЭлементДЗ)
	
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.Выгружать;
		Иначе
			Если НЕ Состояние = ПодчиненныйЭлементДЗ.Выгружать Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.Выгружать = Состояние;
		ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
	КонецЕсли;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и
// выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
// содержать объект, соответствующий данной строке.
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных.
//
Процедура УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ)
	
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.ВыгружатьПриНеобходимости = ЭлементДЗ.ВыгружатьПриНеобходимости;
		УстановитьВыгружатьПриНеобходимостиПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева.
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных.
//
Процедура ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ)
	
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости;
		Иначе
			Если НЕ Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = Состояние;
		ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, являются ли объекты данного класса метаданных типизированными.
//
// Параметры
//   Описание - Описание класса.
// Возвращаемое значение:
//   Булево - Истина, если объекты данного класса метаданных типизированы, Ложь в противном случае.
//
Функция КлассМДТипизированный(Описание)
	
	Для Каждого Свойство Из Описание.Свойства Цикл
		Если Свойство.Значение = "Тип" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Функция определяет, являются ли тип ссылочным
//
// Параметры
//   Тип - исследуемый тип
// Возврат - Истина, если тип ссылочный, Ложь в противном случае.
//
Функция СсылочныйТип(Тип)
	
	МетаданныеТипа = СсылочныеТипы.Получить(Тип);
	
	Возврат МетаданныеТипа <> Неопределено;
	
КонецФункции

// Процедура добавляет в массив новый элемент, если он является уникальным
//
// Параметры
//   Массив - исследуемый тип
//   Элемент - добавляемый элемент.
//
Процедура ДобавитьВМассивЕслиУникальный(Массив, Элемент)
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных, соответствующего строке дерева.
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных.
// Возвращаемое значение:
//   Массив - массив потенциально используемых соответствующей записью типов.
//
Функция ПолучитьВсеТипы(ЭлементДЗ)
	
	ОбъектМД = ЭлементДЗ.ОбъектМД;
	Если ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданных")
	   И ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданныхКонфигурация") Тогда
		
		ВызватьИсключение(НСтр("ru='Внутренняя ошибка обработки выгрузки'"));
		
	КонецЕсли;
	
	Возврат ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементДЗ.ЭлементОписания);
	
КонецФункции

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных.
//
// Параметры
//   ОбъектМД - описание метаданного.
//   ЭлементОписания - описание класса объекта метаданного.
// Возврат - массив потенциально используемых соответствующей записью типов.
//
Функция ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементОписания)
	
	ВсеТипы = Новый Массив;
	
	Для Каждого Свойство Из ЭлементОписания.Свойства Цикл
		
		ЗначениеСвойства = ОбъектМД[Свойство.Значение];
		Если ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных")
			И ЗначениеСвойства.Количество() > 0 Тогда
			
			Для Каждого СтрокаКоллекции Из ЗначениеСвойства Цикл
				СсылочныйТипКлючИЗначение = СоответствиеОбъектовМетаданныхИСсылочныхТипов[СтрокаКоллекции];
				Если СсылочныйТипКлючИЗначение <> Неопределено Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектМетаданных") Тогда
			
			Для Каждого СсылочныйТипКлючИЗначение Из СсылочныеТипы Цикл
				
				Если ЗначениеСвойства = СсылочныйТипКлючИЗначение.Значение Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КлассМДТипизированный(ЭлементОписания) Тогда
		
		ОписаниеТипа = ОбъектМД.Тип;
		Для Каждого ОдинТип Из ОписаниеТипа.Типы() Цикл
			
			Если СсылочныйТип(ОдинТип) Тогда
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Метаданные.РегистрыСведений.Содержит(ОбъектМД)
			ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМД)
			ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД)
			ИЛИ Метаданные.РегистрыРасчета.Содержит(ОбъектМД) Тогда
			
			// какой-то из регистров, ищем в возможных регистраторах
			Для Каждого ДокументМД Из Метаданные.Документы Цикл
				
				Если ДокументМД.Движения.Содержит(ОбъектМД) Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(Документы[ДокументМД.Имя].ПустаяСсылка()));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Для Каждого ПодчиненныйОбъектМД Из ОбъектМД[ПодчиненныйКласс.Класс] Цикл
			
			ТипыПодчиненного = ПолучитьТипыИспользуемыеОМД(ПодчиненныйОбъектМД, ПодчиненныйКласс);
			Для Каждого ОдинТип Из ТипыПодчиненного Цикл
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВсеТипы;
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных.
// Поиск осуществляется среди строк, подчиненных переданной.
//
// Параметры:
//   СтрокаДЗ - строка дерева метаданных, от которой осуществляется поиск.
//   ОбъектМД - описание метаданного.
// Возврат - строка дерева метаданных.
//
Функция ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД)
	
	Возврат СтрокаДЗ.Строки.Найти(ОбъектМД, "ОбъектМД", Истина);
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных.
// Поиск осуществляется по всему дереву метаданных.
//
// Параметры
//   ОбъектМД - описание метаданного.
// Возврат - строка дерева метаданных.
//
Функция ЭлементДЗПоОбъектуМД(ОбъектМД)
	
	Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
		ЭлементДЗ = ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД);
		Если ЭлементДЗ <> Неопределено Тогда
			Возврат ЭлементДЗ;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

// Процедура определяет, на какие объект может ссылаться запись, соответствующая объекту метаданных, отображаемому
// данной строкой дерева метаданных и проставляет им признак ВыгружатьПриНеобходимости.
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных.
//
Процедура УстановкаСостоянияВыгружатьПриНеобходимости(ЭлементДЗ)
	
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	
	Если (ЭлементДЗ.Выгружать <> 1) И (ЭлементДЗ.ВыгружатьПриНеобходимости <> 1) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементДЗ.ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеТипы = ПолучитьВсеТипы(ЭлементДЗ);
	Для Каждого СсылочныйТип Из ВсеТипы Цикл
		
		ТипИОбъект = СсылочныеТипы.Получить(СсылочныйТип);
		Если ТипИОбъект = Неопределено Тогда
			
			ТекстИсключения = НСтр("ru='Внутренняя ошибка. Неполное заполнение структуры ссылочных типов -'") + " "
				+ СсылочныйТип;
			ВызватьИсключение(ТекстИсключения);
			
		КонецЕсли;
		
		ОбъектМД = ТипИОбъект;
		СтрокаДЗ = ЭлементДЗПоОбъектуМД(ОбъектМД);
		Если СтрокаДЗ = Неопределено Тогда
			
			ТекстИсключения = НСтр("ru='Внутренняя ошибка. Неполное заполнение дерева метаданных.'") + " "
				+ НСтр("ru='Отсутствует объект, образующий тип -'") + " " + СсылочныйТип;
			ВызватьИсключение(ТекстИсключения);
			
		КонецЕсли;
		
		Если (СтрокаДЗ.Выгружать = 1) ИЛИ (СтрокаДЗ.ВыгружатьПриНеобходимости = 1) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДЗ.ВыгружатьПриНеобходимости = 1;
		УстановкаСостоянияВыгружатьПриНеобходимости(СтрокаДЗ);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит заполнение дерева описания классов объектов метаданных
//
// Параметры
//
Процедура ЗаполнитьОписаниеМетаданных()
	
	КвалификаторыСтроки100 = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	
	СтэкДереваЗначенийСтроки = Новый Массив;
	МетаданныеОписание = Новый ДеревоЗначений;
	МетаданныеОписание.Колонки.Добавить("Выгружаемый", Новый ОписаниеТипов("Булево"));
	МетаданныеОписание.Колонки.Добавить("ДляЗапроса", Новый ОписаниеТипов("Строка"));
	МетаданныеОписание.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка",, КвалификаторыСтроки100));
	МетаданныеОписание.Колонки.Добавить("Менеджер");
	МетаданныеОписание.Колонки.Добавить("Свойства", Новый ОписаниеТипов("СписокЗначений"));
	СтэкДереваЗначенийСтроки.Вставить(0, МетаданныеОписание.Строки);
	
	// Конфигурации
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Конфигурации";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Константы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Константы";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Константы;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.Справочники
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Справочники";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Справочники;
	ОписаниеКласса.ДляЗапроса  = "Справочник.";
	ОписаниеКласса.Свойства.Добавить("Владельцы");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Справочники.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	
	// Конфигурации.Справочники.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Справочники.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.Документы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Документы";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Документы;
	ОписаниеКласса.ДляЗапроса  = "Документ.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Движения");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Документы.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.Документы.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Документы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.Последовательности
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Последовательности";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Последовательности;
	ОписаниеКласса.ДляЗапроса  = "Последовательность.";
	ОписаниеКласса.Свойства.Добавить("Документы");
	ОписаниеКласса.Свойства.Добавить("Движения");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Последовательности.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("СоответствиеДокументам");
	ОписаниеКласса.Свойства.Добавить("СоответствиеДвижениям");
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.ПланыВидовХарактеристик
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыВидовХарактеристик";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = ПланыВидовХарактеристик;
	ОписаниеКласса.ДляЗапроса  = "ПланВидовХарактеристик.";
	ОписаниеКласса.Свойства.Добавить("ДополнительныеЗначенияХарактеристик");
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыВидовХарактеристик.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	
	// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.ПланыСчетов
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыСчетов";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = ПланыСчетов;
	ОписаниеКласса.ДляЗапроса  = "ПланСчетов.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("ВидыСубконто");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыСчетов.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.ПланыСчетов.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыСчетов.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.ПланыВидовРасчета
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыВидовРасчета";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = ПланыВидовРасчета;
	ОписаниеКласса.ДляЗапроса  = "ПланВидовРасчета.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("ЗависимостьОтВидовРасчета");
	ОписаниеКласса.Свойства.Добавить("БазовыеВидыРасчета");
	ОписаниеКласса.Свойства.Добавить("ИспользованиеПериодаДействия");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыВидовРасчета.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.РегистрыСведений
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыСведений";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыСведений;
	ОписаниеКласса.ДляЗапроса  = "РегистрСведений.";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.РегистрыСведений.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.РегистрыСведений.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.РегистрыСведений.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.РегистрыНакопления
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыНакопления";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыНакопления;
	ОписаниеКласса.ДляЗапроса  = "РегистрНакопления.";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.РегистрыНакопления.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.РегистрыНакопления.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.РегистрыНакопления.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.РегистрыБухгалтерии
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыБухгалтерии";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыБухгалтерии;
	ОписаниеКласса.ДляЗапроса  = "РегистрБухгалтерии.";
	ОписаниеКласса.Свойства.Добавить("ПланСчетов");
	ОписаниеКласса.Свойства.Добавить("Корреспонденция");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.РегистрыБухгалтерии.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.РегистрыБухгалтерии.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.РегистрыБухгалтерии.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.РегистрыРасчета
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыРасчета";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыРасчета;
	ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.";
	ОписаниеКласса.Свойства.Добавить("Периодичность");
	ОписаниеКласса.Свойства.Добавить("ПериодДействия");
	ОписаниеКласса.Свойства.Добавить("БазовыйПериод");
	ОписаниеКласса.Свойства.Добавить("График");
	ОписаниеКласса.Свойства.Добавить("ЗначениеГрафика");
	ОписаниеКласса.Свойства.Добавить("ДатаГрафика");
	ОписаниеКласса.Свойства.Добавить("ПланВидовРасчета");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.РегистрыРасчета.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.РегистрыРасчета.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	
	// Конфигурации.РегистрыРасчета.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("БазовоеИзмерение");
	ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	
	// Конфигурации.РегистрыРасчета.Перерасчеты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Перерасчеты";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер  = "РегистрыРасчета.%i.Перерасчеты";
	ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.%i.";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.РегистрыРасчета.Перерасчеты.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.Свойства.Добавить("ДанныеВедущихРегистров");
	ОписаниеКласса.Свойства.Добавить("ИзмерениеРегистра");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.БизнесПроцессы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "БизнесПроцессы";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = БизнесПроцессы;
	ОписаниеКласса.ДляЗапроса  = "БизнесПроцесс.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Задача");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.БизнесПроцессы.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.Задачи
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Задачи";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Задачи;
	ОписаниеКласса.ДляЗапроса  = "Задача.";
	ОписаниеКласса.Свойства.Добавить("Адресация");
	ОписаниеКласса.Свойства.Добавить("ОсновнойРеквизитАдресации");
	ОписаниеКласса.Свойства.Добавить("ТекущийИсполнитель");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Задачи.РеквизитыАдресации
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РеквизитыАдресации";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("ИзмерениеАдресации");
	
	// Конфигурации.Задачи.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.Задачи.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.Задачи.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	// Конфигурации.ПланыОбмена
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыОбмена";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = ПланыОбмена;
	ОписаниеКласса.ДляЗапроса  = "ПланОбмена.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыОбмена.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	// Конфигурации.ПланыОбмена.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	
	// Конфигурации.ПланыОбмена.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	СтэкДереваЗначенийСтроки.Удалить(0);
	
КонецПроцедуры

// Функция определяет имеет ли переданный объект метаданных ссылочный тип.
//
// Возврат - Истина, если переданный объект метаданных имеет ссылочный тип, Ложь - противном случае.
Функция ОбъектОбразуетСсылочныйТип(ОбъектМД)
	
	Если ОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМД)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМД)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура, при необходимости, устанавливает отсутствие необходимости использования итогов.
//
// Параметры
Процедура УстановитьИспользованиеИтогов()
	
	Если ИспользоватьИтоги Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Регистр_СДЗ Из ИспользующиеИтоги Цикл
		Регистр_СДЗ.ЭлементОписания.Менеджер[Регистр_СДЗ.ОбъектМД.Имя].УстановитьИспользованиеИтогов(Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Процедура, при необходимости, устанавливает необходимость использования итогов
//
// Параметры
Процедура СнятьИспользованиеИтогов()
	
	Если ИспользоватьИтоги Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Регистр_СДЗ Из ИспользующиеИтоги Цикл
		Регистр_СДЗ.ЭлементОписания.Менеджер[Регистр_СДЗ.ОбъектМД.Имя].УстановитьИспользованиеИтогов(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ПриЗагрузкеИспользоватьРежимОбменаДанными = Истина;
ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки = Ложь;
ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
мКоличествоСохраненныхПоследнихВыгрузок = 50;

мТипРезультатЗапроса = Тип("РезультатЗапроса");
мТипДанныхУдаления = Тип("УдалениеОбъекта");

#КонецОбласти

#КонецЕсли