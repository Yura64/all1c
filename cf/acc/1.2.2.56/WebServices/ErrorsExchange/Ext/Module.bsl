
#Область ПрограммныйИнтерфейс

// Возвращает сводную информацию об ошибках АПК, включенных в ошибку СППР.
//
// Параметры:
//	ErrorUID - Строка - уникальный идентификатор ошибки СППР.
//
// Возвращаемое значение:
//	Структура - сводная информация по ошибкам АПК, ключи ОбщееКоличество, КоличествоОтработано.
//
Функция GetErrorsSummary(ErrorUID)
	
	Результат = Новый Структура("ОбщееКоличество, КоличествоОтработано", 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(1) КАК ОбщееКоличество,
	|	СУММА(ВЫБОР
	|			КОГДА НайденныеОшибки.Состояние В (&СостояниеИсправлена, &СостояниеОсобенность)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОтработано
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.ВнешнийИдентификаторОшибки = &ВнешнийИдентификаторОшибки";
	
	Запрос.УстановитьПараметр("ВнешнийИдентификаторОшибки", СокрЛП(ErrorUID));
	Запрос.УстановитьПараметр("СостояниеИсправлена", Перечисления.СостояниеОшибки.Исправлена);
	Запрос.УстановитьПараметр("СостояниеОсобенность", Перечисления.СостояниеОшибки.Особенность);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат ВернутьХранилищеЗначения(Результат);
	
КонецФункции

// Возвращает информацию об ошибках АПК, включенных в ошибку СППР.
//
// Параметры:
//	ErrorUID - Строка - уникальный идентификатор ошибки СППР.
//
// Возвращаемое значение:
//	ХранилищеЗначение - содержит таблицу описания ошибок АПК с колонками:
//		Номер,
//		Название,
//		Уточнение,
//		Объект,
//		МестоОбнаружения,
//		СостояниеНаименование,
//		ПричинаОсобенности,
//		Ответственный,
//		Критичность,
//		Требования,
//		ОбъектУИД,
//		ПравилоУИД.
//
Функция GetErrors(ErrorUID)
	
	СоответствиеСостояний = ИнтеграцияССППР.СоответствиеНазванийПеречисления("СостояниеОшибки");
	СоответствиеОтветственныхЗаОбъекты = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НайденныеОшибки.Номер КАК Номер,
	|	НайденныеОшибки.Ошибка.Наименование КАК Название,
	|	НайденныеОшибки.Уточнение,
	|	НайденныеОшибки.Объект.Путь КАК Объект,
	|	НайденныеОшибки.МестоОбнаружения,
	|	НайденныеОшибки.Состояние КАК СостояниеСсылка,
	|	ПРЕДСТАВЛЕНИЕ(НайденныеОшибки.Состояние) КАК СостояниеНаименование,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(НайденныеОшибки.ПричинаОсобенности.Наименование, """") КАК СТРОКА(255)) КАК ПричинаОсобенности,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(НайденныеОшибки.Ответственный.Наименование, """") КАК СТРОКА(255)) КАК Ответственный,
	|	НайденныеОшибки.Ответственный КАК ОтветственныйСсылка,
	|	ПРЕДСТАВЛЕНИЕ(НайденныеОшибки.Ошибка.Критичность) КАК Критичность,
	|	НайденныеОшибки.Объект КАК ОбъектСсылка,
	|	НайденныеОшибки.Правило КАК ПравилоСсылка
	|ПОМЕСТИТЬ ВТОшибки
	|ИЗ
	|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	|ГДЕ
	|	НайденныеОшибки.ВнешнийИдентификаторОшибки = &ВнешнийИдентификаторОшибки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОшибки.ПравилоСсылка
	|ПОМЕСТИТЬ ВТПравила
	|ИЗ
	|	ВТОшибки КАК ВТОшибки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Требования.ПравилоПроверки КАК ПравилоСсылка,
	|	Требования.Ссылка.Наименование КАК ТребованиеНаименование,
	|	Требования.Ссылка.СсылкаНаСтандарт КАК СсылкаНаСтандарт
	|ИЗ
	|	Справочник.Требования.РеализацияТребования КАК Требования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПравила КАК ВТПравила
	|		ПО Требования.ПравилоПроверки = ВТПравила.ПравилоСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилоСсылка,
	|	ТребованиеНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОшибки.Номер,
	|	ВТОшибки.Название,
	|	ВТОшибки.Уточнение,
	|	ВТОшибки.Объект,
	|	ВТОшибки.МестоОбнаружения,
	|	ВТОшибки.СостояниеСсылка,
	|	ВТОшибки.СостояниеНаименование,
	|	ВТОшибки.ПричинаОсобенности,
	|	ВТОшибки.Ответственный,
	|	ВТОшибки.ОтветственныйСсылка,
	|	ВТОшибки.Критичность,
	|	ВТОшибки.ОбъектСсылка,
	|	ВТОшибки.ПравилоСсылка
	|ИЗ
	|	ВТОшибки КАК ВТОшибки";
	
	Запрос.УстановитьПараметр("ВнешнийИдентификаторОшибки", СокрЛП(ErrorUID));
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ТаблицаТребований = Пакет[2].Выгрузить();
	ТаблицаТребований.Индексы.Добавить("ПравилоСсылка");
	
	ТаблицаОшибок = Пакет[3].Выгрузить();
	ТаблицаОшибок.Колонки.Добавить("Требования");
	ТаблицаОшибок.Колонки.Добавить("ОбъектУИД");
	ТаблицаОшибок.Колонки.Добавить("ПравилоУИД");
	
	Для Каждого ТекСтр Из ТаблицаОшибок Цикл
		
		// Дозаполнение поля "Ответственный"
		Если НЕ ЗначениеЗаполнено(ТекСтр.ОтветственныйСсылка) Тогда
			
			ОтветственныйЗаОбъект = СоответствиеОтветственныхЗаОбъекты.Получить(ТекСтр.ОбъектСсылка);
			
			Если ОтветственныйЗаОбъект = Неопределено Тогда
				
				ОтветственныйЗаОбъект = ПолучитьОбъектПоНаследству(ТекСтр.ОбъектСсылка).Ответственный;
				Если ЗначениеЗаполнено(ОтветственныйЗаОбъект) Тогда
					ОтветственныйЗаОбъект = Новый Структура(
						"ОтветственныйСсылка, Ответственный",
						ОтветственныйЗаОбъект, ОтветственныйЗаОбъект.Наименование);
				Иначе
					ОтветственныйЗаОбъект = Новый Структура(
						"ОтветственныйСсылка, Ответственный",
						Справочники.Пользователи.ПустаяСсылка(), "");
				КонецЕсли;
				
				СоответствиеОтветственныхЗаОбъекты.Вставить(ТекСтр.ОбъектСсылка, ОтветственныйЗаОбъект);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекСтр, ОтветственныйЗаОбъект);
			
		КонецЕсли;
		
		// Заполнение поля "Требования"
		ТекСтр.Требования = Новый Соответствие;
		
		СтрокиТребований = ТаблицаТребований.НайтиСтроки(Новый Структура("ПравилоСсылка", ТекСтр.ПравилоСсылка));
		Для Каждого Требование Из СтрокиТребований Цикл
			ТекСтр.Требования.Вставить(Требование.ТребованиеНаименование, Требование.СсылкаНаСтандарт);
		КонецЦикла;
		
		// Заполнение поля "СостояниеНаименование"
		ТекСтр.СостояниеНаименование = СоответствиеСостояний.Получить(ТекСтр.СостояниеСсылка);
		
		// Заполнение уникальных идентификаторов измерений ошибки
		ТекСтр.ОбъектУИД  = ИнтеграцияССППР.ИдентификаторПоСсылке(ТекСтр.ОбъектСсылка);
		ТекСтр.ПравилоУИД = ИнтеграцияССППР.ИдентификаторПоСсылке(ТекСтр.ПравилоСсылка);
		
	КонецЦикла;
	
	ТаблицаОшибок.Колонки.Удалить("ОтветственныйСсылка");
	ТаблицаОшибок.Колонки.Удалить("ОбъектСсылка");
	ТаблицаОшибок.Колонки.Удалить("ПравилоСсылка");
	ТаблицаОшибок.Колонки.Удалить("СостояниеСсылка");
	
	ТаблицаОшибок.Сортировать("Название, Ответственный, Объект, Номер");
	
	Возврат ВернутьХранилищеЗначения(ТаблицаОшибок);
	
КонецФункции

// Обновляет информацию об ошибках АПК.
//
// Параметры:
//	ErrorsTable - Хранилище, содержит Структура - данные об ошибках АПК:
//		Ошибки - Массив с элементами Структура("ОбъектУИД, ПравилоУИД, Номер").
//		Реквизиты - Структура("ВнешнийИдентификаторОшибки, Состояние, ПричинаОсобенности, Ответственный").
//
// Возвращаемое значение:
//	Структура - сводная информация по ошибкам АПК, ключи ОбщееКоличество, КоличествоОтработано.
//
Функция WriteErrors(ErrorsTable)
	
	Данные = ErrorsTable.Получить();
	
	// Преобразуем строковые данные в ссылочные.
	Реквизиты = Новый Структура;
	Для Каждого КлючИЗначение Из Данные.Реквизиты Цикл
		
		Если КлючИЗначение.Ключ = "Состояние" Тогда
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Реквизиты.Вставить(КлючИЗначение.Ключ, Перечисления.СостояниеОшибки[КлючИЗначение.Значение]);
			Иначе
				Реквизиты.Вставить(КлючИЗначение.Ключ, Перечисления.СостояниеОшибки.ПустаяСсылка());
			КонецЕсли;
			
		ИначеЕсли КлючИЗначение.Ключ = "ПричинаОсобенности" Тогда
			
			Реквизиты.Вставить(
				КлючИЗначение.Ключ,
				ИнтеграцияССППР.СсылкаПоИдентификатору(Справочники.ПричиныОсобенности, КлючИЗначение.Значение));
			
		ИначеЕсли КлючИЗначение.Ключ = "Ответственный" Тогда
			
			Реквизиты.Вставить(КлючИЗначение.Ключ, ИнтеграцияССППР.НайтиПользователя(КлючИЗначение.Значение));
			Если НЕ ЗначениеЗаполнено(Реквизиты[КлючИЗначение.Ключ]) Тогда
				
				ОписаниеОшибки = СтрЗаменить(
					НСтр("ru='Не найден пользователь ""%Ответственный%""'"),
					"%Ответственный%",
					КлючИЗначение.Значение);
				Возврат ИнтеграцияССППР.ВернутьОшибкуСервиса(НСтр("ru='Ошибка при записи регистра сведений НайденныеОшибки'"), ОписаниеОшибки);
				
			КонецЕсли;
			
		ИначеЕсли КлючИЗначение.Ключ = "АвторОсобенности" Тогда
			
			Реквизиты.Вставить(КлючИЗначение.Ключ, ИнтеграцияССППР.НайтиПользователя(КлючИЗначение.Значение));
			
		Иначе
			
			Реквизиты.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим свойства ошибок.
	НачатьТранзакцию();
	
	Для Каждого ДанныеОшибки Из Данные.Ошибки Цикл
		
		Запись = РегистрыСведений.НайденныеОшибки.СоздатьМенеджерЗаписи();
		Запись.Объект  = ИнтеграцияССППР.СсылкаПоИдентификатору(Справочники.СтруктураКонфигурации, ДанныеОшибки.ОбъектУИД);
		Запись.Правило = ИнтеграцияССППР.СсылкаПоИдентификатору(Справочники.Правила, ДанныеОшибки.ПравилоУИД);
		Запись.Номер   = ДанныеОшибки.Номер;
		Запись.Прочитать();
		
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
		Попытка
			Запись.Записать(Истина);
		Исключение
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			Возврат ИнтеграцияССППР.ВернутьОшибкуСервиса(НСтр("ru='Ошибка при записи регистра сведений ""НайденныеОшибки""'"), ОписаниеОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ВернутьХранилищеЗначения(Истина);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает номер версии сервиса.
//
Функция GetInterfaceVersion()
	
	Возврат ВернутьХранилищеЗначения(СокрЛП(Метаданные.Версия));
	
КонецФункции

// Служебная, возвращает элементы справочника ПричиныОсобенности.
//
// Возвращаемое значение:
//	Соответствие - Ключ: наименование элемента справочника, Значение: ссылка элемента справочника.
//
Функция GetFeatureReasons()
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПричиныОсобенности.Ссылка,
	|	ПричиныОсобенности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПричиныОсобенности КАК ПричиныОсобенности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Наименование, ИнтеграцияССППР.ИдентификаторПоСсылке(Выборка.Ссылка));
	КонецЦикла;
	
	Возврат ВернутьХранилищеЗначения(Результат);
	
КонецФункции

#КонецОбласти
